

//*****************************************************************
//                                                                *
//  	           PROGRAM - BalanceEnquiryService.Java                 
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
//Naga Sai Ganesh  : 27/11/2024    : 24090013  :  MICROSERVICES   *
//Niharika Tammana : 27/11/2024    : 24090013  :  MICROSERVICES   *
//----------------------------------------------------------------*
//Naga Sai Ganesh : 11/12/2024    :  24120051  :   MICROSERVICES  *
//Niharika Tammana : 11/12/2024    : 24120051  :  MICROSERVICES   *
//----------------------------------------------------------------*
//Niharika Tammana : 27/01/2025    : 25010209  :  MICROSERVICES   *
//----------------------------------------------------------------*
package com.tcs.bancs.microservices.services;

import java.io.IOException;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import javax.sql.rowset.serial.SerialException;
import javax.validation.Valid;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.gson.Gson;
import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.aggregator.AggregationServiceImpl;
import com.tcs.bancs.microservices.config.CacheConfig;
import com.tcs.bancs.microservices.configuration.PropertyLoader;
import com.tcs.bancs.microservices.db.model.Brhm;
import com.tcs.bancs.microservices.db.model.Sysc;
import com.tcs.bancs.microservices.db.model.Telm;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;
import com.tcs.bancs.microservices.impl.MigenqDetailsRepositoryImpl;
import com.tcs.bancs.microservices.repository.day.TelmDetailDayRepo;
import com.tcs.bancs.microservices.util.DBProcess;
import com.tcs.bancs.microservices.util.FrameworkConstants;
import com.tcs.bancs.microservices.validations.ValidateAccountNum;
//START OF IR 25010209
import com.tcs.bancs.microservices.validations.ValidateBranchNum;
import com.tcs.bancs.microservices.validations.ValidateCIFNumber;
import com.tcs.bancs.microservices.validations.ValidateRecordCount;
import com.tcs.bancs.microservices.validations.ValidateRefNum;
import com.tcs.bancs.microservices.validations.ValidateTellerNum;
//END OF IR 25010209
import com.tcs.bancs.microservices.java.response.ErrorResponse;
import com.tcs.bancs.microservices.java.response.Response;
import com.tcs.bancs.microservices.java.txtm.Error_Description;
import com.tcs.bancs.microservices.repository.night.SyscDetailNightRepo;
import com.tcs.bancs.microservices.reqbean.RequestBean;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@RestController
@Api(value = "Aggregation_API", description = " ", tags = { "Aggregation API" })
@RequestMapping("/")
@Cacheable
@CacheEvict
public class BalanceEnquiryService {

//////////////////////////////////////////////////////////////////////////--------ENV VARIABLES STARTED--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
	@Autowired
	AggregationServiceImpl aggregationServiceImpl;

	@Autowired
	MigenqDetailsRepositoryImpl migDetails;
	
	@Autowired
	TelmDetailDayRepo telmRepo;
	
	@Autowired
	DBProcess dbProcess;

	@Value("${UTENVCALS-BANCS-TRACE-STATE}")
	private String bancsTraceState;

	@Value("${UTENVCALS-MASTER-DQPTYPE}")
	private String masterDQType;

	@Value("${UTENVCALS-BANCS-HOST}")
	private String bancsHost;

	@Value("${UTENVCALS-FNS-SYSNUM}")
	private String fnsSysnum;

	@Value("${UTENVCALS-CTRL-SYSNUM}")
	private String ctrlSysnum;

	@Value("${UTENVCALS-DAY-SYSNUM}")
	private String daySysnum;

	@Value("${UTENVCALS-NIGHT-SYSNUM}")
	private String nightSysnum;

	@Value("${UTENVCALS-NON24H-SYSNUM}")
	private String non24hsum;

	@Value("${UTENVCALS-DEF-RMODE}")
	private String defRMode;

	@Value("${UTENVCALS-MASTER-DB}")
	private String masterDB;
	
	@Value("${UTENVCALS-MASTER-DB-1}")
	private String masterDB1;

	@Value("${UTENVCALS-MASTER-DB-2}")
	private String masterDB2;

	@Value("${UTENVCALS-SERVICES-FLAG}")
	private String servicesFlag;

	@Value("${VC-MS-SERVICE-ID}")
	private String serviceid;
	
	@Value("${avbal.response.outline.location}")
	private String AVBAL_RES_FILE_PATH;
	
	@Value("${UTENVCALS-INSPARAM-FLAG}")
	private String INSPARAM_FLAG;
	
	@Value("${UTENVCALS-INSPARAM-VALUE}")
	private String INSPARAM_VALUE;
	
    @Value("${UTENVCALS-DEF-RMODE}")
    private String dbmode;
    
//    @Value("${day.datasource.jdbc-url}")
//    private String dayJdbcUrl;
//	
//    @Value("${day.datasource.username}")
//    private String dayUsername;
//
//    @Value("${day.datasource.password}")
//    private String dayPassword;
//    
//    @Value("${day.datasource.driver-class-name}")
//    private String dayDriverClass;
//      
//    @Value("${night.datasource.jdbc-url}")
//    private String nightJdbcUrl;
//	
//    @Value("${night.datasource.username}")
//    private String nightUsername;
//
//    @Value("${night.datasource.password}")
//    private String nightPassword;
//    
//    @Value("${night.datasource.driver-class-name}")
//    private String nightDriverClass;
	
	@Autowired
	SyscDetailNightRepo syscReponight;

	
    @Autowired
    @Qualifier("dayDataSource")
    private DataSource dayDataSource;

    @Autowired
    @Qualifier("nightDataSource")
    private DataSource nightDataSource;
	
//////////////////////////////////////////////////////////////////////////--------ENV VARIABLES ENDED--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	Logger logger = LoggerFactory.getLogger(BalanceEnquiryService.class);
	
//////////////////////////////////////////////////////////////////////////--------PATH FILES READING STARTED--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
	String ErrorCodeMasterFilePath = CacheConfig.frameworkConfigProperties
			.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	String sourceAuth = CacheConfig.frameworkConfigProperties.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	String ipConfig = CacheConfig.frameworkConfigProperties.getProperty(FrameworkConstants.LOOKUP_FILES_PATH);
	Properties error = PropertyLoader
			.readPropertyFile(new String(ErrorCodeMasterFilePath + "/ErrorCodeMaster.properties"));
	Properties sId = PropertyLoader.readPropertyFile(new String(sourceAuth + "/SourceIdList.properties"));
	Properties ipprop = PropertyLoader.readPropertyFile(new String(ipConfig + "/IpConfigMaster.properties"));
	
//////////////////////////////////////////////////////////////////////////--------PATH FILES READING ENDED--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	private final Response responseObj;

	@Autowired
	public BalanceEnquiryService(Response responseObj) {
		this.responseObj = responseObj;
	}
	
	@InitBinder
	public void initBinder(WebDataBinder binder) {
		binder.setDisallowedFields(new String[] {});
	}
	
//////////////////////////////////////////////////////////////////////////-------- OBJECTS CREATION STARTED--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	
	ErrorResponse 			errobj 		= new ErrorResponse();
	Error_Description 		errdesc 	= new Error_Description();
	BalanceEnqService_Child balance = new BalanceEnqService_Child();
	ValidateAccountNum      inpacc		= new ValidateAccountNum();
	ValidateBranchNum		inpbrh		= new ValidateBranchNum();
	ValidateCIFNumber		inpcif		= new ValidateCIFNumber();
	ValidateRecordCount		inprcn		= new ValidateRecordCount();
	ValidateRefNum			inpref		= new ValidateRefNum();
	ValidateTellerNum		inptel		= new ValidateTellerNum();
	//END OF IR 25010209
	Gson gson = new Gson();
//////////////////////////////////////////////////////////////////////////-------- OBJECTS CREATION ENDED--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	

	@SuppressWarnings({ "unchecked", "rawtypes"})
	@ApiOperation(value = "Call AVBAL", notes = "AVBAL Service:This API is used to fetch Customer Details.")
	@PostMapping(value = { "/Balance_Enq" }, produces = { "application/json" })
	@CrossOrigin()
	@JsonIgnoreProperties(ignoreUnknown = true)
	@Validated
	public ResponseEntity<Object> getCustomerDetails(@RequestBody(required = false) @Valid RequestBean reqbean,
			HttpServletRequest request, @RequestHeader HttpHeaders headers, HttpServletResponse response)
			throws Exception {
		LocalDateTime time = LocalDateTime.now();
		logger.info("VC-----------------Transaction Started-----------------VC");
		response.setHeader("X-Content-Type-Options", "nosniff");
		response.setHeader("X-Frame-Options", "DENY");
		response.setHeader("Content-Security-Policy", "default-src 'self'");
		response.setHeader("X-XSS-Protection", "1;mode=block");
		
//////////////////////////////////////////////////////////////////////////-------- INITIAL VARIABLES--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		
		String IPAddress = request.getHeader("X-Forwarded-For");
		String remoteAddress = request.getRemoteAddr();
		String accept = request.getHeader("Content-Type");
		DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
		
		String entryDate = entryDate1.format(time);
		
//////////////////////////////////////////////////////////////////////////-------- SERVICE VARIABLES--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
//	    String dayconnectionString = dayJdbcUrl.split("@")[0] + dayUsername + "/" + dayPassword + "@" + dayJdbcUrl.split("@")[1];
//	    String nightconnectionString = nightJdbcUrl.split("@")[0] + nightUsername + "/" + nightPassword + "@" + nightJdbcUrl.split("@")[1];
//	    String connectionstring ="";
//	    String driverclass = "";		
		String reqbeanstr = new String();
		String finalResponse = new String();
		String res_file_path = new String();
		String refno = new String();
		String tellerno = new String();
		String branchno = new String();
		String noOfRecords = new String();
		String cifno = new String();
		String lacctno = new String();
		String sourceId  = new String();
		String validChkdFlag = new String();
		String validacctChkdFlag = new String();
		List<String> chkdRes = new ArrayList<>();
		List<String> acctchkdRes = new ArrayList<>();
		String out_response = new String();
		String errno = new String();
		String chkderr = new String();
		String acctchkderr = new String();
		String errDesc = new String();
		List<String> errList = new ArrayList<>();
		String accno = new String();
		//rununit fix
		DataSource dataSource = dayDataSource;
		//rununit fix
		List<Telm> telm = new ArrayList<Telm>();
		List<Brhm> brhm = new ArrayList<Brhm>();
		String sign_on_flag= new String();
		String formattedTeller = new String();
		String formattedBranch = new String();
//////////////////////////////////////////////////////////////////////////-------- ENV VARIABLES--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		
		String callcode = "S";
		String opt = "";
		List<String> res = new ArrayList<String>();
		String formattedmasterDB1 = StringUtils.rightPad(masterDB1, 15);
		String formattedmasterDB2 = StringUtils.rightPad(masterDB2, 15);
		String lsRecArea = bancsTraceState.trim() + masterDQType.trim() + bancsHost.trim() + fnsSysnum.trim()
				+ ctrlSysnum.trim() + daySysnum.trim() + nightSysnum.trim() + non24hsum.trim() + defRMode.trim()
				+ formattedmasterDB1 + formattedmasterDB2 + servicesFlag.trim() + masterDB.trim() + INSPARAM_FLAG.trim() + INSPARAM_VALUE.trim();	
//////////////////////////////////////////////////////////////////////////-------- INPUT VALIDATIONS--------\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
try {
	    if(reqbean != null) {
	    	if(!reqbean.isEmpty()){
	    		
    		reqbeanstr = gson.toJson(reqbean).toString();
    		tellerno   = reqbean.getTellerId();
    		branchno   = reqbean.getBranchCode();
    	    refno	    =  reqbean.getReferenceNumber();
    		logger.info("VC--------REFERENCE_NUMBER----------VC " + refno);
	        res_file_path=AVBAL_RES_FILE_PATH;
	        errList = inpref.validateRefNum(refno);
		    errno = errList.get(1);
		    refno = errList.get(0);
		    if(!errno.equals("00000")) {			
				errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
					migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
					return new ResponseEntity(finalResponse, HttpStatus.OK);
			}
		    errList = inptel.validateTellerNum(tellerno);
		    errno = errList.get(1);
		    tellerno = errList.get(0);
			if (!errno.equals("00000")) {
				errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
					migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
					return new ResponseEntity(finalResponse, HttpStatus.OK);
			}
			errList = inpbrh.validateBranchNum(branchno);
		    errno = errList.get(1);
		    branchno = errList.get(0);
			if (!errno.equals("00000")) {

				errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
					migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
					return new ResponseEntity(finalResponse, HttpStatus.OK);
			}

			cifno = reqbean.getCIFNumber();
			chkdRes = inpcif.validateCIFNumber(cifno);
			errno = chkdRes.get(1);
			if (!errno.equals("00000")) {
				if (errno.equals("6240")) {
					errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
					migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
					return new ResponseEntity(finalResponse, HttpStatus.OK);
				} else {
					chkderr = errno;
					validChkdFlag = "N";
				}
			} else {
				cifno = chkdRes.get(0);
				validChkdFlag = "Y";
			}
			
			lacctno = reqbean.getACCOUNTNumber();
			acctchkdRes = inpacc.validateAccountNum(lacctno);
			errno = acctchkdRes.get(1);
			if (!errno.equals("00000")) {
				if (errno.equals("0620")) {
					errDesc = error.getProperty(errno);
						finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
						migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
						return new ResponseEntity(finalResponse, HttpStatus.OK);
				} else {
					acctchkderr = errno;
					validacctChkdFlag = "N";
				}
			} else {
				lacctno = acctchkdRes.get(0);
				validacctChkdFlag = "Y";
			}

//change
//			String requestedNoOfRecords = reqbean.getRecordCount();
//			errList = inprcn.validateRecordCount(requestedNoOfRecords);
//			requestedNoOfRecords = errList.get(0);
//			int requestedRecordCount = Integer.parseInt(requestedNoOfRecords);
//		    errno = errList.get(1);
//			if (!errno.equals("00000")) {
//				errDesc = error.getProperty(errno);
//					finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
//					migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
//					return new ResponseEntity(finalResponse, HttpStatus.OK);
//			}
						
			if (accept != null && accept.contains("application/json")) {
				if (validChkdFlag.equals("Y")) {
					if(validacctChkdFlag.equals("Y")) {
						
						logger.info("VC------------------------Teller Branch Validation Started------------------------VC" + refno);
						ArrayList<Object> queryParamsTlr = new ArrayList<>();
						ArrayList<Object> queryParamsBrhm = new ArrayList<>();
						
						queryParamsTlr.add("003");
						formattedTeller = StringUtils.leftPad(tellerno, 16, "0");
						queryParamsTlr.add(formattedTeller);		
						
						formattedBranch = "003" + StringUtils.leftPad(branchno, 16, "0");
						queryParamsBrhm.add(formattedBranch);
						
						try {
							telm = dbProcess.fetchRepositories(null, "TELM", "TelmDetail", "findByTelmDetails", false,true, queryParamsTlr);
							brhm = dbProcess.fetchRepositories(null, "BRHM", "BrhmDetail", "findByBrhmDetails", false,true, queryParamsBrhm);
						} catch (Exception e1) {
							// TODO Auto-generated catch block
							logger.info("Exception Occured");
						}
						if(telm != null && !telm.isEmpty()) {
							sign_on_flag=telm.get(0).getSIGNON_FLAG();
							if( sign_on_flag.equals("Y")) {
								if(brhm != null && !brhm.isEmpty()) {
									logger.info(
								            "VC------------------------Teller&Branch Validated Sucessfully------------------------VC" + refno);        
								  	
									    logger.info(
												"VC------------------------Sysc check started------------------------VC" + refno);
		        							List<Sysc> syscRes = new ArrayList<Sysc>();
		        							syscRes = syscReponight.findBySyscDetail();
		        							if (syscRes.get(0).getSyscVariable().substring(10, 11).equals("N")) {
		        								dataSource = nightDataSource;
		        								lsRecArea = bancsTraceState.trim() + 'N'+ bancsHost.trim() + fnsSysnum.trim()
		        								+ ctrlSysnum.trim() + daySysnum.trim() + nightSysnum.trim() + non24hsum.trim() + 'N'
		        								+ formattedmasterDB1 + formattedmasterDB2 + servicesFlag.trim() + masterDB.trim() + INSPARAM_FLAG.trim() + INSPARAM_VALUE.trim();
		        								
		        								logger.info("+++++++++++Data Fetch from Night DB+++++++++++");
		        							}
		        							else {
		        								dataSource = dayDataSource;
		        								lsRecArea = bancsTraceState.trim() + 'D' + bancsHost.trim() + fnsSysnum.trim()
		        								+ ctrlSysnum.trim() + daySysnum.trim() + nightSysnum.trim() + non24hsum.trim() + 'D'
		        								+ formattedmasterDB1 + formattedmasterDB2 + servicesFlag.trim()+ masterDB.trim() + INSPARAM_FLAG.trim() + INSPARAM_VALUE.trim();
		        								logger.info("+++++++++++Data Fetch from Day DB+++++++++++");
		        							}
		        							logger.info(
		 											"VC------------------------Sysc check ended------------------------VC" + refno);
		        							 try(Connection connection = dataSource.getConnection())
		        							    {	
//		        								 change
//								    	res = balance.Balance_Enquiry_Child(cifno,requestedRecordCount, dataSource, lsRecArea, refno);
		 								res = balance.Balance_Enquiry_Child(cifno,dataSource, lsRecArea, refno);

								        out_response = res.get(0);
								        logger.info(refno + "VC------------------------Fetched NO_OF_RECORDS BALANCE----------------VC" + out_response);
								        noOfRecords = res.get(1);
								        errno = res.get(2);
								        logger.info(refno + "VC------------------------Fetched NO_OF_RECORDS BALANCE----------------VC" + noOfRecords);
								        logger.info(refno + "VC------------------------Fetched ERROR_NUMBER BALANCE----------------VC" + errno);								
		        							    }
		        							 catch(SQLException e)
		        							    {
		        							    	errno = "3293";
		        							    	errDesc = error.getProperty(errno);
		        									finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
		        									migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
		        									return new ResponseEntity(finalResponse, HttpStatus.OK);
		        							    }

								}
								else {
									logger.info("VC--------------INVALID BRANCH NUMBER--------------VC" + refno);
									errno = "0526";
									errDesc = error.getProperty(errno);
									finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
									migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
									return new ResponseEntity(finalResponse, HttpStatus.OK);
								}
							}
							else {
								logger.info("VC--------------USER NOT SIGNED ON--------------VC" + refno);
								errno = "0148";
								errDesc = error.getProperty(errno);
								finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
								migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
								return new ResponseEntity(finalResponse, HttpStatus.OK);
							}
						}
						else {
							logger.info("VC--------------INVALID TELLER NUMBER--------------VC" + refno);
							errno = "0529";
							errDesc = error.getProperty(errno);
							finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
							migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
							return new ResponseEntity(finalResponse, HttpStatus.OK);
						}								
					
					}
						else {
							try(Connection connection = dataSource.getConnection()) {							 
							errDesc = errdesc.getCbsErrDesc(acctchkderr, callcode, opt, lsRecArea, connection);
							} catch(SQLException e) {
								errno = "3293";
								errDesc = error.getProperty(errno);
									finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
									migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
									return new ResponseEntity(finalResponse, HttpStatus.OK);
					         }
							finalResponse = errobj.getErrorResponse(acctchkderr, errDesc, refno);
							migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, acctchkderr, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
							return new ResponseEntity(finalResponse, HttpStatus.OK);
						}
					
					}
					else {
						try(Connection connection = dataSource.getConnection()) {	
						errDesc = errdesc.getCbsErrDesc(chkderr, callcode, opt, lsRecArea, connection);
						} catch(SQLException e) {
							errno = "3293";
							errDesc = error.getProperty(errno);
								finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
								migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
								return new ResponseEntity(finalResponse, HttpStatus.OK);
				         }
						finalResponse = errobj.getErrorResponse(chkderr, errDesc, refno);
						migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, chkderr, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
						return new ResponseEntity(finalResponse, HttpStatus.OK);
					}				
			
				
			}
			else {
				errno = "0435";
				errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
				migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
				return new ResponseEntity(finalResponse, HttpStatus.OK);
			
			}
		}
			else {
				errno = "CB422";
				errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
					migDetails.saveToLogDB(Base64.getEncoder().encodeToString((" ".toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
					return new ResponseEntity(finalResponse, HttpStatus.OK);
			}  
	    }

	    else {
	    	errno = "CB422";
			errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
				migDetails.saveToLogDB(Base64.getEncoder().encodeToString((" ".toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
				return new ResponseEntity(finalResponse, HttpStatus.OK);
	    }
	    
	    //Response from service
	    if (errno.equals("0000")) {
			errno = "";
			finalResponse = responseObj.getResponse(res_file_path, out_response, refno, noOfRecords);
			migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "0", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "success" );
	    } else if(errno.equals("3293")) {
			errDesc = error.getProperty(errno);
				finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
				migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
				return new ResponseEntity(finalResponse, HttpStatus.OK);
		}
	    else {
			try(Connection connection = dataSource.getConnection()) {
			errDesc = errdesc.getCbsErrDesc(errno, callcode, opt, lsRecArea, connection);
			} catch(SQLException e) {
				errno = "3293";
				errDesc = error.getProperty(errno);
					finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
					migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
					return new ResponseEntity(finalResponse, HttpStatus.OK);
			}
			finalResponse = errobj.getErrorResponse(errno, errDesc, refno);
			migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, errno, errDesc, "1", Base64.getEncoder().encodeToString((finalResponse).getBytes()), "failure" );
		}
	} 
catch (Exception e) {
		migDetails.saveToLogDB(Base64.getEncoder().encodeToString((reqbeanstr.toString()).getBytes()), remoteAddress, tellerno, refno, sourceId, entryDate, IPAddress, " ", " ", "1", Base64.getEncoder().encodeToString((" ").getBytes()), "failure" );
		return new ResponseEntity(" ", HttpStatus.OK);
	}
		return new ResponseEntity(finalResponse, HttpStatus.OK);

	}
    
}
