import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Stack;

public class JavaCodeValidator {

    public static void main(String[] args) {
        File file = new File("Test.java"); // Replace with the actual file path

        try {
            String content = Files.readString(file.toPath());
            StringBuilder analysisResult = new StringBuilder();

            boolean isValid = validateJavaCode(content, analysisResult);

            if (isValid) {
                System.out.println("No issues detected in the file.");
            } else {
                System.out.println("Code Issues Detected:\n" + analysisResult);
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }

    private static boolean validateJavaCode(String content, StringBuilder analysisResult) {
        String[] lines = content.split("\n");
        Stack<Character> braceStack = new Stack<>();

        boolean isValid = true;
        int openIfCount = 0, closeIfCount = 0; // For if-else tracking

        for (int i = 0; i < lines.length; i++) {
            String line = lines[i].trim();

            // Check for unmatched braces
            for (char c : line.toCharArray()) {
                if (c == '{') {
                    braceStack.push(c);
                } else if (c == '}') {
                    if (braceStack.isEmpty()) {
                        analysisResult.append("Line ").append(i + 1).append(": Unmatched closing brace '}'.\n");
                        isValid = false;
                    } else {
                        braceStack.pop();
                    }
                }
            }

            // Check for missing semicolon
            if (isJavaStatement(line) && !line.endsWith(";")) {
                analysisResult.append("Line ").append(i + 1).append(": Missing semicolon.\n");
                isValid = false;
            }

            // Track if-else structure
            if (line.startsWith("if") && line.endsWith("{")) {
                openIfCount++;
            }
            if (line.startsWith("else") && line.endsWith("{")) {
                closeIfCount++;
            }

            // Check for try-catch block
            if (line.contains("try") && !line.contains("{")) {
                analysisResult.append("Line ").append(i + 1).append(": 'try' block should start with '{'.\n");
                isValid = false;
            }
            if (line.contains("catch") && !line.contains("{")) {
                analysisResult.append("Line ").append(i + 1).append(": 'catch' block should start with '{'.\n");
                isValid = false;
            }
        }

        // Final brace check
        if (!braceStack.isEmpty()) {
            analysisResult.append("Error: Unmatched opening braces '{' detected.\n");
            isValid = false;
        }

        // Final if-else check
        if (openIfCount != closeIfCount) {
            analysisResult.append("Error: Unmatched if-else blocks detected.\n");
            isValid = false;
        }

        return isValid;
    }

    private static boolean isJavaStatement(String line) {
        return line.matches(".*\\b(return|break|continue|throw|new|System\\.out\\.print).*") ||
               line.matches(".*=.*") || line.matches(".*\\+\\+.*") || line.matches(".*--.*");
    }
}













private static boolean validateJavaCode(String content, StringBuilder analysisResult) {
    String[] lines = content.split("\n");
    Stack<Character> braceStack = new Stack<>();

    boolean isValid = true;

    for (int i = 0; i < lines.length; i++) {
        String line = lines[i].trim();

        // Check for unmatched braces
        for (char c : line.toCharArray()) {
            if (c == '{') {
                braceStack.push(c);
            } else if (c == '}') {
                if (braceStack.isEmpty()) {
                    analysisResult.append("Line ").append(i + 1).append(": Unmatched closing brace '}'.\n");
                    isValid = false;
                } else {
                    braceStack.pop();
                }
            }
        }

        // Check for missing semicolon if the line ends with a Java statement
        if (isJavaStatement(line) && !line.endsWith(";")) {
            analysisResult.append("Line ").append(i + 1).append(": Missing semicolon.\n");
            isValid = false;
        }
    }

    // Check if all braces were matched
    if (!braceStack.isEmpty()) {
        analysisResult.append("Error: Unmatched opening braces '{' detected.\n");
        isValid = false;
    }

    return isValid;
}

private static boolean isJavaStatement(String line) {
    // Check if the line looks like a Java statement (ends with common Java syntax patterns)
    return line.matches(".*\\b(return|break|continue|throw|new|System\\.out\\.print).*") ||
           line.matches(".*=.*") || line.matches(".*\\+\\+.*") || line.matches(".*--.*");
}







private static boolean validateJavaCode(String content, StringBuilder analysisResult) {
    String[] lines = content.split("\n");
    Stack<Character> braceStack = new Stack<>();

    boolean isValid = true;

    for (int i = 0; i < lines.length; i++) {
        String line = lines[i].trim();

        // Check for invalid characters (non-ASCII or unexpected symbols)
        if (containsInvalidCharacters(line)) {
            analysisResult.append("Line ").append(i + 1).append(": Contains invalid characters.\n");
            isValid = false;
        }

        // Check for unmatched braces
        for (char c : line.toCharArray()) {
            if (c == '{') {
                braceStack.push(c);
            } else if (c == '}') {
                if (braceStack.isEmpty()) {
                    analysisResult.append("Line ").append(i + 1).append(": Unmatched closing brace '}'.\n");
                    isValid = false;
                } else {
                    braceStack.pop();
                }
            }
        }

        // Check for missing semicolon if the line ends with a Java statement
        if (isJavaStatement(line) && !line.endsWith(";")) {
            analysisResult.append("Line ").append(i + 1).append(": Missing semicolon.\n");
            isValid = false;
        }
    }

    // Check if all braces were matched
    if (!braceStack.isEmpty()) {
        analysisResult.append("Error: Unmatched opening braces '{' detected.\n");
        isValid = false;
    }

    return isValid;
}

private static boolean containsInvalidCharacters(String line) {
    // Allow common characters in Java code
    for (char c : line.toCharArray()) {
        if (!(Character.isLetterOrDigit(c) || Character.isWhitespace(c) || "{}();:\"'[].,+-/*<>!?&|=".indexOf(c) >= 0)) {
            return true; // Invalid character detected
        }
    }
    return false;
}

private static boolean isJavaStatement(String line) {
    // Check if the line looks like a Java statement (ends with common Java syntax patterns)
    return line.matches(".*\\b(return|break|continue|throw|new|System\\.out\\.print).*") ||
           line.matches(".*=.*") || line.matches(".*\\+\\+.*") || line.matches(".*--.*");
}





import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Stack;
import java.util.regex.Pattern;

public class JavaCodeAnalyzer {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(JavaCodeAnalyzer::createAndShowGUI);
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Java Code Analyzer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultArea);

        JButton openFileButton = new JButton("Open Java File");
        openFileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("Java Files", "java"));
            int returnValue = fileChooser.showOpenDialog(frame);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    String analysisResult = analyzeJavaFile(selectedFile);
                    resultArea.setText(analysisResult);
                } catch (IOException ex) {
                    resultArea.setText("Error reading file: " + ex.getMessage());
                }
            }
        });

        frame.add(openFileButton, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.setVisible(true);
    }

    private static String analyzeJavaFile(File file) throws IOException {
        StringBuilder analysisResult = new StringBuilder();

        // Read the file content
        String content = new String(Files.readAllBytes(file.toPath()));

        // Validate for special characters and unmatched braces
        analysisResult.append("Preliminary Validation:\n");
        if (!validateJavaCode(content, analysisResult)) {
            return analysisResult.toString();
        }

        // Parse the Java code using JavaParser
        analysisResult.append("\nJavaParser Analysis:\n");
        CompilationUnit compilationUnit = parseJavaCode(content);
        if (compilationUnit == null) {
            analysisResult.append("Failed to parse the Java code due to syntax errors.\n");
        } else {
            analysisResult.append("No syntax errors detected. File parsed successfully.\n");
        }

        return analysisResult.toString();
    }

    private static boolean validateJavaCode(String content, StringBuilder analysisResult) {
        String[] lines = content.split("\n");
        Stack<Character> braceStack = new Stack<>();
        Pattern allowedPattern = Pattern.compile("[a-zA-Z0-9_{}();:.\"'\\<>!@#$%^&*+=|?\\-\\s/\\\*");

        boolean isValid = true;

        for (int i = 0; i < lines.length; i++) {
            String line = lines[i].trim();

            // Check for special characters
            if (!allowedPattern.matcher(line).matches()) {
                analysisResult.append("Line ").append(i + 1).append(": Contains invalid characters.\n");
                isValid = false;
            }

            // Check for unmatched braces
            for (char c : line.toCharArray()) {
                if (c == '{') {
                    braceStack.push(c);
                } else if (c == '}') {
                    if (braceStack.isEmpty()) {
                        analysisResult.append("Line ").append(i + 1).append(": Unmatched closing brace '}'.\n");
                        isValid = false;
                    } else {
                        braceStack.pop();
                    }
                }
            }
        }

        // Check if all braces were matched
        if (!braceStack.isEmpty()) {
            analysisResult.append("Error: Unmatched opening braces '{' detected.\n");
            isValid = false;
        }

        return isValid;
    }

    private static CompilationUnit parseJavaCode(String code) {
        try {
            return new JavaParser().parse(code).getResult().orElse(null);
        } catch (Exception e) {
            return null;
        }
    }
}