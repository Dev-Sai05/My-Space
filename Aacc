package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMCUCC;
import com.tcs.bancs.microservices.jvm.balenq.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsInputCustNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsOutputAccountNumbers;


public class AccountEnqService_Child {
	Logger logger = LoggerFactory.getLogger(AccountEnqService_Child.class);

	JVMCUCC jvmcucc = new JVMCUCC();

	public List<String> AccountEnqService_Child(String cifno, int requestedNumberOfRecords) throws InterruptedException, ExecutionException {

		logger.info("VC------------------------ACCOUNT NUMBERS Child Service Started------------------------VC");

        String lacctno = cifno == null ? "00000000000000000" : String.format("%017d", new BigInteger(cifno));

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;

        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();

        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        int fetchedRecordsCount = 0;

        StringBuilder allRecordsBuilder = new StringBuilder();

        while (fetchedRecordsCount < numberOfRecordsToFetch) {
            final String currentLacctno = lacctno;

            CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
            

                LsInputCustNumber input1 = new LsInputCustNumber();
                LsOutputAccountNumbers output1 = new LsOutputAccountNumbers();
                LsErrorNumber output2 = new LsErrorNumber();
                 
                input1.setLsInputCustNumber(currentLacctno);
                
                jvmcucc.JVMCUCC(input1,output2,output1);

                ResponseData responseData = new ResponseData();
                responseData.outResponse = output1.getLsOutputAccountNumbers();
                responseData.errno = output2.getLsErrorNumber();
                
                return responseData;
            }, customThreadPool);

            futures.add(future);
            
            ResponseData lastResult = futures.get(futures.size() - 1).get();
           
            lacctno = lastResult.lacctno;

            String outResponse = lastResult.outResponse;
            int startIndex = 0;
            int endIndex = 0;

            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
                logger.error("No outResponse from JVMCUCC. Terminating process.");
                 break;
             }
            
            while (startIndex + 16 <= outResponse.length()) {
                endIndex = startIndex + 16;
                allRecordsBuilder.append(outResponse.substring(startIndex, endIndex));
                startIndex = endIndex;
                fetchedRecordsCount++;
            }
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(futures.get(futures.size() - 1).get().errno); 

        logger.info("VC------------------------ACCOUNT NUMBERS Child Service Ended------------------------VC");

        customThreadPool.shutdown();         
        String res1,res2;
        String res3="";
        res1= res.get(0).trim();
        for(int i=0;i<res1.length();i+=16) {
        	res2 =  res.get(0).substring(i,i+16);
        	if(!(res2.matches("0+"))) {
        		res3 = res3 + res2;
        	}
        }
        res.add(0,res3);
        res.remove(1);
        return res;
        
    }

    private class ResponseData {
        String outResponse;
        String errno;
        String lacctno;
    }
}
