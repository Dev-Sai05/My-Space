//           SBI Core Banking Project, Hyderabad, India.          *
//*****************************************************************
//                                                                *
//  	           PROGRAM - IGVCDetailsRepositoryImpl.Java                 
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
//Niharika Tammana : 14/09/2024    : 24090001  :  MICROSERVICES   *
//Naga Sai Ganesh  : 14/09/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*

package com.tcs.bancs.microservices.impl;

import java.io.IOException;
import java.sql.Clob;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Optional;

import javax.sql.rowset.serial.SerialException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import com.tcs.bancs.microservices.db.model.IGVC01;
import com.tcs.bancs.microservices.db.model.IGVC02;
import com.tcs.bancs.microservices.db.model.IGVCenqpk_t1;
import com.tcs.bancs.microservices.db.model.IGVCenqpk_t2;
import com.tcs.bancs.microservices.exception.RrnException;
import com.tcs.bancs.microservices.exception.SrcException;

import com.tcs.bancs.microservices.repository.ref.IGVC01DetailRefRepo;
import com.tcs.bancs.microservices.repository.ref.IGVC02DetailRefRepo;

@Service
public class IGVCDetailsRepositoryImpl {

	private final IGVC01DetailRefRepo dayRepo1;
	private final IGVC02DetailRefRepo dayRepo2;

	public IGVCDetailsRepositoryImpl(IGVC01DetailRefRepo dayRepo1, IGVC02DetailRefRepo dayRepo2) {
		super();
		this.dayRepo1 = dayRepo1;
		this.dayRepo2 = dayRepo2;
	}

	Logger logger = LoggerFactory.getLogger(IGVCDetailsRepositoryImpl.class);

	public String saveInitialRequest(String REQ_STR, String CLIENT_IP, String TELLER_ID, String REQ_REF_NO,
			String SERVICE_ID, String RECD_TIME, String IP_ADDRESS, String ERROR_CODE, String ERROR_DESCRIPTION)
			throws SerialException, SQLException, IOException, RrnException, SrcException {

		DateTimeFormatter entryDate = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:SSS");
		DateTimeFormatter entryDate1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
		LocalDateTime time = LocalDateTime.now();
		LocalDate date = LocalDate.now();

		int dayCount = date.getDayOfMonth();
		int Logsaver = dayCount % 2;
		String implerr = new String();
		
		if (REQ_REF_NO == null || REQ_REF_NO.length() >= 26 || REQ_REF_NO.isEmpty()) {
			REQ_REF_NO = " ";
		}
		if (SERVICE_ID == null || SERVICE_ID.length() > 10 || SERVICE_ID.isEmpty()) {
			SERVICE_ID = " ";
		}
		if (ERROR_CODE == null || ERROR_CODE.isEmpty()) {
			ERROR_CODE = " ";
		}
		if (ERROR_DESCRIPTION == null || ERROR_DESCRIPTION.isEmpty()) {
			ERROR_DESCRIPTION = " ";
		}

		if (REQ_REF_NO == null) {
			throw new RrnException();
		} else if (SERVICE_ID == null) {
			throw new SrcException();
		}
		try {
		if (Logsaver == 1) {

			IGVC01 igvc = new IGVC01();
			IGVCenqpk_t1 pk = new IGVCenqpk_t1();
			
			pk.setREQ_REF_NO(REQ_REF_NO);
			igvc.setSERVICE_ID(SERVICE_ID);
			if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
				igvc.setCLIENT_IP(" ");
			} else {
				igvc.setCLIENT_IP(IP_ADDRESS);
			}
			if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
				igvc.setTELLER_ID(" ");
			} else if (TELLER_ID.length() > 10) {
				igvc.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
			} else {
				igvc.setTELLER_ID(TELLER_ID);
			}

			igvc.setENTRY_DATE(entryDate1.format(time));
			igvc.setSERVICE_NAME("PFMOBEnquiry_Service");
			igvc.setREQ_STR(REQ_STR);
			igvc.setRESPONSE_STATUS(" ");
			igvc.setERROR_CODE(ERROR_CODE);
			igvc.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
			igvc.setREF_NO(REQ_REF_NO);
			igvc.setREQ_STR(REQ_STR);
			igvc.setRESP_STR(" ");
			pk.setRECD_TIME(RECD_TIME);
			igvc.setRESP_TIME(entryDate.format(time));
			Clob clob = new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
			igvc.setRESPONSE_STRING(clob);
			igvc.setIgvcpk(pk);
			dayRepo1.save(igvc);

		} else if (Logsaver == 0) {

			IGVC02 igvc2 = new IGVC02();
			IGVCenqpk_t2 pk2 = new IGVCenqpk_t2();

			pk2.setREQ_REF_NO(REQ_REF_NO);
			igvc2.setSERVICE_ID(SERVICE_ID);
			if (IP_ADDRESS == null || IP_ADDRESS.isEmpty() || IP_ADDRESS.length() > 20) {
				igvc2.setCLIENT_IP(" ");
			} else {
				igvc2.setCLIENT_IP(IP_ADDRESS);
			}
			if (TELLER_ID == null || TELLER_ID.isEmpty() || TELLER_ID.length() < 1 || TELLER_ID.matches(" ")) {
				igvc2.setTELLER_ID(" ");
			} else if (TELLER_ID.length() > 10) {
				igvc2.setTELLER_ID(TELLER_ID.substring(TELLER_ID.length() - 10, TELLER_ID.length()));
			} else {
				igvc2.setTELLER_ID(TELLER_ID);
			}

			igvc2.setENTRY_DATE(entryDate1.format(time));
			igvc2.setSERVICE_NAME("PFMOBEnquiry_Service");
			igvc2.setRESPONSE_STATUS(" ");
			igvc2.setERROR_CODE(ERROR_CODE);
			igvc2.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
			igvc2.setREQ_STR(REQ_STR);
			igvc2.setREF_NO(REQ_REF_NO);
			igvc2.setRESP_STR(" ");
			pk2.setRECD_TIME(RECD_TIME);
			igvc2.setRESP_TIME(entryDate.format(time));
			Clob clob = new javax.sql.rowset.serial.SerialClob(" ".toCharArray());
			igvc2.setRESPONSE_STRING(clob);
			igvc2.setIgvcpk(pk2);
			dayRepo2.save(igvc2);
		}
		} catch (DataIntegrityViolationException dive) {
			logger.error("Duplicate Reference Number(PK)");
			implerr = "VC012";
			return implerr;
		}
		logger.info("VC------------------LOG DB Initial save done------------------VC");
		return implerr;
	}

	public void updateResponse(String RESPONSE_STATUS, String ERROR_CODE, String ERROR_DESCRIPTION,
			String RESPONSE_STRING, String REF_NO, String RECD_TIME) throws SerialException, SQLException {

		Clob clob = new javax.sql.rowset.serial.SerialClob(RESPONSE_STRING.toCharArray());
		LocalDate date = LocalDate.now();
		int dayCount = date.getDayOfMonth();
		int Logsaver = dayCount % 2;

		if (Logsaver == 1) {
			IGVCenqpk_t1 pk = new IGVCenqpk_t1();
			pk.setREQ_REF_NO(REF_NO);
			pk.setRECD_TIME(RECD_TIME);
			Optional<IGVC01> igvccheck = dayRepo1.findById(pk);
 		   if(!igvccheck.isPresent())
 		   {
 			   logger.error("No rows updated due to incorrect pk");
 		   }
 		   try {
 			   IGVC01 igvcexist = igvccheck.get();
 			 igvcexist.setERROR_CODE(ERROR_CODE);
 			 igvcexist.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
 			 igvcexist.setRESPONSE_STRING(clob);
 			 igvcexist.setRESPONSE_STATUS(RESPONSE_STATUS);
 			 dayRepo1.save(igvcexist);
 			   logger.info("Row updated");
 		   }
 		   catch(Exception e) {
 			   logger.error("No rows updated due to exception");
 		   }	
		} else if (Logsaver == 0) {
			IGVCenqpk_t2 pk2 = new IGVCenqpk_t2();
			pk2.setREQ_REF_NO(REF_NO);
			pk2.setRECD_TIME(RECD_TIME);
			Optional<IGVC02> igvc2check = dayRepo2.findById(pk2);
	 		   if(!igvc2check.isPresent())
	 		   {
	 			   logger.error("No rows updated due to incorrect pk");
	 		   }
	 		   try {
	 			   IGVC02 igvc2exist = igvc2check.get();
	 			igvc2exist.setERROR_CODE(ERROR_CODE);
	 			igvc2exist.setERROR_DESCRIPTION(ERROR_DESCRIPTION);
	 			igvc2exist.setRESPONSE_STRING(clob);
	 			igvc2exist.setRESPONSE_STATUS(RESPONSE_STATUS);
	 			dayRepo2.save(igvc2exist);
	 			   logger.info("Rows updated");
	 		   }
	 		   catch(Exception e) {
	 			   logger.error("No rows updated due to exception");
	 		   }
		}
		logger.info("VC------------------LOG DB Updated------------------VC");
	}

}
