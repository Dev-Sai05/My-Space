package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMENQ;
//import com.tcs.bancs.microservices.Available_Balance.LsInpAccountNumber;
//import com.tcs.bancs.microservices.Available_Balance.LsOutputErrorNumber;
//import com.tcs.bancs.microservices.Available_Balance.LsOutputResponse;
import com.tcs.bancs.microservices.jvm.balenq.JVMENQ.LsInpAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMENQ.LsOutputResponse;
import com.tcs.bancs.microservices.jvm.balenq.JVMENQ.LsOutputErrorNumber;


public class Ava_balance_child {
	Logger logger = LoggerFactory.getLogger(Ava_balance_child.class);

	JVMENQ jvmenq = new JVMENQ();

	public List<String> Ava_balance_child1(String branchno, String tellerno, String accno, int requestedNumberOfRecords) throws InterruptedException, ExecutionException {

		logger.info("VC------------------------AVALABLE BALANCE Child Service Started------------------------VC");

        String lacctno = accno == null ? "00000000000000000" : String.format("%017d", new BigInteger(accno));

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 60;

        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();

        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        int fetchedRecordsCount = 0;

        StringBuilder allRecordsBuilder = new StringBuilder();

        while (fetchedRecordsCount < numberOfRecordsToFetch) {
            final String currentLacctno = lacctno;

            CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
            
            	LsInpAccountNumber input1 = new LsInpAccountNumber();

            	LsOutputErrorNumber output2 = new LsOutputErrorNumber();
            	LsOutputResponse output1 = new LsOutputResponse();

                input1.setLsInpAccountNumber(currentLacctno);
                System.setProperty("com.microfocus.sql.allownullchar", "true");
                jvmenq.JVMENQ(input1, output2, output1);

                ResponseData responseData = new ResponseData();
                responseData.outResponse = output1.getLsOutputResponse();
//                responseData.outResponse=responseData.outResponse.substring(0,19);
//                System.out.println("Account Number :"+accno+"   "+ "Balance :"+ responseData.outResponse);
                responseData.errno = output2.getLsOutputErrorNumber();
                logger.info(responseData.errno);
                return responseData;
            }, customThreadPool);

            futures.add(future);
            
            ResponseData lastResult = futures.get(futures.size() - 1).get();

//            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
//               logger.error("No outResponse from JVMABE. Terminating process.");
//              
//                break;
//            }
           
            lacctno = lastResult.lacctno;

            String outResponse = lastResult.outResponse;
            int startIndex = 0;
            int endIndex = 0;

            while (startIndex + 88 <= outResponse.length() && fetchedRecordsCount < numberOfRecordsToFetch) {
                endIndex = startIndex + 88;
                allRecordsBuilder.append(outResponse.substring(startIndex, endIndex));
                startIndex = endIndex;
                fetchedRecordsCount++;
            }
            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
                logger.error("No outResponse from JVMENQ. Terminating process.");
               
                 break;
             }
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(futures.get(futures.size() - 1).get().errno); 

        logger.info("VC------------------------AVAILABLE BALANCE Child Service Ended------------------------VC");

        customThreadPool.shutdown(); 
        logger.info("cccccccccccccccc"+res);
        
        
        
        return res;
        
        
        
    }

    private class ResponseData {
        String outResponse;
        String errno;
        String lacctno;
    }
}




package com.tcs.bancs.microservices.services;

import com.tcs.bancs.microservices.jvm.balenq.JVMENQ;
import com.tcs.bancs.microservices.jvm.balenq.JVMENQ.LsInpAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMENQ.LsOutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMENQ.LsOutputResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestJVMENQ {
    private static final Logger logger = LoggerFactory.getLogger(TestJVMENQ.class);

    public static void main(String[] args) {
        logger.info("Starting Test for JVMENQ...");

        // Create an instance of JVMENQ
        JVMENQ jvmenq = new JVMENQ();

        // Prepare hard-coded input
        String hardcodedAccountNumber = "12345678901234567"; // Example account number
        LsInpAccountNumber input1 = new LsInpAccountNumber();
        LsOutputErrorNumber output2 = new LsOutputErrorNumber();
        LsOutputResponse output1 = new LsOutputResponse();

        // Set the input account number
        input1.setLsInpAccountNumber(hardcodedAccountNumber);

        // Enable null character allowance
        System.setProperty("com.microfocus.sql.allownullchar", "true");

        // Call JVMENQ with the inputs and outputs
        logger.info("Sending hard-coded input to JVMENQ...");
        jvmenq.JVMENQ(input1, output2, output1);

        // Log and display the results
        String response = output1.getLsOutputResponse();
        String errorNumber = output2.getLsOutputErrorNumber();

        logger.info("JVMENQ Output Response: {}", response);
        logger.info("JVMENQ Output Error Number: {}", errorNumber);

        System.out.println("Output Response: " + response);
        System.out.println("Error Number: " + errorNumber);

        logger.info("Test for JVMENQ completed.");
    }
}
