import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseResult;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.IfStmt;
import com.github.javaparser.ast.stmt.TryStmt;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Stack;

public class JavaCodeAnalyzer {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(JavaCodeAnalyzer::createAndShowGUI);
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Java Code Analyzer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultArea);

        JButton openFileButton = new JButton("Open Java File");
        openFileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("Java Files", "java"));
            int returnValue = fileChooser.showOpenDialog(frame);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    String analysisResult = analyzeJavaFile(selectedFile);
                    resultArea.setText(analysisResult);
                } catch (FileNotFoundException ex) {
                    resultArea.setText("Error: File not found!");
                }
            }
        });

        frame.add(openFileButton, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }

    private static String analyzeJavaFile(File file) throws FileNotFoundException {
        StringBuilder analysisResult = new StringBuilder();
        JavaParser parser = new JavaParser();

        ParseResult<CompilationUnit> parseResult = parser.parse(file);

        if (parseResult.isSuccessful() && parseResult.getResult().isPresent()) {
            CompilationUnit compilationUnit = parseResult.getResult().get();

            // Brace, Control Flow, Catch Block, and Null Assignment Validation
            analysisResult.append("Code Analysis:\n");
            new CodeChecker().visit(compilationUnit, analysisResult);

        } else {
            analysisResult.append("Error: Unable to parse the file.\n");
        }

        return analysisResult.toString();
    }

    private static class CodeChecker extends VoidVisitorAdapter<StringBuilder> {
        private final Stack<Integer> braceStack = new Stack<>();

        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            BlockStmt body = md.getBody().orElse(null);
            if (body != null) {
                // Check each statement for braces, control flow, catch block, and null assignment
                body.getStatements().forEach(statement -> {
                    String statementStr = statement.toString();
                    if (statementStr.contains("{")) {
                        braceStack.push(statement.getBegin().map(pos -> pos.line).orElse(-1));
                    }
                    if (statementStr.contains("}")) {
                        if (!braceStack.isEmpty()) {
                            braceStack.pop();
                        } else {
                            int line = statement.getEnd().map(pos -> pos.line).orElse(-1);
                            result.append("Unmatched closing brace at line: ").append(line).append("\n");
                        }
                    }

                    // Check for if/else structures
                    if (statement instanceof IfStmt) {
                        IfStmt ifStmt = (IfStmt) statement;
                        if (!ifStmt.getElseStmt().isPresent()) {
                            int line = statement.getBegin().map(pos -> pos.line).orElse(-1);
                            result.append("If statement at line ").append(line)
                                    .append(" has no corresponding else statement.\n");
                        }
                    }

                    // Check for try/catch blocks and verify catch block implementation
                    if (statement instanceof TryStmt) {
                        TryStmt tryStmt = (TryStmt) statement;
                        if (tryStmt.getCatchClauses().isEmpty()) {
                            int line = statement.getBegin().map(pos -> pos.line).orElse(-1);
                            result.append("Try block at line ").append(line)
                                    .append(" has no catch block.\n");
                        }
                    }

                    // Check for null assignments (null value being assigned to variables)
                    if (statementStr.contains(" = null")) {
                        int line = statement.getBegin().map(pos -> pos.line).orElse(-1);
                        result.append("Null value assignment at line ").append(line).append("\n");
                    }
                });

                // Check if there are unmatched opening braces
                if (!braceStack.isEmpty()) {
                    int unmatchedLine = braceStack.peek();
                    result.append("Unmatched opening brace at line: ").append(unmatchedLine).append("\n");
                }
            }
        }
    }
}