package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMCUCC;
import com.tcs.bancs.microservices.jvm.balenq.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsInputCustNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsOutputAccountNumbers;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;

public class AccountEnqService_Child {
    private static final Logger logger = LoggerFactory.getLogger(AccountEnqService_Child.class);
    private final JVMCUCC jvmcucc = new JVMCUCC();

    /**
     * Fetch account numbers based on CIF number, record count, and target account number.
     *
     * @param cifno         CIF number (customer ID).
     * @param recordCount   Number of records to fetch below the target account number.
     * @param accountNumber Target account number to find in the output.
     * @return List of account numbers based on the conditions.
     */
    public List<String> fetchAccountNumbers(String cifno, Integer recordCount, String accountNumber) throws InterruptedException, ExecutionException {
        logger.info("VC------------------ACCOUNT NUMBERS Child Service Started------------------VC");

        // Default record count to 30 if not provided
        int numberOfRecordsToFetch = (recordCount == null || recordCount <= 0) ? 30 : recordCount;

        // Validate and format CIF number
        String lacctno = (cifno == null || cifno.isEmpty()) ? "00000000000000000" : String.format("%017d", new BigInteger(cifno));

        // Prepare input and output objects
        LsInputCustNumber input = new LsInputCustNumber();
        LsOutputAccountNumbers output = new LsOutputAccountNumbers();
        LsErrorNumber error = new LsErrorNumber();

        input.setLsInputCustNumber(lacctno);

        // Call JVMCUCC to fetch account numbers
        jvmcucc.JVMCUCC(input, error, output);

        // Extract and validate the output
        String outResponse = output.getLsOutputAccountNumbers();
        if (outResponse == null || outResponse.trim().isEmpty()) {
            logger.error("No valid response from JVMCUCC.");
            return new ArrayList<>();
        }

        // Split the response into 16-character chunks
        List<String> allAccountNumbers = new ArrayList<>();
        outResponse = outResponse.trim();

        for (int i = 0; i + 16 <= outResponse.length(); i += 16) {
            String account = outResponse.substring(i, i + 16).trim();
            if (!account.matches("0+")) { // Exclude records with only zeros
                allAccountNumbers.add(account);
            }
        }

        // If accountNumber is provided, find it and fetch records below it
        List<String> resultAccounts = new ArrayList<>();
        if (accountNumber != null && !accountNumber.isEmpty()) {
            int index = allAccountNumbers.indexOf(accountNumber);
            if (index != -1) {
                int endIndex = Math.min(index + numberOfRecordsToFetch + 1, allAccountNumbers.size());
                logger.info("Target account number found. Fetching records below it.");
                resultAccounts = allAccountNumbers.subList(index + 1, endIndex);
                
                // Now, for each account in resultAccounts, fetch the balance
                for (String account : resultAccounts) {
                    logger.info("Fetching balance for account: {}", account);
                    // Call BalanceEnqService_Child for each account to get balance
                    fetchBalanceForAccount(account, numberOfRecordsToFetch);
                }
            } else {
                logger.warn("Target account number not found in the output.");
            }
        } else {
            // If no accountNumber is provided, return the requested number of records from the start
            logger.info("No target account number provided. Returning top records.");
            resultAccounts = allAccountNumbers.subList(0, Math.min(numberOfRecordsToFetch, allAccountNumbers.size()));
            
            // Now, for each account in resultAccounts, fetch the balance
            for (String account : resultAccounts) {
                logger.info("Fetching balance for account: {}", account);
                // Call BalanceEnqService_Child for each account to get balance
                fetchBalanceForAccount(account, numberOfRecordsToFetch);
            }
        }

        return resultAccounts;
    }

    /**
     * Fetch balance details for a specific account.
     *
     * @param accno         Account number.
     * @param requestedNumberOfRecords Number of records to fetch for balance enquiry.
     */
    private void fetchBalanceForAccount(String accno, int requestedNumberOfRecords) {
        String lacctno = accno == null ? "0000000000000000" : String.format("%016d", new BigInteger(accno));

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;

        // Create a new thread pool for parallel processing (if needed)
        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        CompletableFuture.supplyAsync(() -> {
            // Set up inputs and outputs for the balance enquiry
            Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
            Ls400InpEnqType input2 = new Ls400InpEnqType();
            Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
            Ls400OutputResponse output2 = new Ls400OutputResponse();

            input1.setLs400InputAccountNumber(lacctno);
            input2.setLs400InpEnqType("1");

            // Call the Balance Enquiry Service
            new JVMAVBL().JVMAVBL(input1, input2, output1, output2);

            // Handle the response
            String outResponse = output2.getLs400OutputResponse();
            outResponse = outResponse != null ? outResponse.trim() : "";

            if (outResponse.isEmpty()) {
                logger.error("No response for balance enquiry for account {}", lacctno);
            } else {
                logger.info("Balance for account {}: {}", lacctno, outResponse);
            }
            return outResponse;
        }, customThreadPool)
        .thenAccept(balance -> {
            // Log the balance or handle any post-processing
            logger.info("Fetched balance for account {}: {}", lacctno, balance);
        });

        customThreadPool.shutdown();
    }
}