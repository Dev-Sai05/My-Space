package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.*;

import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;

@RestController
public class BalanceEnqService_Child {

    @Autowired
    InvmDetailDayRepo invmRepo;

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    // Thread-local RunUnit and COBOL program instance
    private static final ThreadLocal<RunUnit> runUnitThreadLocal = ThreadLocal.withInitial(() -> {
        RunUnit runUnit = new RunUnit();
        runUnit.Add(new JVMAVBL());
        return runUnit;
    });

    public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords,
                                              String lacctno1, DataSource datasource, String inpcommonarea,
                                              String refno) throws Exception {

        MDC.put("refno", refno);
        logger.info("VC--- Balance_Enquiry_Child started ---");

        String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" :
                String.format("%016d", new BigInteger(lacctno1));
        String errno = "";
        String outResponse = "";
        String recordcount = String.format("%03d", requestedNumberOfRecords);

        // Flatten nested account list
        List<String> flatAccounts = new ArrayList<>();
        for (List<String> list : accountNumbers) {
            for (String acc : list) {
                flatAccounts.add(String.format("%016d", new BigInteger(acc)));
            }
        }

        // Apply lacctno filter
        if (!lacctno.equals("0000000000000000")) {
            int index = flatAccounts.indexOf(lacctno);
            if (index != -1 && index + 1 < flatAccounts.size()) {
                flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
                logger.info("Target account number found. Processing records below it");
            } else {
                logger.info("Target account number not found in the list.");
                MDC.clear();
                return List.of("", "0", "0108"); // Account not found
            }
        }

        // Concatenate formatted accounts
        StringBuilder accNumbersBuilder = new StringBuilder(flatAccounts.size() * 16);
        for (String acc : flatAccounts) {
            accNumbersBuilder.append(acc); // Already 16-digit formatted
        }

        // COBOL input/output structure setup
        WaArrayAccount input1 = new WaArrayAccount();
        Ls400InpEnqType input2 = new Ls400InpEnqType();
        WaInputCount input3 = new WaInputCount();
        Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
        Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
        JvmArrayOutputOut output3 = new JvmArrayOutputOut();
        LsRecordArea inputrec = new LsRecordArea();

        input1.setWaArrayAccount(accNumbersBuilder.toString());
        input2.setLs400InpEnqType("1");
        input3.setWaInputCount(recordcount);
        inputrec.setLsRecordArea(inpcommonarea);

        int fetchedRecordsCount = 0;

        try (Connection connection = datasource.getConnection()) {
            RunUnit runUnit = runUnitThreadLocal.get();

            runUnit.Call("JVMAVBL",
                    input1.get_Reference(),
                    input3.get_Reference(),
                    input2.get_Reference(),
                    output1.get_Reference(),
                    output2.get_Reference(),
                    output3.get_Reference(),
                    inputrec.get_Reference(),
                    connection);

            errno = output1.getLs400OutputErrorNumber();
            outResponse = output3.getJvmArrayOutputOut();

            logger.info("OUTResponse: {}", outResponse);

            if ("0000".equals(errno)) {
                if (outResponse != null && !outResponse.isBlank()) {
                    fetchedRecordsCount++;
                }
            } else if ("155".equals(errno) || "0155".equals(errno)) {
                errno = "0155";
            } else {
                errno = "0000"; // Ignored error
                logger.info("RECORD NOT FOUND IN INVM");
            }

        } catch (SQLException e) {
            logger.error("SQL Exception: {}", e.getMessage(), e);
            errno = "3293";
        }

        if (fetchedRecordsCount == 0) {
            errno = "0188";
        }

        List<String> res = new ArrayList<>();
        res.add(outResponse);
        res.add(String.valueOf(requestedNumberOfRecords));
        res.add(errno);

        logger.info("VC--- Balance_Enquiry_Child ended ---");
        MDC.clear();

        return res;
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}

-------- batch

package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.*;
import java.util.stream.Collectors;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.*;

import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;

@RestController
public class BalanceEnqService_Child {

    @Autowired
    InvmDetailDayRepo invmRepo;

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    private static final int BATCH_SIZE = 50; // Tune this based on COBOL capacity
    private static final int THREAD_POOL_SIZE = 4;

    private final ExecutorService executor = Executors.newFixedThreadPool(THREAD_POOL_SIZE);

    public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords,
                                              String lacctno1, DataSource datasource, String inpcommonarea,
                                              String refno) throws Exception {

        MDC.put("refno", refno);
        logger.info("VC--- Balance_Enquiry_Child started ---");

        String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" :
                String.format("%016d", new BigInteger(lacctno1));

        // Flatten account list and format to 16-digit
        List<String> flatAccounts = accountNumbers.stream()
                .flatMap(List::stream)
                .map(acc -> String.format("%016d", new BigInteger(acc)))
                .collect(Collectors.toList());

        // Apply lacctno filter
        if (!"0000000000000000".equals(lacctno)) {
            int index = flatAccounts.indexOf(lacctno);
            if (index != -1 && index + 1 < flatAccounts.size()) {
                flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
                logger.info("Target account number found. Processing records below it");
            } else {
                logger.info("Target account number not found in the list.");
                MDC.clear();
                return List.of("", "0", "0108");
            }
        }

        // Partition account list into batches
        List<List<String>> batches = new ArrayList<>();
        for (int i = 0; i < flatAccounts.size(); i += BATCH_SIZE) {
            int end = Math.min(flatAccounts.size(), i + BATCH_SIZE);
            batches.add(flatAccounts.subList(i, end));
        }

        List<CompletableFuture<List<String>>> futures = new ArrayList<>();
        for (List<String> batch : batches) {
            futures.add(CompletableFuture.supplyAsync(() -> callCobolForBatch(batch, datasource, inpcommonarea), executor));
        }

        List<String> allResponses = new ArrayList<>();
        String finalError = "0000";

        for (CompletableFuture<List<String>> future : futures) {
            try {
                List<String> res = future.get(5, TimeUnit.SECONDS);
                if (!res.get(0).isBlank()) {
                    allResponses.add(res.get(0));
                }
                if (!"0000".equals(res.get(2))) {
                    finalError = res.get(2);
                }
            } catch (TimeoutException e) {
                logger.error("Timeout in COBOL call for a batch", e);
                finalError = "3299";
            } catch (Exception e) {
                logger.error("Error in batch execution", e);
                finalError = "3298";
            }
        }

        String joinedOutput = String.join("|", allResponses); // Or use any delimiter or merge logic
        String totalCount = String.valueOf(allResponses.size());

        logger.info("VC--- Balance_Enquiry_Child ended ---");
        MDC.clear();

        return List.of(joinedOutput, totalCount, finalError);
    }

    private List<String> callCobolForBatch(List<String> accounts, DataSource datasource, String inpcommonarea) {
        String recordcount = String.format("%03d", accounts.size());

        WaArrayAccount input1 = new WaArrayAccount();
        Ls400InpEnqType input2 = new Ls400InpEnqType();
        WaInputCount input3 = new WaInputCount();
        Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
        Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
        JvmArrayOutputOut output3 = new JvmArrayOutputOut();
        LsRecordArea inputrec = new LsRecordArea();

        input1.setWaArrayAccount(String.join("", accounts));
        input2.setLs400InpEnqType("1");
        input3.setWaInputCount(recordcount);
        inputrec.setLsRecordArea(inpcommonarea);

        String outResponse = "";
        String errno = "0000";

        try (Connection connection = datasource.getConnection()) {
            RunUnit runUnit = new RunUnit();
            JVMAVBL cobol = new JVMAVBL();
            runUnit.Add(cobol);

            runUnit.Call("JVMAVBL",
                    input1.get_Reference(), input3.get_Reference(), input2.get_Reference(),
                    output1.get_Reference(), output2.get_Reference(),
                    output3.get_Reference(), inputrec.get_Reference(), connection);

            errno = output1.getLs400OutputErrorNumber();
            outResponse = output3.getJvmArrayOutputOut();

            if (!"0000".equals(errno)) {
                logger.warn("COBOL returned error code: {}", errno);
            }

        } catch (SQLException e) {
            logger.error("SQL Exception in batch: {}", e.getMessage(), e);
            errno = "3293";
        }

        return List.of(outResponse, String.valueOf(accounts.size()), errno);
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}