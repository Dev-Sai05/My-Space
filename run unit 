package com.tcs.bancs.microservices.java.validatechkd;

import java.util.List;
import java.util.ArrayList;

import com.microfocus.cobol.runtime.RuntimeSystem;
import com.microfocus.cobol.runtime.RunUnit;
import com.tcs.bancs.microservices.jvm.validatechkd.CHKD01;
import com.tcs.bancs.microservices.jvm.validatechkd.LsJvmChkdInpAcc;
import com.tcs.bancs.microservices.jvm.validatechkd.LsJvmChkdAllowFlag;
import com.tcs.bancs.microservices.jvm.validatechkd.LsJvmChkdErrorNumber;
import com.tcs.bancs.microservices.jvm.validatechkd1.CHKD02;
import com.tcs.bancs.microservices.jvm.validatechkd1.LsJvmChkdInpAcc1;
import com.tcs.bancs.microservices.jvm.validatechkd1.LsJvmChkdAllowFlag1;
import com.tcs.bancs.microservices.jvm.validatechkd1.LsJvmChkdErrorNumber1;

public class ValidateCheckDigit {

    public static void main(String[] args) {
        // Define four account numbers as inputs
        String[] accountNumbers = {"95047271448", "95047271449", "95047271450", "95047271451"};

        RunUnit runUnit = new RunUnit(); // Initialize RunUnit
        try {
            // Iterate through account numbers and process
            for (int i = 0; i < accountNumbers.length; i++) {
                if (i % 2 == 0) { // Even index
                    System.out.println("Even Input: " + accountNumbers[i]);
                    System.out.println(validateCHKD(runUnit, accountNumbers[i]));
                } else { // Odd index
                    System.out.println("Odd Input: " + accountNumbers[i]);
                    System.out.println(validateCHKD1(runUnit, accountNumbers[i]));
                }
            }
        } finally {
            runUnit.stop(); // Clean up resources
        }
    }

    public static List<String> validateCHKD(RunUnit runUnit, String acctno) {
        CHKD01 chkd01 = runUnit.loadProgram(CHKD01.class); // Load COBOL program
        LsJvmChkdInpAcc input = new LsJvmChkdInpAcc();
        LsJvmChkdAllowFlag output1 = new LsJvmChkdAllowFlag();
        LsJvmChkdErrorNumber output2 = new LsJvmChkdErrorNumber();

        input.setLsJvmChkdInpAcc(acctno);
        chkd01.CHKD01(input, output2, output1);

        List<String> res = new ArrayList<>();
        res.add(output1.getLsJvmChkdAllowFlag());
        res.add(output2.getLsJvmChkdErrorNumber());

        return res;
    }

    public static List<String> validateCHKD1(RunUnit runUnit, String acctno) {
        CHKD02 chkd02 = runUnit.loadProgram(CHKD02.class); // Load COBOL program
        LsJvmChkdInpAcc1 input1 = new LsJvmChkdInpAcc1();
        LsJvmChkdAllowFlag1 output11 = new LsJvmChkdAllowFlag1();
        LsJvmChkdErrorNumber1 output21 = new LsJvmChkdErrorNumber1();

        input1.setLsJvmChkdInpAcc1(acctno);
        chkd02.CHKD02(input1, output21, output11);

        List<String> res = new ArrayList<>();
        res.add(output11.getLsJvmChkdAllowFlag1());
        res.add(output21.getLsJvmChkdErrorNumber1());

        return res;
    }
}



Hereâ€™s how you can use RunUnit in Micro Focus Visual COBOL to integrate Java and COBOL programs. RunUnit enables the execution of COBOL programs within a managed runtime environment, allowing seamless integration between Java and COBOL.

Code Example Using RunUnit

Java Code (ValidateCheckDigit.java)

package com.tcs.bancs.microservices.java.validatechkd;

import java.util.List;
import java.util.ArrayList;

import com.microfocus.cobol.runtime.RuntimeSystem;
import com.microfocus.cobol.runtime.RunUnit;
import com.tcs.bancs.microservices.jvm.validatechkd.CHKD01;
import com.tcs.bancs.microservices.jvm.validatechkd.LsJvmChkdInpAcc;
import com.tcs.bancs.microservices.jvm.validatechkd.LsJvmChkdAllowFlag;
import com.tcs.bancs.microservices.jvm.validatechkd.LsJvmChkdErrorNumber;
import com.tcs.bancs.microservices.jvm.validatechkd1.CHKD02;
import com.tcs.bancs.microservices.jvm.validatechkd1.LsJvmChkdInpAcc1;
import com.tcs.bancs.microservices.jvm.validatechkd1.LsJvmChkdAllowFlag1;
import com.tcs.bancs.microservices.jvm.validatechkd1.LsJvmChkdErrorNumber1;

public class ValidateCheckDigit {

    public static void main(String[] args) {
        // Define four account numbers as inputs
        String[] accountNumbers = {"95047271448", "95047271449", "95047271450", "95047271451"};

        RunUnit runUnit = new RunUnit(); // Initialize RunUnit
        try {
            // Iterate through account numbers and process
            for (int i = 0; i < accountNumbers.length; i++) {
                if (i % 2 == 0) { // Even index
                    System.out.println("Even Input: " + accountNumbers[i]);
                    System.out.println(validateCHKD(runUnit, accountNumbers[i]));
                } else { // Odd index
                    System.out.println("Odd Input: " + accountNumbers[i]);
                    System.out.println(validateCHKD1(runUnit, accountNumbers[i]));
                }
            }
        } finally {
            runUnit.stop(); // Clean up resources
        }
    }

    public static List<String> validateCHKD(RunUnit runUnit, String acctno) {
        CHKD01 chkd01 = runUnit.loadProgram(CHKD01.class); // Load COBOL program
        LsJvmChkdInpAcc input = new LsJvmChkdInpAcc();
        LsJvmChkdAllowFlag output1 = new LsJvmChkdAllowFlag();
        LsJvmChkdErrorNumber output2 = new LsJvmChkdErrorNumber();

        input.setLsJvmChkdInpAcc(acctno);
        chkd01.CHKD01(input, output2, output1);

        List<String> res = new ArrayList<>();
        res.add(output1.getLsJvmChkdAllowFlag());
        res.add(output2.getLsJvmChkdErrorNumber());

        return res;
    }

    public static List<String> validateCHKD1(RunUnit runUnit, String acctno) {
        CHKD02 chkd02 = runUnit.loadProgram(CHKD02.class); // Load COBOL program
        LsJvmChkdInpAcc1 input1 = new LsJvmChkdInpAcc1();
        LsJvmChkdAllowFlag1 output11 = new LsJvmChkdAllowFlag1();
        LsJvmChkdErrorNumber1 output21 = new LsJvmChkdErrorNumber1();

        input1.setLsJvmChkdInpAcc1(acctno);
        chkd02.CHKD02(input1, output21, output11);

        List<String> res = new ArrayList<>();
        res.add(output11.getLsJvmChkdAllowFlag1());
        res.add(output21.getLsJvmChkdErrorNumber1());

        return res;
    }
}


---

Key Components of the Code:

1. RunUnit Initialization:

A RunUnit object is created to manage the lifecycle of COBOL program calls.



2. Loading COBOL Programs:

COBOL classes (e.g., CHKD01, CHKD02) are loaded using runUnit.loadProgram(Class).



3. Resource Cleanup:

The runUnit.stop() method is called in the finally block to release resources and prevent memory leaks.





---

Benefits of Using RunUnit in Micro Focus Eclipse:

1. Seamless Integration:

Allows Java programs to call COBOL code easily, enabling interoperability between modern and legacy systems.



2. Resource Management:

Manages COBOL resources efficiently, ensuring proper cleanup and preventing memory leaks.



3. Concurrency Support:

Facilitates multi-threading scenarios in Java while interacting with COBOL programs.



4. Isolation:

Each RunUnit instance operates independently, ensuring that different transactions or processes do not interfere with one another.



5. Debugging Support:

Provides better debugging and tracing capabilities for COBOL programs executed from Java.



6. Scalability:

Supports scalable solutions by allowing multiple RunUnit instances for different transactions.



7. Ease of Maintenance:

Centralizes COBOL logic and enables Java to handle orchestration and modern functionality.




This setup ensures a robust and maintainable integration between Java and COBOL for projects like your SBI Core Banking microservices.





