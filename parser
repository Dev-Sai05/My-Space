import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;

public class JavaCodeAnalyzer {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(JavaCodeAnalyzer::createAndShowGUI);
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Java Code Analyzer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultArea);

        JButton openFileButton = new JButton("Open Java File");
        openFileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("Java Files", "java"));
            int returnValue = fileChooser.showOpenDialog(frame);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    String analysisResult = analyzeJavaFile(selectedFile);
                    resultArea.setText(analysisResult);
                } catch (FileNotFoundException ex) {
                    resultArea.setText("Error: File not found!");
                }
            }
        });

        frame.add(openFileButton, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }

    private static String analyzeJavaFile(File file) throws FileNotFoundException {
        StringBuilder analysisResult = new StringBuilder();
        JavaParser parser = new JavaParser();

        CompilationUnit compilationUnit = parser.parse(file).getResult().orElseThrow(() -> new FileNotFoundException("Unable to parse file"));

        // Check for try-catch blocks
        analysisResult.append("Try-Catch Block Analysis:\n");
        new TryCatchBlockChecker().visit(compilationUnit, analysisResult);

        // Check for null assignments
        analysisResult.append("\nNull Assignment Analysis:\n");
        new NullAssignmentChecker().visit(compilationUnit, analysisResult);

        // Check for resource closures
        analysisResult.append("\nResource Closure Analysis:\n");
        new ResourceClosureChecker().visit(compilationUnit, analysisResult);

        return analysisResult.toString();
    }

    private static class TryCatchBlockChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            BlockStmt body = md.getBody().orElse(null);
            if (body != null && body.getStatements().stream().noneMatch(s -> s.isTryStmt())) {
                result.append("  Method ").append(md.getName()).append(" does not contain a try-catch block.\n");
            }
        }
    }

    private static class NullAssignmentChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            md.getParameters().forEach(param -> {
                if (param.getType().isReferenceType() && !param.getAnnotations().isNonEmpty()) {
                    result.append("  Parameter ").append(param.getName()).append(" in method ")
                          .append(md.getName()).append(" might not be checked for null.\n");
                }
            });
        }
    }

    private static class ResourceClosureChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            md.getBody().ifPresent(body -> {
                if (body.getStatements().stream().anyMatch(s -> s.toString().contains("open"))) {
                    if (body.getStatements().stream().noneMatch(s -> s.toString().contains("close"))) {
                        result.append("  Method ").append(md.getName()).append(" might not close opened resources.\n");
                    }
                }
            });
        }
    }
}



----------------.

import com.github.javaparser.JavaParser;
import com.github.javaparser.ParseResult;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;

public class JavaCodeAnalyzer {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(JavaCodeAnalyzer::createAndShowGUI);
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Java Code Analyzer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultArea);

        JButton openFileButton = new JButton("Open Java File");
        openFileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("Java Files", "java"));
            int returnValue = fileChooser.showOpenDialog(frame);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    String analysisResult = analyzeJavaFile(selectedFile);
                    resultArea.setText(analysisResult);
                } catch (FileNotFoundException ex) {
                    resultArea.setText("Error: File not found!");
                }
            }
        });

        frame.add(openFileButton, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }

    private static String analyzeJavaFile(File file) throws FileNotFoundException {
        StringBuilder analysisResult = new StringBuilder();
        JavaParser parser = new JavaParser();

        ParseResult<CompilationUnit> parseResult = parser.parse(file);

        if (parseResult.isSuccessful() && parseResult.getResult().isPresent()) {
            CompilationUnit compilationUnit = parseResult.getResult().get();

            // Check for try-catch blocks
            analysisResult.append("Try-Catch Block Analysis:\n");
            new TryCatchBlockChecker().visit(compilationUnit, analysisResult);

            // Check for null assignments
            analysisResult.append("\nNull Assignment Analysis:\n");
            new NullAssignmentChecker().visit(compilationUnit, analysisResult);

            // Check for resource closures
            analysisResult.append("\nResource Closure Analysis:\n");
            new ResourceClosureChecker().visit(compilationUnit, analysisResult);
        } else {
            analysisResult.append("Error: Unable to parse the file.\n");
        }

        return analysisResult.toString();
    }

    private static class TryCatchBlockChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            BlockStmt body = md.getBody().orElse(null);
            if (body != null && body.getStatements().stream().noneMatch(s -> s.isTryStmt())) {
                int line = md.getRange().map(range -> range.begin.line).orElse(-1);
                result.append("  Method '").append(md.getName()).append("' (line ").append(line)
                        .append(") does not contain a try-catch block.\n");
            }
        }
    }

    private static class NullAssignmentChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            md.getParameters().forEach(param -> {
                if (param.getType().isReferenceType() && !param.getAnnotations().isNonEmpty()) {
                    int line = param.getRange().map(range -> range.begin.line).orElse(-1);
                    result.append("  Parameter '").append(param.getName()).append("' in method '")
                          .append(md.getName()).append("' (line ").append(line)
                          .append(") might not be checked for null.\n");
                }
            });
        }
    }

    private static class ResourceClosureChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            md.getBody().ifPresent(body -> {
                if (body.getStatements().stream().anyMatch(s -> s.toString().contains("open"))) {
                    if (body.getStatements().stream().noneMatch(s -> s.toString().contains("close"))) {
                        int line = md.getRange().map(range -> range.begin.line).orElse(-1);
                        result.append("  Method '").append(md.getName()).append("' (line ").append(line)
                                .append(") might not close opened resources.\n");
                    }
                }
            });
        }
    }
}




++++++

private static class ResourceClosureChecker extends VoidVisitorAdapter<StringBuilder> {
    @Override
    public void visit(MethodDeclaration md, StringBuilder result) {
        super.visit(md, result);
        md.getBody().ifPresent(body -> {
            boolean hasOpen = body.getStatements().stream()
                    .anyMatch(s -> s.toString().contains("open"));

            boolean hasClose = body.getStatements().stream()
                    .anyMatch(s -> s.toString().contains("close"));

            int line = md.getRange().map(range -> range.begin.line).orElse(-1);

            if (hasOpen && !hasClose) {
                result.append("  Method '").append(md.getName()).append("' (line ").append(line)
                        .append(") might not close opened resources.\n");
            }
        });
    }
}


)))))))))))))))

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.stmt.*;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;

public class JavaCodeAnalyzer {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(JavaCodeAnalyzer::createAndShowGUI);
    }

    private static void createAndShowGUI() {
        JFrame frame = new JFrame("Java Code Analyzer");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);
        frame.setLayout(new BorderLayout());

        JTextArea resultArea = new JTextArea();
        resultArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultArea);

        JButton openFileButton = new JButton("Open Java File");
        openFileButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("Java Files", "java"));
            int returnValue = fileChooser.showOpenDialog(frame);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = fileChooser.getSelectedFile();
                try {
                    String analysisResult = analyzeJavaFile(selectedFile);
                    resultArea.setText(analysisResult);
                } catch (FileNotFoundException ex) {
                    resultArea.setText("Error: File not found!");
                }
            }
        });

        frame.add(openFileButton, BorderLayout.NORTH);
        frame.add(scrollPane, BorderLayout.CENTER);

        frame.setVisible(true);
    }

    private static String analyzeJavaFile(File file) throws FileNotFoundException {
        StringBuilder analysisResult = new StringBuilder();
        JavaParser parser = new JavaParser();

        CompilationUnit compilationUnit = parser.parse(file).getResult().orElseThrow(() -> new FileNotFoundException("Unable to parse file"));

        // Check for try-catch blocks
        analysisResult.append("Try-Catch Block Analysis:\n");
        new TryCatchBlockChecker().visit(compilationUnit, analysisResult);

        // Check for null assignments
        analysisResult.append("\nNull Assignment Analysis:\n");
        new NullAssignmentChecker().visit(compilationUnit, analysisResult);

        // Check for resource closures
        analysisResult.append("\nResource Closure Analysis:\n");
        new ResourceClosureChecker().visit(compilationUnit, analysisResult);

        // Check for braces and if/else mismatches
        analysisResult.append("\nBraces and If/Else Block Analysis:\n");
        new BraceAndIfElseChecker().visit(compilationUnit, analysisResult);

        return analysisResult.toString();
    }

    private static class TryCatchBlockChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            BlockStmt body = md.getBody().orElse(null);
            if (body != null && body.getStatements().stream().noneMatch(s -> s.isTryStmt())) {
                result.append("  Method ").append(md.getName()).append(" does not contain a try-catch block.\n");
            }
        }
    }

    private static class NullAssignmentChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            md.getParameters().forEach(param -> {
                if (param.getType().isReferenceType() && !param.getAnnotations().isNonEmpty()) {
                    result.append("  Parameter ").append(param.getName()).append(" in method ")
                          .append(md.getName()).append(" might not be checked for null.\n");
                }
            });
        }
    }

    private static class ResourceClosureChecker extends VoidVisitorAdapter<StringBuilder> {
        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            md.getBody().ifPresent(body -> {
                if (body.getStatements().stream().anyMatch(s -> s.toString().contains("open"))) {
                    if (body.getStatements().stream().noneMatch(s -> s.toString().contains("close"))) {
                        result.append("  Method ").append(md.getName()).append(" might not close opened resources.\n");
                    }
                }
            });
        }
    }

    private static class BraceAndIfElseChecker extends VoidVisitorAdapter<StringBuilder> {
        // Track the number of open and close braces
        private int openBraces = 0;

        @Override
        public void visit(MethodDeclaration md, StringBuilder result) {
            super.visit(md, result);
            BlockStmt body = md.getBody().orElse(null);
            if (body != null) {
                // Iterate through all the statements in the method
                body.getStatements().forEach(statement -> {
                    try {
                        checkBraces(statement, result);
                        checkIfElse(statement, result);
                    } catch (Exception e) {
                        result.append("Error processing statement: ").append(statement.toString()).append("\n");
                        e.printStackTrace();
                    }
                });
                // After processing all statements, check for unmatched braces
                if (openBraces > 0) {
                    result.append("  Unmatched opening brace detected in method ").append(md.getName()).append(".\n");
                }
            }
        }

        private void checkBraces(Statement statement, StringBuilder result) {
            String statementStr = statement.toString();
            for (char c : statementStr.toCharArray()) {
                if (c == '{') {
                    openBraces++; // Increment for opening brace
                } else if (c == '}') {
                    openBraces--; // Decrement for closing brace
                    if (openBraces < 0) {
                        result.append("  Unmatched closing brace detected: ").append(statementStr).append("\n");
                    }
                }
            }
        }

        private void checkIfElse(Statement statement, StringBuilder result) {
            if (statement instanceof IfStmt) {
                IfStmt ifStmt = (IfStmt) statement;
                if (!ifStmt.getElseStmt().isPresent()) {
                    int line = statement.getBegin().map(pos -> pos.line).orElse(-1);
                    result.append("  If statement at line ").append(line).append(" has no corresponding else.\n");
                }
            }
        }
    }
}