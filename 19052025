public class BalanceEnqService_Child {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
   Connection connection;
   
   private static RunUnit sharedRunUnit1;
   private static JVMCUSVCC sharedJvmmre1;

   static {
       try {
           sharedRunUnit1 = new RunUnit();
           sharedJvmmre1 = new JVMCUSVCC();
           sharedRunUnit1.Add(sharedJvmmre1);
           System.out.println("Shared RunUnit1 initialized.");
       } catch (Exception e) {
           e.printStackTrace();
       }
   }

    public List<String> Balance_Enquiry_Child(String accno,DataSource datasource, String inpcommonarea, String refno) {
    	
    	logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);
    	
    	 String errno = "";
    	 List<String> allRecordsBuilder = new ArrayList<>();
    	 int RecordCountOut;
    	 String Output_Res = "";
    	 String Output_Res1 = "";
    	 List<String> res = new ArrayList<>();
    	 
    	
        

            JVMCUSVCC 				jvmcusvcc = new JVMCUSVCC();
            LsAccountNumber           input1  = new LsAccountNumber();
            LsRecordArea   		     inputrec = new LsRecordArea();
            LsOutputArray             output1 = new LsOutputArray();
            LsErrorNumber            output2  = new LsErrorNumber();
            LsArrayIndex             output3  = new    LsArrayIndex();
         
            input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
            inputrec.setLsRecordArea(inpcommonarea);
            
            
            try (Connection connection = datasource.getConnection()){
//            RunUnit run1 = new RunUnit();
//            run1.Add(jvmcusvcc);
            	sharedRunUnit1.Call("JVMCUSVCC", input1.get_Reference(), output2.get_Reference(), 
            		output1.get_Reference(),output3.get_Reference(), inputrec.get_Reference(), connection);

            
           errno = output2.getLsErrorNumber();
           Output_Res = output1.getLsOutputArray();
//     	   run1.close();
     	   
 	    } catch (SQLException e) {
 	        logger.error("SQL Exception: " + e.getMessage(), e);
 	        errno = "3293";
 	    }
            RecordCountOut = output3.getLsArrayIndex();

            int startIndex = 0;
            int endIndex = 0;
            while (startIndex + 98 <= Output_Res.length()) {
                endIndex = startIndex + 98;
                String tempBreak = Output_Res.substring(startIndex, endIndex);
                if(tempBreak==null||tempBreak.trim().isEmpty())
                {
                	break;
                }
                allRecordsBuilder.add( Output_Res.substring(startIndex, endIndex));
                Output_Res1=String.join(",",allRecordsBuilder).replace(",","");
                startIndex = endIndex;
            }
            if(Output_Res.trim().isEmpty())
            {
            	errno = output2.getLsErrorNumber();
            }
            else
            {
            	  errno = "0000";
            }
   

	  res.add(Output_Res1.replace("[", ""));
	  res.add(String.valueOf(RecordCountOut-1));  
	  res.add(errno);
	  logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
	  return res;
	
}
}

------------------

public class BalanceEnqService_Child {

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    private static final Object runUnitLock = new Object();

    private static RunUnit sharedRunUnit1;
    private static JVMCUSVCC sharedJvmmre1;

    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvmmre1 = new JVMCUSVCC();
            sharedRunUnit1.Add(sharedJvmmre1);
            System.out.println("Shared RunUnit1 initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---VC | RefNo: {}", refno);

        List<String> response = new ArrayList<>();
        List<String> allRecords = new ArrayList<>();

        String errno = "";
        String outputRes = "";
        int recordCountOut = 0;

        LsAccountNumber input1 = new LsAccountNumber();
        LsRecordArea inputRec = new LsRecordArea();
        LsOutputArray output1 = new LsOutputArray();
        LsErrorNumber output2 = new LsErrorNumber();
        LsArrayIndex output3 = new LsArrayIndex();

        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
        inputRec.setLsRecordArea(inpcommonarea);

        try (Connection connection = datasource.getConnection()) {
            synchronized (runUnitLock) {
                sharedRunUnit1.Call("JVMCUSVCC", 
                    input1.get_Reference(), 
                    output2.get_Reference(), 
                    output1.get_Reference(),
                    output3.get_Reference(), 
                    inputRec.get_Reference(), 
                    connection);
            }

            errno = output2.getLsErrorNumber();
            outputRes = output1.getLsOutputArray();
            recordCountOut = output3.getLsArrayIndex();

        } catch (SQLException e) {
            logger.error("SQL Exception: {}", e.getMessage(), e);
            errno = "3293";
        } catch (Exception e) {
            logger.error("Exception during COBOL call: {}", e.getMessage(), e);
            errno = "3299";
        }

        // Process the COBOL output response
        if (outputRes != null && !outputRes.trim().isEmpty()) {
            int start = 0;
            while (start + 98 <= outputRes.length()) {
                String part = outputRes.substring(start, start + 98).trim();
                if (part.isEmpty()) break;
                allRecords.add(part);
                start += 98;
            }
            errno = "0000";  // Successful
        }

        // Final response assembly
        String combinedOutput = String.join("", allRecords);
        response.add(combinedOutput);
        response.add(String.valueOf(Math.max(0, recordCountOut - 1))); // Avoid negative index
        response.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---VC | RefNo: {}", refno);
        return response;
    }
}


+--+-++++++--+++

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BalanceEnqService_Child {

    private static final Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    private static final int POOL_SIZE = 2;
    private static final List<RunUnitWrapper> runUnitPool = new ArrayList<>(POOL_SIZE);
    private static final AtomicInteger roundRobinIndex = new AtomicInteger(0);

    static {
        try {
            for (int i = 0; i < POOL_SIZE; i++) {
                RunUnit runUnit = new RunUnit();
                JVMCUSVCC cobolInstance = new JVMCUSVCC();
                runUnit.Add(cobolInstance);
                runUnitPool.add(new RunUnitWrapper(runUnit, cobolInstance, new Object()));
                System.out.println("Initialized shared RunUnit #" + (i + 1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> Balance_Enquiry_Child(String accno, DataSource datasource, String inpcommonarea, String refno) {
        logger.info("VC---Balance_Enquiry_Child started---VC | RefNo: {}", refno);

        List<String> response = new ArrayList<>();
        List<String> allRecords = new ArrayList<>();

        String errno = "";
        String outputRes = "";
        int recordCountOut = 0;

        LsAccountNumber input1 = new LsAccountNumber();
        LsRecordArea inputRec = new LsRecordArea();
        LsOutputArray output1 = new LsOutputArray();
        LsErrorNumber output2 = new LsErrorNumber();
        LsArrayIndex output3 = new LsArrayIndex();

        input1.setLsAccountNumber(String.format("%017d", new BigInteger(accno)));
        inputRec.setLsRecordArea(inpcommonarea);

        // Pick a RunUnit from the pool in round-robin fashion
        int poolIndex = roundRobinIndex.getAndUpdate(i -> (i + 1) % POOL_SIZE);
        RunUnitWrapper wrapper = runUnitPool.get(poolIndex);

        try (Connection connection = datasource.getConnection()) {
            synchronized (wrapper.lock) {
                wrapper.runUnit.Call("JVMCUSVCC",
                        input1.get_Reference(),
                        output2.get_Reference(),
                        output1.get_Reference(),
                        output3.get_Reference(),
                        inputRec.get_Reference(),
                        connection);
            }

            errno = output2.getLsErrorNumber();
            outputRes = output1.getLsOutputArray();
            recordCountOut = output3.getLsArrayIndex();

        } catch (SQLException e) {
            logger.error("SQL Exception: {}", e.getMessage(), e);
            errno = "3293";
        } catch (Exception e) {
            logger.error("Exception during COBOL call: {}", e.getMessage(), e);
            errno = "3299";
        }

        // Process COBOL response
        if (outputRes != null && !outputRes.trim().isEmpty()) {
            int start = 0;
            while (start + 98 <= outputRes.length()) {
                String part = outputRes.substring(start, start + 98).trim();
                if (part.isEmpty()) break;
                allRecords.add(part);
                start += 98;
            }
            errno = "0000";
        }

        String combinedOutput = String.join("", allRecords);
        response.add(combinedOutput);
        response.add(String.valueOf(Math.max(0, recordCountOut - 1)));
        response.add(errno);

        logger.info("VC---Balance_Enquiry_Child ended---VC | RefNo: {}", refno);
        return response;
    }

    private static class RunUnitWrapper {
        RunUnit runUnit;
        JVMCUSVCC cobolInstance;
        Object lock;

        RunUnitWrapper(RunUnit runUnit, JVMCUSVCC cobolInstance, Object lock) {
            this.runUnit = runUnit;
            this.cobolInstance = cobolInstance;
            this.lock = lock;
        }
    }
}