public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords, String lacctno1) {
    String errno = "0000";
    StringBuilder allRecordsBuilder = new StringBuilder();

    logger.info("Starting Balance Enquiry Child Service...");
    lacctno1 = lacctno1.substring(0, lacctno1.length() - 1);
    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000"
            : String.format("%016d", new BigInteger(lacctno1));

    // Split the input account number into chunks of 16 digits
    List<String> accountNumbers = splitIntoChunks(accno, 16);

    // Adjust the account numbers based on `lastaccno1` logic
    if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
        int index = accountNumbers.indexOf(lacctno);
        if (index != -1) {
            accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
            logger.info("Target account number found. Processing records below it.");
        } else {
            logger.info("Target account number not found in the list.");
            List<String> errorRes = new ArrayList<>();
            errorRes.add("");
            errorRes.add("0");
            errorRes.add("108"); // Error code for not found account number
            return errorRes;
        }
    }

    // Determine the number of threads needed
    int totalRecords = accountNumbers.size();
    int numberOfThreads = Math.min(totalRecords, requestedNumberOfRecords);

    logger.info("Total records to process: " + totalRecords);
    logger.info("Creating " + numberOfThreads + " threads for processing.");

    // ExecutorService with a thread pool based on the calculated number of threads
    ExecutorService executorService = Executors.newFixedThreadPool(numberOfThreads);
    List<Future<ResponseData>> futures = new ArrayList<>();
    AtomicInteger fetchedRecordsCount = new AtomicInteger(0);

    // Submit tasks dynamically based on the number of threads
    for (int i = 0; i < totalRecords; i++) {
        if (fetchedRecordsCount.get() >= requestedNumberOfRecords) {
            break;
        }

        String accountNumber = accountNumbers.get(i);
        Callable<ResponseData> task = () -> {
            ResponseData response = processAccount(accountNumber);
            if ("0000".equals(response.errno)) {
                synchronized (fetchedRecordsCount) {
                    if (fetchedRecordsCount.get() < requestedNumberOfRecords) {
                        allRecordsBuilder.append(response.outResponse.trim());
                        fetchedRecordsCount.incrementAndGet();
                    }
                }
            }
            return response;
        };

        futures.add(executorService.submit(task));
    }

    // Process results
    try {
        for (Future<ResponseData> future : futures) {
            ResponseData responseData = future.get();
            if ("0155".equals(responseData.errno)) {
                errno = "0155";
                break;
            }
        }
    } catch (Exception e) {
        logger.error("Error while processing accounts in parallel", e);
        errno = "188";
    } finally {
        executorService.shutdownNow();
    }

    // Prepare the response
    if (fetchedRecordsCount.get() == 0) {
        errno = "188";
    }
    List<String> res = new ArrayList<>();
    res.add(allRecordsBuilder.toString());
    res.add(String.valueOf(fetchedRecordsCount.get()));
    res.add(errno);

    logger.info("Balance Enquiry Child Service completed.");
    return res;
}

private ResponseData processAccount(String accountNumber) {
    ResponseData responseData = new ResponseData();
    responseData.errno = "0000";

    try {
        // Create input and output objects for each account number
        Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
        Ls400InpEnqType input2 = new Ls400InpEnqType();
        Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
        Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
        Ls400OutputResponse output3 = new Ls400OutputResponse();

        input1.setLs400InputAccountNumber(accountNumber);
        input2.setLs400InpEnqType("1");

        // Create and use RunUnit
        JVMAVBL jvmavbl = new JVMAVBL();
        RunUnit runUnit = new RunUnit();
        runUnit.Add(jvmavbl);

        logger.info("Processing account number: " + accountNumber);
        runUnit.Call("JVMAVBL", input1.get_Reference(), input2.get_Reference(), output1.get_Reference(),
                output2.get_Reference(), output3.get_Reference());

        responseData.outResponse = output3.getLs400OutputResponse();
        responseData.errno = output1.getLs400OutputErrorNumber();

        runUnit.close();
    } catch (Exception e) {
        logger.error("Error processing account number: " + accountNumber, e);
        responseData.errno = "188";
    }

    return responseData;
}

private List<String> splitIntoChunks(String input, int chunkSize) {
    List<String> chunks = new ArrayList<>();
    for (int i = 0; i < input.length(); i += chunkSize) {
        int end = Math.min(input.length(), i + chunkSize);
        String chunk = input.substring(i, end).trim();
        if (!chunk.isEmpty() && !chunk.matches("^0+$")) {
            chunks.add(chunk);
        }
    }
    return chunks;
}

public class ResponseData {
    String outResponse = "";
    String errno = "";
}