package com.tcs.bancs.microservices.services;
 
 import java.math.BigInteger;
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.List;
 
 import javax.sql.DataSource;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.RestController;
 
 import com.microfocus.cobol.runtimeservices.RunUnit;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpEnqType;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputErrorNumber;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.JvmArrayOutputOut;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400AccountActiveFlag;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.LsRecordArea;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.WaArrayAccount;
 import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.WaInputCount;
 import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;
 
 @RestController
 public class BalanceEnqService_Child {
 
     @Autowired
     InvmDetailDayRepo invmRepo;
 
     Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
 
     public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {
 
     	    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
     	    logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);
 
     	    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
     	    String errno = "";
     	    String outResponse = "";
     	    String recordcount = String.format("%03d", requestedNumberOfRecords);
     	    // Flatten the invm structure
     	    List<String> flatAccounts = new ArrayList<>();
     	    for (List<String> list : accountNumbers) {
     	        flatAccounts.addAll(list);
     	    }
 
     	    // Apply lacctno logic: skip all accounts up to and including lacctno
     	    if (!lacctno.equals("0000000000000000")) {
     	        int index = -1;
     	        for (int i = 0; i < flatAccounts.size(); i++) {
     	            if (String.format("%016d", new BigInteger(flatAccounts.get(i))).equals(lacctno)) {
     	                index = i;
     	                break;
     	            }
     	        }
     	        if (index != -1) {
     	            flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
     	            logger.info("Target account number found. Processing records below it");
     	        } else {
     	            logger.info("Target account number not found in the list.");
     	            return List.of("", "0", "0108"); // Error: account not found
     	        }
     	    }
 
     	    // Format account numbers to 16-digit strings and combine
     	    StringBuilder accNumbersBuilder = new StringBuilder();
     	    for (String acc : flatAccounts) {
     	        accNumbersBuilder.append(String.format("%016d", new BigInteger(acc)));
     	    }
            JVMAVBL JVMAVBL = new JVMAVBL();
     	    // Set up COBOL input/output structures
     	    WaArrayAccount input1 = new WaArrayAccount();
     	    Ls400InpEnqType input2 = new Ls400InpEnqType();
     	    WaInputCount input3 = new WaInputCount();
     	    Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
     	    Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
     	    JvmArrayOutputOut output3 = new JvmArrayOutputOut();
     	    LsRecordArea inputrec = new LsRecordArea();
 
     	    input1.setWaArrayAccount(accNumbersBuilder.toString());
     	    input2.setLs400InpEnqType("1");
     	    input3.setWaInputCount(recordcount);
     	    inputrec.setLsRecordArea(inpcommonarea);
 
     	    int fetchedRecordsCount = 0;
//     	    StringBuilder allRecordsBuilder = new StringBuilder();
 
     	    try (Connection connection = datasource.getConnection()) {
                RunUnit RunUnit1 = new RunUnit();
                RunUnit1.Add(JVMAVBL);
     	        RunUnit1.Call("JVMAVBL", input1.get_Reference(), input3.get_Reference(), input2.get_Reference(),
     	        		output1.get_Reference(), output2.get_Reference(),
     	                output3.get_Reference(), inputrec.get_Reference(), connection);
 
     	        errno = output1.getLs400OutputErrorNumber();
     	        outResponse = output3.getJvmArrayOutputOut();
 	            logger.info("OUTResponse::::::::::::::" +outResponse );
 
     	        if ("0000".equals(errno)) {
     	            if (outResponse != null && !outResponse.trim().isEmpty()) {
     	            	outResponse.trim();
     	                fetchedRecordsCount++; // Optional: increment if parsing multiple records
     	            }
     	        } else if ("155".equals(errno) || "0155".equals(errno)) {
     	            errno = "0155";
     	        } else {
     	            errno = "0000"; // Ignore error and return empty
     	            logger.info("RECORD NOT FOUND IN INVM");
     	        }
 
     	    } catch (SQLException e) {
     	        logger.error("SQL Exception: " + e.getMessage(), e);
     	        errno = "3293";
     	    }
 
     	    if (fetchedRecordsCount == 0) {
     	        errno = "0188";
     	    }
 
     	    List<String> res = new ArrayList<>();
     	    res.add(outResponse);
     	    res.add(String.valueOf(requestedNumberOfRecords));
     	    res.add(errno);
 
     	    logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
 
     	    return res;
     	}
 
     public class ResponseData {
         String outResponse;
         String errno;
     }
 }



----------------------POC 1 WITH COMPLETABLE FUTURE AND MULTI RUN UNIT CONCEPT-----------------


import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
    String errno = "";
    String outResponse = "";
    String recordcount = String.format("%03d", requestedNumberOfRecords);

    List<String> flatAccounts = new ArrayList<>();
    for (List<String> list : accountNumbers) {
        flatAccounts.addAll(list);
    }

    if (!lacctno.equals("0000000000000000")) {
        int index = -1;
        for (int i = 0; i < flatAccounts.size(); i++) {
            if (String.format("%016d", new BigInteger(flatAccounts.get(i))).equals(lacctno)) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
            logger.info("Target account number found. Processing records below it");
        } else {
            logger.info("Target account number not found in the list.");
            return List.of("", "0", "0108"); // Error: account not found
        }
    }

    StringBuilder accNumbersBuilder = new StringBuilder();
    for (String acc : flatAccounts) {
        accNumbersBuilder.append(String.format("%016d", new BigInteger(acc)));
    }

    int fetchedRecordsCount = 0;

    // ==== START: Parallelization using CompletableFuture ====
    int parallelism = 4; // or based on CPU cores or config
    ExecutorService executor = Executors.newFixedThreadPool(parallelism);

    List<CompletableFuture<List<String>>> futures = new ArrayList<>();

    int chunkSize = requestedNumberOfRecords / parallelism;
    chunkSize = chunkSize == 0 ? 1 : chunkSize;

    for (int i = 0; i < flatAccounts.size(); i += chunkSize) {
        int end = Math.min(i + chunkSize, flatAccounts.size());
        List<String> chunk = flatAccounts.subList(i, end);

        CompletableFuture<List<String>> future = CompletableFuture.supplyAsync(() -> {
            try (Connection connection = datasource.getConnection()) {
                JVMAVBL JVMAVBL = new JVMAVBL();
                RunUnit RunUnit1 = new RunUnit();
                RunUnit1.Add(JVMAVBL);

                // Build account string
                StringBuilder localBuilder = new StringBuilder();
                for (String acc : chunk) {
                    localBuilder.append(String.format("%016d", new BigInteger(acc)));
                }

                WaArrayAccount input1 = new WaArrayAccount();
                input1.setWaArrayAccount(localBuilder.toString());

                Ls400InpEnqType input2 = new Ls400InpEnqType();
                input2.setLs400InpEnqType("1");

                WaInputCount input3 = new WaInputCount();
                input3.setWaInputCount(String.format("%03d", chunk.size()));

                LsRecordArea inputrec = new LsRecordArea();
                inputrec.setLsRecordArea(inpcommonarea);

                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                JvmArrayOutputOut output3 = new JvmArrayOutputOut();

                RunUnit1.Call("JVMAVBL", input1.get_Reference(), input3.get_Reference(), input2.get_Reference(),
                        output1.get_Reference(), output2.get_Reference(),
                        output3.get_Reference(), inputrec.get_Reference(), connection);

                String localErrno = output1.getLs400OutputErrorNumber();
                String localOutResponse = output3.getJvmArrayOutputOut();

                List<String> partialRes = new ArrayList<>();
                partialRes.add(localOutResponse != null ? localOutResponse.trim() : "");
                partialRes.add(String.valueOf(chunk.size()));
                partialRes.add(localErrno);

                return partialRes;
            } catch (Exception e) {
                logger.error("Exception in CompletableFuture: " + e.getMessage(), e);
                return List.of("", "0", "3293");
            }
        }, executor);

        futures.add(future);
    }

    List<String> finalOut = new ArrayList<>();
    StringBuilder combinedResponse = new StringBuilder();
    String finalErrno = "0000";

    for (CompletableFuture<List<String>> future : futures) {
        List<String> part = future.get(); // Blocking join
        combinedResponse.append(part.get(0));
        if (!"0000".equals(part.get(2))) {
            finalErrno = part.get(2);
        }
        fetchedRecordsCount += Integer.parseInt(part.get(1));
    }

    if (fetchedRecordsCount == 0) {
        finalErrno = "0188";
    }

    finalOut.add(combinedResponse.toString());
    finalOut.add(String.valueOf(fetchedRecordsCount));
    finalOut.add(finalErrno);

    executor.shutdown();

    logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);

    return finalOut;
}


-------- change 2 ----------

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
    String errno = "";
    String outResponse = "";
    String recordcount = String.format("%03d", requestedNumberOfRecords);

    List<String> flatAccounts = new ArrayList<>();
    for (List<String> list : accountNumbers) {
        flatAccounts.addAll(list);
    }

    if (!lacctno.equals("0000000000000000")) {
        int index = -1;
        for (int i = 0; i < flatAccounts.size(); i++) {
            if (String.format("%016d", new BigInteger(flatAccounts.get(i))).equals(lacctno)) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
            logger.info("Target account number found. Processing records below it");
        } else {
            logger.info("Target account number not found in the list.");
            return List.of("", "0", "0108"); // Error: account not found
        }
    }

    StringBuilder accNumbersBuilder = new StringBuilder();
    for (String acc : flatAccounts) {
        accNumbersBuilder.append(String.format("%016d", new BigInteger(acc)));
    }

    int fetchedRecordsCount = 0;

    // === START Parallel Execution ===
    int parallelism = 4;
    ExecutorService executor = Executors.newFixedThreadPool(parallelism);
    List<CompletableFuture<List<String>>> futures = new ArrayList<>();

    int chunkSize = requestedNumberOfRecords / parallelism;
    chunkSize = chunkSize == 0 ? 1 : chunkSize;

    for (int i = 0; i < flatAccounts.size(); i += chunkSize) {
        int end = Math.min(i + chunkSize, flatAccounts.size());
        List<String> chunk = flatAccounts.subList(i, end);

        CompletableFuture<List<String>> future = CompletableFuture.supplyAsync(() -> {
            String localErrno = "0000";
            String localOutResponse = "";

            try (Connection connection = datasource.getConnection()) {
                JVMAVBL JVMAVBL = new JVMAVBL();
                RunUnit RunUnit1 = new RunUnit();
                RunUnit1.Add(JVMAVBL);

                StringBuilder localBuilder = new StringBuilder();
                for (String acc : chunk) {
                    localBuilder.append(String.format("%016d", new BigInteger(acc)));
                }

                WaArrayAccount input1 = new WaArrayAccount();
                input1.setWaArrayAccount(localBuilder.toString());

                Ls400InpEnqType input2 = new Ls400InpEnqType();
                input2.setLs400InpEnqType("1");

                WaInputCount input3 = new WaInputCount();
                input3.setWaInputCount(recordcount); // Use the original full record count

                LsRecordArea inputrec = new LsRecordArea();
                inputrec.setLsRecordArea(inpcommonarea);

                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                JvmArrayOutputOut output3 = new JvmArrayOutputOut();

                RunUnit1.Call("JVMAVBL", input1.get_Reference(), input3.get_Reference(), input2.get_Reference(),
                        output1.get_Reference(), output2.get_Reference(),
                        output3.get_Reference(), inputrec.get_Reference(), connection);

                localErrno = output1.getLs400OutputErrorNumber();
                localOutResponse = output3.getJvmArrayOutputOut();
                logger.info("OUTResponse::::::::::::::" + localOutResponse);

                if (!"0000".equals(localErrno)) {
                    if ("155".equals(localErrno) || "0155".equals(localErrno)) {
                        localErrno = "0155";
                    } else {
                        localErrno = "0000"; // Ignore error and return empty
                        logger.info("RECORD NOT FOUND IN INVM");
                    }
                }

            } catch (SQLException e) {
                logger.error("SQL Exception: " + e.getMessage(), e);
                localErrno = "3293";
            }

            if (localOutResponse == null || localOutResponse.trim().isEmpty()) {
                localErrno = "0188";
            }

            List<String> partialRes = new ArrayList<>();
            partialRes.add(localOutResponse != null ? localOutResponse.trim() : "");
            partialRes.add(String.valueOf(chunk.size()));
            partialRes.add(localErrno);

            return partialRes;
        }, executor);

        futures.add(future);
    }

    StringBuilder combinedResponse = new StringBuilder();
    String finalErrno = "0000";

    for (CompletableFuture<List<String>> future : futures) {
        List<String> part = future.get();
        combinedResponse.append(part.get(0));
        if (!"0000".equals(part.get(2))) {
            finalErrno = part.get(2); // Save last non-zero error
        }
        fetchedRecordsCount += Integer.parseInt(part.get(1));
    }

    if (fetchedRecordsCount == 0) {
        finalErrno = "0188";
    }

    List<String> finalOut = new ArrayList<>();
    finalOut.add(combinedResponse.toString());
    finalOut.add(String.valueOf(fetchedRecordsCount));
    finalOut.add(finalErrno);

    executor.shutdown();

    logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);

    return finalOut;
}


-----

public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
    String errno = "";
    String outResponse = "";
    String recordcount = String.format("%03d", requestedNumberOfRecords);

    // Flatten the account list
    List<String> flatAccounts = new ArrayList<>();
    for (List<String> list : accountNumbers) {
        flatAccounts.addAll(list);
    }

    // Apply lacctno logic: skip all accounts up to and including lacctno
    if (!lacctno.equals("0000000000000000")) {
        int index = -1;
        for (int i = 0; i < flatAccounts.size(); i++) {
            if (String.format("%016d", new BigInteger(flatAccounts.get(i))).equals(lacctno)) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
            logger.info("Target account number found. Processing records below it");
        } else {
            logger.info("Target account number not found in the list.");
            return List.of("", "0", "0108"); // Error: account not found
        }
    }

    // Split accounts into manageable chunks
    int chunkSize = 10; // You can tune this for performance
    List<List<String>> chunks = new ArrayList<>();
    for (int i = 0; i < flatAccounts.size(); i += chunkSize) {
        chunks.add(flatAccounts.subList(i, Math.min(flatAccounts.size(), i + chunkSize)));
    }

    // Prepare parallel execution
    ExecutorService executor = Executors.newFixedThreadPool(Math.min(chunks.size(), 10));
    List<CompletableFuture<List<String>>> futures = new ArrayList<>();

    for (List<String> chunk : chunks) {
        CompletableFuture<List<String>> future = CompletableFuture.supplyAsync(() -> {
            String localErrno = "0000";
            String localOutResponse = "";
            RunUnit RunUnit1 = null;
            try (Connection connection = datasource.getConnection()) {
                JVMAVBL JVMAVBL = new JVMAVBL();
                RunUnit1 = new RunUnit();
                RunUnit1.Add(JVMAVBL);

                StringBuilder localBuilder = new StringBuilder();
                for (String acc : chunk) {
                    localBuilder.append(String.format("%016d", new BigInteger(acc)));
                }

                WaArrayAccount input1 = new WaArrayAccount();
                input1.setWaArrayAccount(localBuilder.toString());

                Ls400InpEnqType input2 = new Ls400InpEnqType();
                input2.setLs400InpEnqType("1");

                WaInputCount input3 = new WaInputCount();
                input3.setWaInputCount(recordcount);

                LsRecordArea inputrec = new LsRecordArea();
                inputrec.setLsRecordArea(inpcommonarea);

                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                JvmArrayOutputOut output3 = new JvmArrayOutputOut();

                RunUnit1.Call("JVMAVBL", input1.get_Reference(), input3.get_Reference(), input2.get_Reference(),
                        output1.get_Reference(), output2.get_Reference(),
                        output3.get_Reference(), inputrec.get_Reference(), connection);

                localErrno = output1.getLs400OutputErrorNumber();
                localOutResponse = output3.getJvmArrayOutputOut();
                logger.info("OUTResponse::::::::::::::" + localOutResponse);

                if (!"0000".equals(localErrno)) {
                    if ("155".equals(localErrno) || "0155".equals(localErrno)) {
                        localErrno = "0155";
                    } else {
                        localErrno = "0000";
                        logger.info("RECORD NOT FOUND IN INVM");
                    }
                }

            } catch (SQLException e) {
                logger.error("SQL Exception: " + e.getMessage(), e);
                localErrno = "3293";
            } finally {
                if (RunUnit1 != null) {
                    RunUnit1.close();
                }
            }

            if (localOutResponse == null || localOutResponse.trim().isEmpty()) {
                localErrno = "0188";
            }

            List<String> partialRes = new ArrayList<>();
            partialRes.add(localOutResponse != null ? localOutResponse.trim() : "");
            partialRes.add(String.valueOf(chunk.size()));
            partialRes.add(localErrno);
            return partialRes;

        }, executor);
        futures.add(future);
    }

    // Wait for all and combine results
    List<String> allResponses = new ArrayList<>();
    int totalFetched = 0;
    String finalErrno = "0000";

    for (CompletableFuture<List<String>> future : futures) {
        List<String> res = future.get();
        String partialOut = res.get(0);
        String partialCount = res.get(1);
        String partialErr = res.get(2);

        if (!partialOut.isEmpty()) {
            allResponses.add(partialOut);
        }

        totalFetched += Integer.parseInt(partialCount);
        if (!partialErr.equals("0000")) {
            finalErrno = partialErr;
        }
    }

    executor.shutdown();

    String combinedOutput = String.join("", allResponses);
    List<String> finalResult = new ArrayList<>();
    finalResult.add(combinedOutput);
    finalResult.add(String.valueOf(totalFetched));
    finalResult.add(finalErrno);

    logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
    return finalResult;
}