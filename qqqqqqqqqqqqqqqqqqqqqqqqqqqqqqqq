package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.*;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.db.model.Invm;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.*;

import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;

@RestController
public class BalanceEnqService_Child {

    @Autowired
    InvmDetailDayRepo invmRepo;

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    private static final RunUnit sharedRunUnit1;
    private static final JVMAVBL sharedJvmmre1;
    private static final RunUnit sharedRunUnit2;
    private static final JVMAVBL sharedJvmmre2;
    private static final Object lock1 = new Object();
    private static final Object lock2 = new Object();
    private static final AtomicInteger counter = new AtomicInteger(0);

    static {
        sharedRunUnit1 = new RunUnit();
        sharedJvmmre1 = new JVMAVBL();
        sharedRunUnit1.Add(sharedJvmmre1);

        sharedRunUnit2 = new RunUnit();
        sharedJvmmre2 = new JVMAVBL();
        sharedRunUnit2.Add(sharedJvmmre2);

        System.out.println("Shared RunUnits initialized.");
    }

    public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {
        String errno = "";
        StringBuilder allRecordsBuilder = new StringBuilder();
        int fetchedRecordsCount = 0;

        logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

        lacctno1 = lacctno1.substring(0, lacctno1.length() - 1);
        String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;

        if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
            int index = -1;
            for (int i = 0; i < accountNumbers.size(); i++) {
                if (accountNumbers.get(i).get(0).equals(lacctno)) {
                    index = i;
                    break;
                }
            }
            if (index != -1) {
                accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
                logger.info("Target account number found. Processing records below it");
            } else {
                logger.info("Target account number not found in the list.");
                return Arrays.asList("", "0", "0108");
            }
        }

        ExecutorService executor = Executors.newFixedThreadPool(10);
        List<Future<String>> futures = new ArrayList<>();

        for (List<String> nestedList : accountNumbers) {
            if (fetchedRecordsCount >= numberOfRecordsToFetch) break;
            BalanceFetchTask task = new BalanceFetchTask(nestedList, datasource, inpcommonarea, refno);
            futures.add(executor.submit(task));
            fetchedRecordsCount++;
        }

        for (Future<String> future : futures) {
            try {
                String response = future.get(2, TimeUnit.SECONDS); // Timeout per task
                if (!response.isEmpty()) {
                    allRecordsBuilder.append(response);
                }
            } catch (TimeoutException te) {
                logger.warn("COBOL call timeout.");
            } catch (Exception e) {
                logger.error("Task execution error", e);
            }
        }

        executor.shutdown();

        if (fetchedRecordsCount == 0) {
            errno = "0188";
        } else {
            errno = "0000";
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(errno);

        logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
        return res;
    }

    private class BalanceFetchTask implements Callable<String> {
        private final List<String> nestedList;
        private final DataSource datasource;
        private final String inpcommonarea;
        private final String refno;

        public BalanceFetchTask(List<String> nestedList, DataSource datasource, String inpcommonarea, String refno) {
            this.nestedList = nestedList;
            this.datasource = datasource;
            this.inpcommonarea = inpcommonarea;
            this.refno = refno;
        }

        @Override
        public String call() throws Exception {
            StringBuilder result = new StringBuilder();
            try (Connection connection = datasource.getConnection()) {
                String accountNumber = nestedList.get(0);
                String accttype = nestedList.get(1);
                String intcat = nestedList.get(2);

                Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
                Ls400InpEnqType input2 = new Ls400InpEnqType();
                Ls400InpAcctType input3 = new Ls400InpAcctType();
                Ls400InpIntCat input4 = new Ls400InpIntCat();
                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                Ls400OutputResponse output3 = new Ls400OutputResponse();
                LsRecordArea inputrec = new LsRecordArea();

                input1.setLs400InputAccountNumber(accountNumber);
                input2.setLs400InpEnqType("1");
                input3.setLs400InpAcctType(accttype);
                input4.setLs400InpIntCat(intcat);
                inputrec.setLsRecordArea(inpcommonarea);

                int threadIndex = counter.getAndIncrement() % 2;

                if (threadIndex == 0) {
                    synchronized (lock1) {
                        sharedRunUnit1.Call("JVMAVBL",
                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
                            output1.get_Reference(), output2.get_Reference(), output3.get_Reference(),
                            inputrec.get_Reference(), connection);
                    }
                } else {
                    synchronized (lock2) {
                        sharedRunUnit2.Call("JVMAVBL",
                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
                            output1.get_Reference(), output2.get_Reference(), output3.get_Reference(),
                            inputrec.get_Reference(), connection);
                    }
                }

                String errno = output1.getLs400OutputErrorNumber();
                if ("0000".equals(errno)) {
                    result.append(output3.getLs400OutputResponse().trim());
                    logger.info("Fetched record for account: " + accountNumber + " refno: " + refno);
                }

            } catch (SQLException e) {
                logger.error("DB error: " + nestedList.get(0), e);
            } catch (Exception e) {
                logger.error("COBOL call error: " + nestedList.get(0), e);
            }
            return result.toString();
        }
    }
}