package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;
import java.util.concurrent.*;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.db.model.Invm;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.*;

import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;

@RestController
public class BalanceEnqService_Child {

    @Autowired
    InvmDetailDayRepo invmRepo;

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    private static final RunUnit sharedRunUnit1;
    private static final JVMAVBL sharedJvmmre1;
    private static final RunUnit sharedRunUnit2;
    private static final JVMAVBL sharedJvmmre2;
    private static final Object lock1 = new Object();
    private static final Object lock2 = new Object();
    private static final AtomicInteger counter = new AtomicInteger(0);

    static {
        sharedRunUnit1 = new RunUnit();
        sharedJvmmre1 = new JVMAVBL();
        sharedRunUnit1.Add(sharedJvmmre1);

        sharedRunUnit2 = new RunUnit();
        sharedJvmmre2 = new JVMAVBL();
        sharedRunUnit2.Add(sharedJvmmre2);

        System.out.println("Shared RunUnits initialized.");
    }

    public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {
        String errno = "";
        StringBuilder allRecordsBuilder = new StringBuilder();
        int fetchedRecordsCount = 0;

        logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

        lacctno1 = lacctno1.substring(0, lacctno1.length() - 1);
        String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;

        if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
            int index = -1;
            for (int i = 0; i < accountNumbers.size(); i++) {
                if (accountNumbers.get(i).get(0).equals(lacctno)) {
                    index = i;
                    break;
                }
            }
            if (index != -1) {
                accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
                logger.info("Target account number found. Processing records below it");
            } else {
                logger.info("Target account number not found in the list.");
                return Arrays.asList("", "0", "0108");
            }
        }

        ExecutorService executor = Executors.newFixedThreadPool(10);
        List<Future<String>> futures = new ArrayList<>();

        for (List<String> nestedList : accountNumbers) {
            if (fetchedRecordsCount >= numberOfRecordsToFetch) break;
            BalanceFetchTask task = new BalanceFetchTask(nestedList, datasource, inpcommonarea, refno);
            futures.add(executor.submit(task));
            fetchedRecordsCount++;
        }

        for (Future<String> future : futures) {
            try {
                String response = future.get(2, TimeUnit.SECONDS); // Timeout per task
                if (!response.isEmpty()) {
                    allRecordsBuilder.append(response);
                }
            } catch (TimeoutException te) {
                logger.warn("COBOL call timeout.");
            } catch (Exception e) {
                logger.error("Task execution error", e);
            }
        }

        executor.shutdown();

        if (fetchedRecordsCount == 0) {
            errno = "0188";
        } else {
            errno = "0000";
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(errno);

        logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
        return res;
    }

    private class BalanceFetchTask implements Callable<String> {
        private final List<String> nestedList;
        private final DataSource datasource;
        private final String inpcommonarea;
        private final String refno;

        public BalanceFetchTask(List<String> nestedList, DataSource datasource, String inpcommonarea, String refno) {
            this.nestedList = nestedList;
            this.datasource = datasource;
            this.inpcommonarea = inpcommonarea;
            this.refno = refno;
        }

        @Override
        public String call() throws Exception {
            StringBuilder result = new StringBuilder();
            try (Connection connection = datasource.getConnection()) {
                String accountNumber = nestedList.get(0);
                String accttype = nestedList.get(1);
                String intcat = nestedList.get(2);

                Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
                Ls400InpEnqType input2 = new Ls400InpEnqType();
                Ls400InpAcctType input3 = new Ls400InpAcctType();
                Ls400InpIntCat input4 = new Ls400InpIntCat();
                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                Ls400OutputResponse output3 = new Ls400OutputResponse();
                LsRecordArea inputrec = new LsRecordArea();

                input1.setLs400InputAccountNumber(accountNumber);
                input2.setLs400InpEnqType("1");
                input3.setLs400InpAcctType(accttype);
                input4.setLs400InpIntCat(intcat);
                inputrec.setLsRecordArea(inpcommonarea);

                int threadIndex = counter.getAndIncrement() % 2;

                if (threadIndex == 0) {
                    synchronized (lock1) {
                        sharedRunUnit1.Call("JVMAVBL",
                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
                            output1.get_Reference(), output2.get_Reference(), output3.get_Reference(),
                            inputrec.get_Reference(), connection);
                    }
                } else {
                    synchronized (lock2) {
                        sharedRunUnit2.Call("JVMAVBL",
                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
                            output1.get_Reference(), output2.get_Reference(), output3.get_Reference(),
                            inputrec.get_Reference(), connection);
                    }
                }

                String errno = output1.getLs400OutputErrorNumber();
                if ("0000".equals(errno)) {
                    result.append(output3.getLs400OutputResponse().trim());
                    logger.info("Fetched record for account: " + accountNumber + " refno: " + refno);
                }

            } catch (SQLException e) {
                logger.error("DB error: " + nestedList.get(0), e);
            } catch (Exception e) {
                logger.error("COBOL call error: " + nestedList.get(0), e);
            }
            return result.toString();
        }
    }
}


-----------

package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpIntCat;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputResponse;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.LsRecordArea;
import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;

@RestController
public class BalanceEnqService_Child {

    @Autowired
    InvmDetailDayRepo invmRepo;

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    private static RunUnit sharedRunUnit1;
    private static JVMAVBL sharedJvmmre1;

    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvmmre1 = new JVMAVBL();
            sharedRunUnit1.Add(sharedJvmmre1);
            System.out.println("Shared RunUnit1 initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> Balance_Enquiry_Child(List<String> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {

        String errno = "";
        String outResponse = "";

        logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

        // Format last account number
        if (lacctno1 != null && lacctno1.length() > 0) {
            lacctno1 = lacctno1.substring(0, lacctno1.length() - 1);
            lacctno1 = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
        }

        // Filter account list based on last account
        if (lacctno1 != null && !lacctno1.isEmpty() && !lacctno1.equals("0000000000000000")) {
            int index = accountNumbers.indexOf(lacctno1);
            if (index != -1) {
                accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
                logger.info("Processing accounts below last account number: {}", lacctno1);
            } else {
                logger.info("Last account number not found in the list.");
                List<String> errorRes = new ArrayList<>();
                errorRes.add("");
                errorRes.add("0");
                errorRes.add("0108"); // Not found
                return errorRes;
            }
        }

        if (accountNumbers == null || accountNumbers.isEmpty()) {
            logger.info("No accounts to process.");
            List<String> res = new ArrayList<>();
            res.add("");
            res.add("0");
            res.add("0188"); // No records
            return res;
        }

        // Create single grouped input string
        StringBuilder grouped = new StringBuilder();
        for (String acc : accountNumbers) {
            if (acc != null && acc.trim().length() == 16) {
                grouped.append("003").append(acc); // Format as needed
            }
        }

        // Prepare input/output params
        JVMAVBL jvmavbl = new JVMAVBL();
        Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
        Ls400InpEnqType input2 = new Ls400InpEnqType();
        Ls400InpIntCat input4 = new Ls400InpIntCat();
        Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
        Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
        Ls400OutputResponse output3 = new Ls400OutputResponse();
        LsRecordArea inputrec = new LsRecordArea();

        input1.setLs400InputAccountNumber(grouped.toString());
        input2.setLs400InpEnqType("1");
        input4.setLs400InpIntCat(String.valueOf(requestedNumberOfRecords));
        inputrec.setLsRecordArea(inpcommonarea);

        try (Connection connection = datasource.getConnection()) {
            sharedRunUnit1.Call("JVMAVBL",
                    input1.get_Reference(),
                    input2.get_Reference(),
                    null,
                    input4.get_Reference(),
                    output1.get_Reference(),
                    output2.get_Reference(),
                    output3.get_Reference(),
                    inputrec.get_Reference(),
                    connection);

            errno = output1.getLs400OutputErrorNumber();
            outResponse = output3.getLs400OutputResponse();

        } catch (SQLException e) {
            logger.error("SQL Exception during COBOL call", e);
            errno = "3293";
        }

        if (StringUtils.isBlank(outResponse)) {
            errno = "0188";
        }

        List<String> res = new ArrayList<>();
        res.add(outResponse != null ? outResponse.trim() : "");
        res.add("1"); // One call made
        res.add(errno);

        logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
        return res;
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}


77777777

public List<String> Balance_Enquiry_Child(List<List<String>> invm, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
    String errno = "";
    String outResponse = "";

    // Flatten the invm structure
    List<String> flatAccounts = new ArrayList<>();
    for (List<String> list : invm) {
        flatAccounts.addAll(list);
    }

    // Apply lacctno logic: skip all accounts up to and including lacctno
    if (!lacctno.equals("0000000000000000")) {
        int index = -1;
        for (int i = 0; i < flatAccounts.size(); i++) {
            if (String.format("%016d", new BigInteger(flatAccounts.get(i))).equals(lacctno)) {
                index = i;
                break;
            }
        }
        if (index != -1) {
            flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
            logger.info("Target account number found. Processing records below it");
        } else {
            logger.info("Target account number not found in the list.");
            return List.of("", "0", "0108"); // Error: account not found
        }
    }

    // Format account numbers to 16-digit strings and combine
    StringBuilder accNumbersBuilder = new StringBuilder();
    for (String acc : flatAccounts) {
        accNumbersBuilder.append(String.format("%016d", new BigInteger(acc)));
    }

    // Set up COBOL input/output structures
    Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
    Ls400InpEnqType input2 = new Ls400InpEnqType();
    Ls400InpAcctType input3 = new Ls400InpAcctType();
    Ls400InpIntCat input4 = new Ls400InpIntCat();
    Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
    Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
    Ls400OutputResponse output3 = new Ls400OutputResponse();
    LsRecordArea inputrec = new LsRecordArea();

    input1.setLs400InputAccountNumber(accNumbersBuilder.toString());
    input2.setLs400InpEnqType("1");
    input4.setLs400InpIntCat(String.valueOf(requestedNumberOfRecords));
    inputrec.setLsRecordArea(inpcommonarea);

    int fetchedRecordsCount = 0;
    StringBuilder allRecordsBuilder = new StringBuilder();

    try (Connection connection = datasource.getConnection()) {
        sharedRunUnit1.Call("JVMAVBL", input1.get_Reference(), input2.get_Reference(), input3.get_Reference(),
                input4.get_Reference(), output1.get_Reference(), output2.get_Reference(),
                output3.get_Reference(), inputrec.get_Reference(), connection);

        errno = output1.getLs400OutputErrorNumber();
        outResponse = output3.getLs400OutputResponse();

        if ("0000".equals(errno)) {
            if (outResponse != null && !outResponse.trim().isEmpty()) {
                allRecordsBuilder.append(outResponse.trim());
                fetchedRecordsCount++; // Optional: increment if parsing multiple records
            }
        } else if ("155".equals(errno) || "0155".equals(errno)) {
            errno = "0155";
        } else {
            errno = "0000"; // Ignore error and return empty
            logger.info("RECORD NOT FOUND IN INVM");
        }

    } catch (SQLException e) {
        logger.error("SQL Exception: " + e.getMessage(), e);
        errno = "3293";
    }

    if (fetchedRecordsCount == 0) {
        errno = "0188";
    }

    List<String> res = new ArrayList<>();
    res.add(allRecordsBuilder.toString());
    res.add(String.valueOf(fetchedRecordsCount));
    res.add(errno);

    logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);

    return res;
}


-----------------------------------------------

////           SBI Core Banking Project, Hyderabad, India.          *
////*****************************************************************
////                                                                *
////  	           PROGRAM - BalanceEnqService_Child.Java                 
////                                                                *
////*****************************************************************
////                 P R O G R A M    H I S T O R Y                 *
////                                                                *
////   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
////----------------------------------------------------------------*
////Naga Sai Ganesh  : 27/11/2024    : 24090013  :  MICROSERVICES   *
////Niharika Tammana : 27/11/2024    : 24090013  :  MICROSERVICES   *
////----------------------------------------------------------------*
////Naga Sai Ganesh : 11/12/2024    :  24120051  :   MICROSERVICES  *
////Niharika Tammana : 11/12/2024    : 24120051  :  MICROSERVICES   *
////----------------------------------------------------------------*
//package com.tcs.bancs.microservices.services;
//
//import java.math.BigInteger;
//import java.sql.Connection;
//import java.sql.SQLException;
//import java.util.ArrayList;
//import java.util.List;
//
//import javax.sql.DataSource;
//
//import org.apache.commons.lang.StringUtils;
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.stereotype.Controller;
//import org.springframework.stereotype.Service;
//import org.springframework.web.bind.annotation.RestController;
//
//import com.microfocus.cobol.runtimeservices.RunUnit;
//import com.tcs.bancs.microservices.db.model.Invm;
//import com.tcs.bancs.microservices.db.model.Telm;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.LsRecordArea;
//import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;
//import com.tcs.bancs.microservices.util.DBProcess;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400AccountActiveFlag;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpAcctType;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InputAccountNumber;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpEnqType;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpIntCat;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputErrorNumber;
//import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputResponse;
//
//@RestController
//public class BalanceEnqService_Child {
//
//	
//	@Autowired
//	InvmDetailDayRepo invmRepo;
//	
//    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
//   Connection connection;
//
//   private static RunUnit sharedRunUnit1;
//   private static  JVMAVBL sharedJvmmre1; 
//   
//   static {
//       try {
//           sharedRunUnit1 = new RunUnit();
//           sharedJvmmre1 = new JVMAVBL();
//           sharedRunUnit1.Add(sharedJvmmre1);
//           System.out.println("Shared RunUnit1 initialized.");
//
//       } catch (Exception e) {
//           e.printStackTrace();
//       }
//   }
//   
//    public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {
////        boolean isEvenTransaction = (Integer.parseInt(refno) % 2 == 0);
////        RunUnit selectedRunUnit = isEvenTransaction ? sharedRunUnit1 : sharedRunUnit2;
////        String runUnitName = isEvenTransaction ? "RunUnit1" : "RunUnit2";
////
////        synchronized (selectedRunUnit) {
//    	String errno = new String();
//    	String outResponse = new String();
//    	List<Invm> invm = new ArrayList<>();
//    	
//    	logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);
//        lacctno1 = lacctno1.substring(0, lacctno1.length()-1);
//        String lacctno =  lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
//        
//        // Split the input account number into chunks of 16 digits
////        List<String> accountNumbers = splitIntoChunks(accno, 16);
////        
////        
////        ArrayList<Object> queryParamsInvm = new ArrayList<>();
////		
////		queryParamsInvm.add(accountNumbers);
//		
//		//invm = dbProcess.fetchRepositories(null, "INVM", "InvmDetail", "findByInvmDetails", false,true, queryParamsInvm);
////		
////		logger.info("filtered lists " + invm);
//
//        //Limit to the first Three two one Records
//
////        if (accountNumbers.size()>321) {
////              
////              accountNumbers = accountNumbers.subList(0, 321);
////
////        }
//        
//        //CURR STATUS
//        
//
//        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;
//        StringBuilder allRecordsBuilder = new StringBuilder();
//        int fetchedRecordsCount = 0;
//
//        // If a target account number is provided, find it
//        if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
//            int index = accountNumbers.indexOf(lacctno);
//            if (index != -1) {
//                accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
//                logger.info("Target account number found. Processing records below it" );
//            } else {
//                logger.info("Target account number not found in the list.");
//                // Return error code if account number is not found
//                List<String> errorRes = new ArrayList<>();
//                errorRes.add("");
//                errorRes.add("0");
//                errorRes.add("0108");  // Error code for not found account number
//                return errorRes;
//            }
//        }
//
//        // Process accounts sequentially
//        for (List<String> nestedList : accountNumbers) {
//        	logger.info("CALL TO JVM COBOL");
//        	String accountNumber = nestedList.get(0);
//        	String accttype = nestedList.get(1);
//        	String intcat = nestedList.get(2);
//            if (fetchedRecordsCount >= numberOfRecordsToFetch) {
//                break; // Stop processing if required number of records is fetched
//            }
//            JVMAVBL jvmavbl = new JVMAVBL();
//            // Create input and output objects for each account number
//            Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
//            Ls400InpEnqType input2 = new Ls400InpEnqType();
//            Ls400InpAcctType input3 = new Ls400InpAcctType();
//            Ls400InpIntCat   input4 = new Ls400InpIntCat();
//            Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
//            Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
//            Ls400OutputResponse output3 = new Ls400OutputResponse();
//            LsRecordArea   inputrec = new LsRecordArea();
////            logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + input8);
//            // Set input parameters
//            input1.setLs400InputAccountNumber(accountNumber);
//            input2.setLs400InpEnqType("1");
//            input3.setLs400InpAcctType(accttype);
//            input4.setLs400InpIntCat(intcat);
//            inputrec.setLsRecordArea(inpcommonarea);
////            logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + driverclass);
////            logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + connection);
//            try (Connection connection = datasource.getConnection()){
//				//connection = datasource.getConnection();
////            RunUnit run1 = new RunUnit();
////            run1.Add(jvmavbl);
////            
//            sharedRunUnit1.Call("JVMAVBL", input1.get_Reference(), input2.get_Reference(),  input3.get_Reference(),  input4.get_Reference(), output1.get_Reference(), output2.get_Reference(), output3.get_Reference(), inputrec.get_Reference(), connection);
//            // Call the JVMAVBL service
//            //jvmavbl.JVMAVBL(input1, input2, output1, output2, output3, connection, );
//
//            errno = output1.getLs400OutputErrorNumber();
//            outResponse = output3.getLs400OutputResponse();
//           
//            if (errno.equals("0000")) {
//            	errno = "0000";
//                if (outResponse != null && !outResponse.trim().isEmpty()) {
//                    allRecordsBuilder.append(outResponse.trim());
//                    logger.info(fetchedRecordsCount + "Record fetched successfully for account" + refno);
//                    fetchedRecordsCount++;                   
//                }
//            } 
//            else if(errno.equals("155") || errno.equals("0155")){
//            	errno = "0155";
//                break;
//            }
//            else {
//            	errno = "0000";
//            	logger.info("RECORD NOT FOUND IN INVM");
//            }
////            run1.close();
//            } catch (SQLException e) {
//            	//START OF IR 25010209
////            		errno = "VC010";
//            		errno = "3293";
//            	//END OF IR 25010209
//			}
//        }
//
//        // Prepare response
//        if(fetchedRecordsCount == 0) {
//        	errno = "0188";
//        }
//        List<String> res = new ArrayList<>();
//        res.add(allRecordsBuilder.toString());
//        res.add(String.valueOf(fetchedRecordsCount));
//        res.add(errno); // Return success only if records are fetched
//
//        logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
//        
//        return res;
//    }
////}
//    
//    private List<String> splitIntoChunks(String input, int chunkSize) {
//        List<String> chunks = new ArrayList<>();
//        for (int i = 0; i < input.length(); i += chunkSize) {
//            int end = Math.min(input.length(), i + chunkSize);
//            String chunk = input.substring(i, end).trim();
//            // Add only non-empty, non-zero chunks
//            if (!chunk.isEmpty() && !chunk.matches("^0+$")) {
//                chunks.add("003" + chunk);
//            }
//        }
//        return chunks;
//    }
//
//    public class ResponseData {
//        String outResponse;
//        String errno;
//    }
//}
//
//
//
////package com.tcs.bancs.microservices.services;
////
////import java.math.BigInteger;
////import java.sql.Connection;
////import java.sql.SQLException;
////import java.util.*;
////import java.util.concurrent.*;
////import java.util.concurrent.atomic.AtomicInteger;
////
////import javax.sql.DataSource;
////
////import org.slf4j.Logger;
////import org.slf4j.LoggerFactory;
////import org.springframework.beans.factory.annotation.Autowired;
////import org.springframework.web.bind.annotation.RestController;
////
////import com.microfocus.cobol.runtimeservices.RunUnit;
////import com.tcs.bancs.microservices.db.model.Invm;
////import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
////import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.*;
////
////import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;
////
////@RestController
////public class BalanceEnqService_Child {
////
////    @Autowired
////    InvmDetailDayRepo invmRepo;
////
////    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
////
////    private static final RunUnit sharedRunUnit1;
////    private static final JVMAVBL sharedJvmmre1;
////    private static final RunUnit sharedRunUnit2;
////    private static final JVMAVBL sharedJvmmre2;
////    private static final Object lock1 = new Object();
////    private static final Object lock2 = new Object();
////    private static final AtomicInteger counter = new AtomicInteger(0);
////
////    static {
////        sharedRunUnit1 = new RunUnit();
////        sharedJvmmre1 = new JVMAVBL();
////        sharedRunUnit1.Add(sharedJvmmre1);
////
////        sharedRunUnit2 = new RunUnit();
////        sharedJvmmre2 = new JVMAVBL();
////        sharedRunUnit2.Add(sharedJvmmre2);
////
////        System.out.println("Shared RunUnits initialized.");
////    }
////
////    public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {
////        String errno = "";
////        StringBuilder allRecordsBuilder = new StringBuilder();
////        int fetchedRecordsCount = 0;
////
////        logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);
////
////        lacctno1 = lacctno1.substring(0, lacctno1.length() - 1);
////        String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
////        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;
////
////        if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
////            int index = -1;
////            for (int i = 0; i < accountNumbers.size(); i++) {
////                if (accountNumbers.get(i).get(0).equals(lacctno)) {
////                    index = i;
////                    break;
////                }
////            }
////            if (index != -1) {
////                accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
////                logger.info("Target account number found. Processing records below it");
////            } else {
////                logger.info("Target account number not found in the list.");
////                return Arrays.asList("", "0", "0108");
////            }
////        }
////
////        ExecutorService executor = Executors.newFixedThreadPool(10);
////        List<Future<String>> futures = new ArrayList<>();
////
////        for (List<String> nestedList : accountNumbers) {
////            if (fetchedRecordsCount >= numberOfRecordsToFetch) break;
////            BalanceFetchTask task = new BalanceFetchTask(nestedList, datasource, inpcommonarea, refno);
////            futures.add(executor.submit(task));
////            fetchedRecordsCount++;
////        }
////
////        for (Future<String> future : futures) {
////            try {
////                String response = future.get(2, TimeUnit.SECONDS); // Timeout per task
////                if (!response.isEmpty()) {
////                    allRecordsBuilder.append(response);
////                }
////            } catch (TimeoutException te) {
////                logger.warn("COBOL call timeout.");
////            } catch (Exception e) {
////                logger.error("Task execution error", e);
////            }
////        }
////
////        executor.shutdown();
////
////        if (fetchedRecordsCount == 0) {
////            errno = "0188";
////        } else {
////            errno = "0000";
////        }
////
////        List<String> res = new ArrayList<>();
////        res.add(allRecordsBuilder.toString());
////        res.add(String.valueOf(fetchedRecordsCount));
////        res.add(errno);
////
////        logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
////        return res;
////    }
////
////    private class BalanceFetchTask implements Callable<String> {
////        private final List<String> nestedList;
////        private final DataSource datasource;
////        private final String inpcommonarea;
////        private final String refno;
////
////        public BalanceFetchTask(List<String> nestedList, DataSource datasource, String inpcommonarea, String refno) {
////            this.nestedList = nestedList;
////            this.datasource = datasource;
////            this.inpcommonarea = inpcommonarea;
////            this.refno = refno;
////        }
////
////        @Override
////        public String call() throws Exception {
////            StringBuilder result = new StringBuilder();
////            try (Connection connection = datasource.getConnection()) {
////                String accountNumber = nestedList.get(0);
////                String accttype = nestedList.get(1);
////                String intcat = nestedList.get(2);
////
////                Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
////                Ls400InpEnqType input2 = new Ls400InpEnqType();
////                Ls400InpAcctType input3 = new Ls400InpAcctType();
////                Ls400InpIntCat input4 = new Ls400InpIntCat();
////                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
////                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
////                Ls400OutputResponse output3 = new Ls400OutputResponse();
////                LsRecordArea inputrec = new LsRecordArea();
////
////                input1.setLs400InputAccountNumber(accountNumber);
////                input2.setLs400InpEnqType("1");
////                input3.setLs400InpAcctType(accttype);
////                input4.setLs400InpIntCat(intcat);
////                inputrec.setLsRecordArea(inpcommonarea);
////
////                int threadIndex = counter.getAndIncrement() % 2;
////
////                if (threadIndex == 0) {
////                    synchronized (lock1) {
////                        sharedRunUnit1.Call("JVMAVBL",
////                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
////                            output1.get_Reference(), output2.get_Reference(), output3.get_Reference(),
////                            inputrec.get_Reference(), connection);
////                    }
////                } else {
////                    synchronized (lock2) {
////                        sharedRunUnit2.Call("JVMAVBL",
////                            input1.get_Reference(), input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
////                            output1.get_Reference(), output2.get_Reference(), output3.get_Reference(),
////                            inputrec.get_Reference(), connection);
////                    }
////                }
////
////                String errno = output1.getLs400OutputErrorNumber();
////                if ("0000".equals(errno)) {
////                    result.append(output3.getLs400OutputResponse().trim());
////                    logger.info("Fetched record for account: " + accountNumber + " refno: " + refno);
////                }
////
////            } catch (SQLException e) {
////                logger.error("DB error: " + nestedList.get(0), e);
////            } catch (Exception e) {
////                logger.error("COBOL call error: " + nestedList.get(0), e);
////            }
////            return result.toString();
////        }
////    }
////}


package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RestController;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.JvmArrayOutputOut;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.LsRecordArea;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.WaArrayAccount;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.WaInputCount;
import com.tcs.bancs.microservices.repository.day.InvmDetailDayRepo;

@RestController
public class BalanceEnqService_Child {

    @Autowired
    InvmDetailDayRepo invmRepo;

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    private static RunUnit sharedRunUnit1;
    private static JVMAVBL sharedJvmmre1;

    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvmmre1 = new JVMAVBL();
            sharedRunUnit1.Add(sharedJvmmre1);
            System.out.println("Shared RunUnit1 initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> Balance_Enquiry_Child(List<List<String>> accountNumbers, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) throws Exception {

    	    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    	    logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);

    	    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
    	    String errno = "";
    	    String outResponse = "";
    	    String recordcount = String.format("%03d", requestedNumberOfRecords);
    	    // Flatten the invm structure
    	    List<String> flatAccounts = new ArrayList<>();
    	    for (List<String> list : accountNumbers) {
    	        flatAccounts.addAll(list);
    	    }

    	    // Apply lacctno logic: skip all accounts up to and including lacctno
    	    if (!lacctno.equals("0000000000000000")) {
    	        int index = -1;
    	        for (int i = 0; i < flatAccounts.size(); i++) {
    	            if (String.format("%016d", new BigInteger(flatAccounts.get(i))).equals(lacctno)) {
    	                index = i;
    	                break;
    	            }
    	        }
    	        if (index != -1) {
    	            flatAccounts = flatAccounts.subList(index + 1, flatAccounts.size());
    	            logger.info("Target account number found. Processing records below it");
    	        } else {
    	            logger.info("Target account number not found in the list.");
    	            return List.of("", "0", "0108"); // Error: account not found
    	        }
    	    }

    	    // Format account numbers to 16-digit strings and combine
    	    StringBuilder accNumbersBuilder = new StringBuilder();
    	    for (String acc : flatAccounts) {
    	        accNumbersBuilder.append(String.format("%016d", new BigInteger(acc)));
    	    }

    	    // Set up COBOL input/output structures
    	    WaArrayAccount input1 = new WaArrayAccount();
    	    Ls400InpEnqType input2 = new Ls400InpEnqType();
    	    WaInputCount input3 = new WaInputCount();
    	    Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
    	    Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
    	    JvmArrayOutputOut output3 = new JvmArrayOutputOut();
    	    LsRecordArea inputrec = new LsRecordArea();

    	    input1.setWaArrayAccount(accNumbersBuilder.toString());
    	    input2.setLs400InpEnqType("1");
    	    input3.setWaInputCount(recordcount);
    	    inputrec.setLsRecordArea(inpcommonarea);

    	    int fetchedRecordsCount = 0;
    	    StringBuilder allRecordsBuilder = new StringBuilder();

    	    try (Connection connection = datasource.getConnection()) {
    	        sharedRunUnit1.Call("JVMAVBL", input1.get_Reference(), input3.get_Reference(), input2.get_Reference(),
    	        		output1.get_Reference(), output2.get_Reference(),
    	                output3.get_Reference(), inputrec.get_Reference(), connection);

    	        errno = output1.getLs400OutputErrorNumber();
    	        outResponse = output3.getJvmArrayOutputOut();

    	        if ("0000".equals(errno)) {
    	            if (outResponse != null && !outResponse.trim().isEmpty()) {
    	                allRecordsBuilder.append(outResponse.trim());
    	                fetchedRecordsCount++; // Optional: increment if parsing multiple records
    	            }
    	        } else if ("155".equals(errno) || "0155".equals(errno)) {
    	            errno = "0155";
    	        } else {
    	            errno = "0000"; // Ignore error and return empty
    	            logger.info("RECORD NOT FOUND IN INVM");
    	        }

    	    } catch (SQLException e) {
    	        logger.error("SQL Exception: " + e.getMessage(), e);
    	        errno = "3293";
    	    }

    	    if (fetchedRecordsCount == 0) {
    	        errno = "0188";
    	    }

    	    List<String> res = new ArrayList<>();
    	    res.add(allRecordsBuilder.toString());
    	    res.add(String.valueOf(fetchedRecordsCount));
    	    res.add(errno);

    	    logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);

    	    return res;
    	}

    public class ResponseData {
        String outResponse;
        String errno;
    }
}
