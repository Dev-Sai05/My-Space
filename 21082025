k1. Your idea title

👉 AI Code Reviewer & Unit Test Generator


---

2. Brief summary of your idea

👉 An AI-powered tool that reviews source code for best practices, performance, and security issues, and automatically generates unit test cases (e.g., JUnit for Java). It reduces manual effort in code reviews and test writing, accelerates development cycles, and improves overall code quality.


---

3. Challenges/Business opportunity being addressed

👉 Code reviews and test case writing are time-consuming, inconsistent, and often delayed in large projects. This leads to longer delivery cycles, higher defect leakage, and quality issues. Automating this process with AI improves developer productivity, reduces manual errors, and ensures consistent quality standards across TCS and multiple client domains.


---

4. Novelty of the idea / Stand-out factor

👉 Unlike traditional static code analyzers, this solution uses AI/LLMs to provide context-aware, human-like review suggestions and automatically generates relevant unit test cases. It goes beyond syntax checking by offering performance, security, and maintainability recommendations. The integration of code review + test generation in a single solution makes it unique and impactful.


---

5. Highlight relevance to Responsible AI principles such as Security, Fairness, Privacy & Legal parameters

👉 *The tool is designed with Responsible AI principles:

Security: Highlights insecure code patterns (e.g., SQL injection, weak encryption).

Fairness: Provides objective, unbiased reviews based on best practices, not individual coding style.

Privacy: No sensitive client data needs to be shared; the model works on code structure and logic.

Legal/Compliance: Supports secure deployment within TCS/private cloud to ensure client data protection.*



IDENTIFICATION DIVISION.
       PROGRAM-ID. TEST-SFTP.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 HOST           PIC X(50) VALUE "127.0.0.1".
       77 PORT           PIC 9(5)   VALUE 22.
       77 USERNAME       PIC X(30) VALUE "testuser".
       77 PASSWORD       PIC X(30) VALUE "testpass".
       77 RESULT         PIC S9(9) COMP-5 VALUE 0.

       PROCEDURE DIVISION.
       MAIN-LOGIC.
           DISPLAY "Connecting to SFTP Server..."
           
           CALL "sftp_connect"
                USING HOST, PORT, USERNAME, PASSWORD
                RETURNING RESULT
           
           IF RESULT = 0
              DISPLAY "✅ Connection successful!"
           ELSE
              DISPLAY "❌ Connection failed, code: " RESULT
           END-IF.

           STOP RUN.


IDENTIFICATION DIVISION.
       PROGRAM-ID. TEST-SFTP.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 HOST           PIC X(50) VALUE "127.0.0.1".
       77 PORT           PIC 9(5)   VALUE 22.
       77 USERNAME       PIC X(30) VALUE "testuser".
       77 PASSWORD       PIC X(30) VALUE "testpass".
       77 RESULT         PIC S9(9) COMP-5 VALUE 0.

       PROCEDURE DIVISION.
       MAIN-LOGIC.
           DISPLAY "Connecting to SFTP Server..."
           
           PERFORM SFTP-CONNECT
           
           IF RESULT = 0
              DISPLAY "✅ Connection successful!"
           ELSE
              DISPLAY "❌ Connection failed, code: " RESULT
           END-IF

           STOP RUN.

       SFTP-CONNECT.
           * Dummy logic for testing only
           IF HOST = "127.0.0.1" AND PORT = 22
              MOVE 0 TO RESULT
           ELSE
              MOVE 1 TO RESULT
           END-IF.



IDENTIFICATION DIVISION.
       PROGRAM-ID. SFTPCONNECT.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 HOSTNAME      PIC X(50) VALUE "your.server.com".
       01 USERNAME      PIC X(30) VALUE "youruser".
       01 PORT          PIC 9(5)  VALUE 22.

       01 COMMAND       PIC X(200).
       01 WS-CMD-LEN    PIC 9(4) COMP-5.

       PROCEDURE DIVISION.
           *> Build SSH command with port
           STRING "ssh -p "
                  PORT DELIMITED BY SPACE
                  " " DELIMITED BY SIZE
                  USERNAME DELIMITED BY SPACE
                  "@" DELIMITED BY SIZE
                  HOSTNAME DELIMITED BY SIZE
                  INTO COMMAND
           END-STRING

           DISPLAY "Command = [" COMMAND "]".

           *> Get length of command (JVM COBOL)
           COMPUTE WS-CMD-LEN = FUNCTION LENGTH(TRIM(COMMAND))

           DISPLAY "Command length = " WS-CMD-LEN.

           *> Run the command
           CALL "SYSTEM" USING COMMAND

           GOBACK.