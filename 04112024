package com.tcs.bancs.microservices.services;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;

public class BalanceEnqService_Child {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    JVMAVBL jvmavbl = new JVMAVBL();

    public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords, String accountno) {
        logger.info("Starting Balance Enquiry Child Service...");

        // Split the input account number into chunks of 16 digits
        List<String> accountNumbers = splitIntoChunks(accno, 16);
        logger.info("Account Numbers to process: " + accountNumbers);

        if (accountNumbers.isEmpty()) {
            logger.error("Invalid account number input.");
            return List.of("No valid account numbers", "0", "ERROR");
        }

        int numberOfRecordsToFetch = Math.max(requestedNumberOfRecords, 30); // Default to 30 if requested is <= 0

        // If accountno is provided, check its presence and fetch records below it
        if (accountno != null && !accountno.isEmpty()) {
            int index = accountNumbers.indexOf(accountno);
            if (index != -1) {
                int endIndex = Math.min(index + numberOfRecordsToFetch + 1, accountNumbers.size());
                logger.info("Target account number found. Fetching records below it.");
                List<String> result = accountNumbers.subList(index + 1, endIndex);
                logger.info("Records fetched for the given account number: " + result);
                return processRecordsSequentially(result);
            } else {
                logger.warn("Target account number not found in the input. Throwing error 7998.");
                return List.of("", "0", "7998");
            }
        }

        // If no accountno is provided, follow the existing flow
        logger.info("No target account number provided. Returning top records.");
        List<String> result = accountNumbers.subList(0, Math.min(numberOfRecordsToFetch, accountNumbers.size()));
        logger.info("Records fetched without a target account number: " + result);
        return processRecordsSequentially(result);
    }

    private List<String> processRecordsSequentially(List<String> accountNumbers) {
        StringBuilder allRecordsBuilder = new StringBuilder();
        int fetchedRecordsCount = 0;

        for (String accountNumber : accountNumbers) {
            // Create input and output objects for each account number
            Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
            Ls400InpEnqType input2 = new Ls400InpEnqType();
            Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
            Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
            Ls400OutputResponse output3 = new Ls400OutputResponse();

            // Set input parameters
            input1.setLs400InputAccountNumber(accountNumber);
            input2.setLs400InpEnqType("1");

            // Call the JVMAVBL service
            jvmavbl.JVMAVBL(input1, input2, output1, output2, output3);

            String errno = output1.getLs400OutputErrorNumber();
            String outResponse = output3.getLs400OutputResponse();

            if ("0000".equals(errno)) {
                if (outResponse != null && !outResponse.trim().isEmpty()) {
                    allRecordsBuilder.append(outResponse.trim());
                    fetchedRecordsCount++;
                    logger.info("Record fetched successfully for account: " + accountNumber);
                } else {
                    logger.warn("Empty response for account: " + accountNumber);
                }
            } else if ("7998".equals(errno)) {
                logger.warn("Error 7998 encountered for account: " + accountNumber + ". Stopping further processing.");
                break;
            } else {
                logger.warn("Error encountered for account: " + accountNumber + ", Error No: " + errno);
            }
        }

        // Prepare response
        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(fetchedRecordsCount > 0 ? "0000" : "ERROR"); // Return success only if records are fetched
        return res;
    }

    private List<String> splitIntoChunks(String input, int chunkSize) {
        List<String> chunks = new ArrayList<>();
        for (int i = 0; i < input.length(); i += chunkSize) {
            int end = Math.min(input.length(), i + chunkSize);
            chunks.add(input.substring(i, end));
        }
        return chunks;
    }
}