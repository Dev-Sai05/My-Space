package com.tcs.bancs.microservices.services;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;

public class BalanceEnqService_Child {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    JVMAVBL jvmavbl = new JVMAVBL();

    public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords) {
        logger.info("Starting Balance Enquiry Child Service...");

        // Split the input account number into chunks of 16 digits
        List<String> accountNumbers = splitIntoChunks(accno, 16);
        logger.info("Account Numbers to process: " + accountNumbers);

        if (accountNumbers.isEmpty()) {
            logger.error("Invalid account number input.");
            return List.of("No valid account numbers", "0", "ERROR");
        }
        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;
        StringBuilder allRecordsBuilder = new StringBuilder();
        int fetchedRecordsCount = 0;

        // Process accounts sequentially
        for (String accountNumber : accountNumbers) {
            if (fetchedRecordsCount >= numberOfRecordsToFetch) {
                break; // Stop processing if required number of records is fetched
            }

            // Create input and output objects for each account number
            Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
            Ls400InpEnqType input2 = new Ls400InpEnqType();
            Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
            Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
            Ls400OutputResponse output3 = new Ls400OutputResponse();

            // Set input parameters
            input1.setLs400InputAccountNumber(accountNumber);
            input2.setLs400InpEnqType("1");

            // Call the JVMAVBL service
            jvmavbl.JVMAVBL(input1, input2, output1, output2, output3);

            String errno = output1.getLs400OutputErrorNumber();
            String outResponse = output3.getLs400OutputResponse();

            if ("0000".equals(errno)) {
                if (outResponse != null && !outResponse.trim().isEmpty()) {
                    allRecordsBuilder.append(outResponse.trim());
                    fetchedRecordsCount++;
                    logger.info("Record fetched successfully for account: " + accountNumber);
                } else {
                    logger.info("Empty response for account: " + accountNumber);
                }
            } else if ("7998".equals(errno)) {
                logger.info("Error 7998 encountered for account: " + accountNumber + ". Stopping further processing.");
                break;
            } else {
                logger.info("Error encountered for account: " + accountNumber + ", Error No: " + errno);
            }
        }

        // Prepare response
        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(fetchedRecordsCount > 0 ? "0000" : "ERROR"); // Return success only if records are fetched

        logger.info("Balance Enquiry Child Service completed.");
        return res;
    }

    private List<String> splitIntoChunks(String input, int chunkSize) {
        List<String> chunks = new ArrayList<>();
        for (int i = 0; i < input.length(); i += chunkSize) {
            int end = Math.min(input.length(), i + chunkSize);
            chunks.add(input.substring(i, end));
        }
        return chunks;
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}




package com.tcs.bancs.microservices.services;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;

public class BalanceEnqService_Child {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    JVMAVBL jvmavbl = new JVMAVBL();

    public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords) {
        logger.info("Starting Balance Enquiry Child Service...");

        // Split the input account number into chunks of 16 digits
        List<String> accountNumbers = splitIntoChunks(accno, 16);
        logger.info("Account Numbers to process: " + accountNumbers);

        if (accountNumbers.isEmpty()) {
            logger.error("Invalid account number input.");
            return List.of("No valid account numbers", "0", "ERROR");
        }

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;
        StringBuilder allRecordsBuilder = new StringBuilder();
        int fetchedRecordsCount = 0;
        boolean accountFound = false; // Flag to check if the account number is found

        // Process accounts sequentially
        for (String accountNumber : accountNumbers) {
            if (fetchedRecordsCount >= numberOfRecordsToFetch) {
                break; // Stop processing if required number of records is fetched
            }

            // Create input and output objects for each account number
            Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
            Ls400InpEnqType input2 = new Ls400InpEnqType();
            Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
            Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
            Ls400OutputResponse output3 = new Ls400OutputResponse();

            // Set input parameters
            input1.setLs400InputAccountNumber(accountNumber);
            input2.setLs400InpEnqType("1");

            // Call the JVMAVBL service
            jvmavbl.JVMAVBL(input1, input2, output1, output2, output3);

            String errno = output1.getLs400OutputErrorNumber();
            String outResponse = output3.getLs400OutputResponse();

            if ("0000".equals(errno)) {
                if (outResponse != null && !outResponse.trim().isEmpty()) {
                    allRecordsBuilder.append(outResponse.trim());
                    fetchedRecordsCount++;
                    logger.info("Record fetched successfully for account: " + accountNumber);
                } else {
                    logger.info("Empty response for account: " + accountNumber);
                }
            } else if ("7998".equals(errno)) {
                logger.info("Error 7998 encountered for account: " + accountNumber + ". Stopping further processing.");
                break;
            } else {
                logger.info("Error encountered for account: " + accountNumber + ", Error No: " + errno);
            }

            // Check if the provided account number exists in the processed records
            if (accno != null && !accno.isEmpty() && accountNumber.equals(accno)) {
                accountFound = true;
            }
        }

        // If account number is provided and not found, throw error 7998
        if (accountFound) {
            List<String> result = processBelowRecords(accno, allRecordsBuilder.toString(), fetchedRecordsCount, numberOfRecordsToFetch);
            return result;
        } else {
            if (accno != null && !accno.isEmpty()) {
                // If account number is not found, throw error 7998
                logger.info("Account number not found in the processed records. Throwing error 7998.");
                List<String> errorResponse = new ArrayList<>();
                errorResponse.add("Account number not found");
                errorResponse.add("7998");
                errorResponse.add("ERROR");
                return errorResponse;
            } else {
                // No account number provided, return the top records
                logger.info("No target account number provided. Returning top records.");
                List<String> result = new ArrayList<>();
                result.add(allRecordsBuilder.toString());
                result.add(String.valueOf(fetchedRecordsCount));
                result.add(fetchedRecordsCount > 0 ? "0000" : "ERROR");
                return result;
            }
        }
    }

    private List<String> processBelowRecords(String accno, String allRecords, int fetchedRecordsCount, int numberOfRecordsToFetch) {
        // Process the records after the given account number
        List<String> recordsList = new ArrayList<>();
        String[] allRecordsArray = allRecords.split("\n");
        int index = -1;

        // Find the index of the given account number
        for (int i = 0; i < allRecordsArray.length; i++) {
            if (allRecordsArray[i].contains(accno)) {
                index = i;
                break;
            }
        }

        if (index != -1) {
            // Return records below the given account number
            int endIndex = Math.min(index + numberOfRecordsToFetch + 1, allRecordsArray.length);
            for (int i = index + 1; i < endIndex; i++) {
                recordsList.add(allRecordsArray[i]);
            }
            logger.info("Returning records after account number: " + accno);
        } else {
            logger.warn("Account number not found in the records.");
            recordsList.add("Account number not found");
            recordsList.add("7998");
            recordsList.add("ERROR");
        }

        return recordsList;
    }

    private List<String> splitIntoChunks(String input, int chunkSize) {
        List<String> chunks = new ArrayList<>();
        for (int i = 0; i < input.length(); i += chunkSize) {
            int end = Math.min(input.length(), i + chunkSize);
            chunks.add(input.substring(i, end));
        }
        return chunks;
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}
