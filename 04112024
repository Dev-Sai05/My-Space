//    SBI Core Banking Project, Kondapur, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//                 PROGRAM - PFEnquiryService_Child.Java                *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
//Niharika Tammana : 15/10/2024    : 24090001  :  MICROSERVICES   *
//Naga Sai Ganesh  : 15/10/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*

package com.tcs.bancs.microservices.services;

import java.util.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.concurrent.*;


import com.tcs.bancs.microservices.jvm.scpf.JVMPF;
import com.tcs.bancs.microservices.jvm.scpf.LsPfBranchNumber;
import com.tcs.bancs.microservices.jvm.scpf.LsPfTellerNo;
import com.tcs.bancs.microservices.jvm.scpf.LsPfNumber;
import com.tcs.bancs.microservices.jvm.scpf.LsPfCustomerNo;
import com.tcs.bancs.microservices.jvm.scpf.LsPfDataOut;
import com.tcs.bancs.microservices.jvm.scpf.LsPfErrorMsgNo;
import com.tcs.bancs.microservices.jvm.scpf.LsPfRowcount;

public class PFEnquiryService_Child {

    Logger logger = LoggerFactory.getLogger(PFEnquiryService_Child.class);
    JVMPF jvmpf = new JVMPF();
    
    
    public List<String> callPFEnquiryChild(String branchno, String tellerno, String pfno, String cifno, int requestedNumberOfRecords, String lastrow) throws InterruptedException, ExecutionException {
    	
    	logger.info("VC------------------------PF Enquiry Child Service Started------------------------VC");
    	
        int Rowcount = lastrow.equals("0") ? 0 : Integer.parseInt(lastrow)+1;

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 60;

        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();
        
        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        int fetchedRecordsCount = 0;

        StringBuilder allRecordsBuilder = new StringBuilder();
        
            while (fetchedRecordsCount < numberOfRecordsToFetch) {
            	
                final int currentRowcount = Rowcount;
                
                CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
            	LsPfBranchNumber	pfinput1	= new LsPfBranchNumber();
            	LsPfTellerNo		pfinput2	= new LsPfTellerNo();
                LsPfNumber 			pfinput3 	= new LsPfNumber();
                LsPfCustomerNo 		pfinput4	= new LsPfCustomerNo();
                LsPfDataOut 		pfoutput1 	= new LsPfDataOut();
                LsPfErrorMsgNo 		pfoutput2 	= new LsPfErrorMsgNo();
                LsPfRowcount 		pfoutput3 	= new LsPfRowcount();
                
                pfinput1.setLsPfBranchNumber(String.format("%016d", Integer.parseInt(branchno)));
                pfinput2.setLsPfTellerNo(String.format("%016d", Integer.parseInt(tellerno)));
                pfinput3.setLsPfNumber(pfno);
                pfoutput3.setLsPfRowcount(currentRowcount);
    
                jvmpf.JVMPF(pfinput1, pfinput2, pfinput3, pfinput4, pfoutput1, pfoutput2, pfoutput3);
                ResponseData responseData = new ResponseData();
                responseData.outResponse  = pfoutput1.getLsPfDataOut();
                responseData.errno        = pfoutput2.getLsPfErrorMsgNo();
                responseData.rowcount     = pfoutput3.getLsPfRowcount()+1;
                return responseData;
            }, customThreadPool);

            futures.add(future);
            
            ResponseData lastResult = futures.get(futures.size() - 1).get();

            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
                logger.error("No outResponse from JVMSCPF. Terminating process.");
              
                break; 
            }
            Rowcount = lastResult.rowcount;
            String outResponse = lastResult.outResponse;
            int startIndex = 0;
            int endIndex = 0;


            while (startIndex + 139 <= outResponse.length() && fetchedRecordsCount < numberOfRecordsToFetch) {
                endIndex = startIndex + 139;
                allRecordsBuilder.append(outResponse.substring(startIndex, endIndex)); 
                startIndex = endIndex;
                fetchedRecordsCount++; 
            }
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        
       
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(futures.get(futures.size() - 1).get().errno);
        logger.info("VC------------------------PF Enquiry Child Service Ended------------------------VC");
        customThreadPool.shutdown();
        return res;
        
    }
    
    private class ResponseData {
		int  rowcount;
		String outResponse;
        String errno;
    }

}








import io.github.resilience4j.circuitbreaker.CircuitBreaker;
import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;
import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;
import io.github.resilience4j.decorators.Decorators;
import java.time.Duration;

public class PFEnquiryService_Child {

    private static final Logger logger = LoggerFactory.getLogger(PFEnquiryService_Child.class);
    private final JVMPF jvmpf = new JVMPF();
    private final CircuitBreaker circuitBreaker;

    public PFEnquiryService_Child() {
        // Configure the Circuit Breaker
        CircuitBreakerConfig config = CircuitBreakerConfig.custom()
                .failureRateThreshold(50) // Open the circuit if 50% of calls fail
                .slidingWindowSize(10)    // Consider the last 10 calls
                .waitDurationInOpenState(Duration.ofSeconds(10)) // Wait 10 seconds before retrying
                .build();

        CircuitBreakerRegistry registry = CircuitBreakerRegistry.of(config);
        circuitBreaker = registry.circuitBreaker("jvmpfCircuitBreaker");
    }

    public List<String> callPFEnquiryChild(String branchno, String tellerno, String pfno, String cifno, int requestedNumberOfRecords, String lastrow) throws InterruptedException, ExecutionException {
        logger.info("VC------------------------PF Enquiry Child Service Started------------------------VC");

        return Decorators.ofSupplier(() -> {
            try {
                return executePFEnquiry(branchno, tellerno, pfno, cifno, requestedNumberOfRecords, lastrow);
            } catch (Exception e) {
                logger.error("Error during PF Enquiry call: ", e);
                throw e;
            }
        })
        .withCircuitBreaker(circuitBreaker)
        .get();
    }

    private List<String> executePFEnquiry(String branchno, String tellerno, String pfno, String cifno, int requestedNumberOfRecords, String lastrow) throws InterruptedException, ExecutionException {

        int Rowcount = lastrow.equals("0") ? 0 : Integer.parseInt(lastrow) + 1;
        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 60;
        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();
        ForkJoinPool customThreadPool = new ForkJoinPool(25);
        int fetchedRecordsCount = 0;
        StringBuilder allRecordsBuilder = new StringBuilder();

        while (fetchedRecordsCount < numberOfRecordsToFetch) {
            final int currentRowcount = Rowcount;

            CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
                LsPfBranchNumber pfinput1 = new LsPfBranchNumber();
                LsPfTellerNo pfinput2 = new LsPfTellerNo();
                LsPfNumber pfinput3 = new LsPfNumber();
                LsPfCustomerNo pfinput4 = new LsPfCustomerNo();
                LsPfDataOut pfoutput1 = new LsPfDataOut();
                LsPfErrorMsgNo pfoutput2 = new LsPfErrorMsgNo();
                LsPfRowcount pfoutput3 = new LsPfRowcount();

                pfinput1.setLsPfBranchNumber(String.format("%016d", Integer.parseInt(branchno)));
                pfinput2.setLsPfTellerNo(String.format("%016d", Integer.parseInt(tellerno)));
                pfinput3.setLsPfNumber(pfno);
                pfoutput3.setLsPfRowcount(currentRowcount);

                jvmpf.JVMPF(pfinput1, pfinput2, pfinput3, pfinput4, pfoutput1, pfoutput2, pfoutput3);
                ResponseData responseData = new ResponseData();
                responseData.outResponse = pfoutput1.getLsPfDataOut();
                responseData.errno = pfoutput2.getLsPfErrorMsgNo();
                responseData.rowcount = pfoutput3.getLsPfRowcount() + 1;
                return responseData;
            }, customThreadPool);

            futures.add(future);

            ResponseData lastResult = futures.get(futures.size() - 1).get();

            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
                logger.error("No outResponse from JVMSCPF. Terminating process.");
                break;
            }

            Rowcount = lastResult.rowcount;
            String outResponse = lastResult.outResponse;
            int startIndex = 0;
            int endIndex = 0;

            while (startIndex + 139 <= outResponse.length() && fetchedRecordsCount < numberOfRecordsToFetch) {
                endIndex = startIndex + 139;
                allRecordsBuilder.append(outResponse.substring(startIndex, endIndex));
                startIndex = endIndex;
                fetchedRecordsCount++;
            }
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(futures.get(futures.size() - 1).get().errno);
        logger.info("VC------------------------PF Enquiry Child Service Ended------------------------VC");
        customThreadPool.shutdown();
        return res;
    }

    private class ResponseData {
        int rowcount;
        String outResponse;
        String errno;
    }
}
