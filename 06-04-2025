package com.tcs.bancs.microservices.services;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr2.JVME1MR2;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.concurrent.*;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);

    private static final int SHARED_POOL_SIZE = 5;

    private static final List<SharedRunUnitWrapper> sharedRunUnitPool1 = new ArrayList<>();
    private static final List<SharedRunUnitWrapper> sharedRunUnitPool2 = new ArrayList<>();

    private static final BlockingQueue<SharedRunUnitWrapper> queue1 = new ArrayBlockingQueue<>(SHARED_POOL_SIZE);
    private static final BlockingQueue<SharedRunUnitWrapper> queue2 = new ArrayBlockingQueue<>(SHARED_POOL_SIZE);

    static {
        try {
            for (int i = 0; i < SHARED_POOL_SIZE; i++) {
                RunUnit ru1 = new RunUnit();
                JVME1MR jvm1 = new JVME1MR();
                ru1.Add(jvm1);
                SharedRunUnitWrapper wrapper1 = new SharedRunUnitWrapper(ru1, jvm1);
                sharedRunUnitPool1.add(wrapper1);
                queue1.offer(wrapper1);

                RunUnit ru2 = new RunUnit();
                JVME1MR2 jvm2 = new JVME1MR2();
                ru2.Add(jvm2);
                SharedRunUnitWrapper wrapper2 = new SharedRunUnitWrapper(ru2, jvm2);
                sharedRunUnitPool2.add(wrapper2);
                queue2.offer(wrapper2);
            }
            System.out.println("Shared RunUnit pools initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno,
                                      String referencenum, String accountno, String commonArea,
                                      String connection, String driverclass)
            throws InterruptedException {

        logger.info("VC--- MRE1 Dispatcher Service Started | Ref: {} ---VC", referencenum);
        long start = System.currentTimeMillis();

        boolean isEven = Integer.parseInt(referencenum) % 2 == 0;
        SharedRunUnitWrapper wrapper = null;
        List<String> res;

        try {
            wrapper = isEven ? queue1.take() : queue2.take();

            synchronized (wrapper.runUnit) {
                if (isEven) {
                    logger.info("VC--- Routing to Project 1 ---VC");
                    res = callProject1(wrapper.runUnit, transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection, driverclass);
                } else {
                    logger.info("VC--- Routing to Project 2 ---VC");
                    res = callProject2(wrapper.runUnit, transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection, driverclass);
                }
            }
        } finally {
            if (wrapper != null) {
                if (isEven) {
                    queue1.offer(wrapper);
                } else {
                    queue2.offer(wrapper);
                }
            }
        }

        logger.info("VC--- MRE1 Dispatcher Service Ended | Ref: {} | Time Taken: {} ms ---VC", referencenum, (System.currentTimeMillis() - start));
        return res;
    }

    public List<String> callProject1(RunUnit runUnit, String transactiontype, String productcode, String branchno,
                                     String referencenum, String accountno, String commonArea, String connection, String driverclass) {

        // ... [same as before: set inputs and call using runUnit.Call("JVME1MR", ...)]
        return List.of("response1", "0"); // Replace with real logic
    }

    public List<String> callProject2(RunUnit runUnit, String transactiontype, String productcode, String branchno,
                                     String referencenum, String accountno, String commonArea, String connection, String driverclass) {

        // ... [same as before: set inputs and call using runUnit.Call("JVME1MR2", ...)]
        return List.of("response2", "0"); // Replace with real logic
    }

    static class SharedRunUnitWrapper {
        RunUnit runUnit;
        Object cobolInstance; // not used here but useful if needed

        SharedRunUnitWrapper(RunUnit runUnit, Object cobolInstance) {
            this.runUnit = runUnit;
            this.cobolInstance = cobolInstance;
        }
    }
}