package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.LsRecordArea;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputResponse;

public class BalanceEnqService_Child {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
   Connection connection;

    public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea) {
    	String errno = new String();
    	String outResponse = new String();
    	
        logger.info("Starting Balance Enquiry Child Service...");
        lacctno1 = lacctno1.substring(0, lacctno1.length()-1);
        String lacctno =  lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
        
        // Split the input account number into chunks of 16 digits
        List<String> accountNumbers = splitIntoChunks(accno, 16);

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;
        StringBuilder allRecordsBuilder = new StringBuilder();
        int fetchedRecordsCount = 0;

        // If a target account number is provided, find it
        if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
            int index = accountNumbers.indexOf(lacctno);
            if (index != -1) {
                accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
                logger.info("Target account number found. Processing records below it" );
            } else {
                logger.info("Target account number not found in the list.");
                // Return error code if account number is not found
                List<String> errorRes = new ArrayList<>();
                errorRes.add("");
                errorRes.add("0");
                errorRes.add("108");  // Error code for not found account number
                return errorRes;
            }
        }

        // Process accounts sequentially
        for (String accountNumber : accountNumbers) {
            if (fetchedRecordsCount >= numberOfRecordsToFetch) {
                break; // Stop processing if required number of records is fetched
            }
            JVMAVBL jvmavbl = new JVMAVBL();
            // Create input and output objects for each account number
            Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
            Ls400InpEnqType input2 = new Ls400InpEnqType();
            Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
            Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
            Ls400OutputResponse output3 = new Ls400OutputResponse();
            LsRecordArea   inputrec = new LsRecordArea();
            // Set input parameters
            input1.setLs400InputAccountNumber(accountNumber);
            input2.setLs400InpEnqType("1");
            inputrec.setLsRecordArea(inpcommonarea);
            try (Connection connection = datasource.getConnection()){
				//connection = datasource.getConnection();
			
            RunUnit run1 = new RunUnit();
            run1.Add(jvmavbl);
            
            run1.Call("JVMAVBL", input1.get_Reference(), input2.get_Reference(), output1.get_Reference(), output2.get_Reference(), output3.get_Reference(), inputrec.get_Reference(), connection);
            // Call the JVMAVBL service
            //jvmavbl.JVMAVBL(input1, input2, output1, output2, output3, connection, );

            errno = output1.getLs400OutputErrorNumber();
            outResponse = output3.getLs400OutputResponse();
           
            if (errno.equals("0000")) {
            	errno = "0000";
                if (outResponse != null && !outResponse.trim().isEmpty()) {
                    allRecordsBuilder.append(outResponse.trim());
                    fetchedRecordsCount++;
                    logger.info("Record fetched successfully for account");
                }
            } 
            else if(errno.equals("155") || errno.equals("0155")){
            	errno = "0155";
                break;
            }
            else {
            	errno = "0000";
            }
            run1.close();
            } catch (SQLException e) {
            		errno = "VC010";
			}
        }

        // Prepare response
        if(fetchedRecordsCount == 0) {
        	errno = "188";
        }
        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(errno); // Return success only if records are fetched

        logger.info("Balance Enquiry Child Service completed.");
        
        return res;
    }
    
    private List<String> splitIntoChunks(String input, int chunkSize) {
        List<String> chunks = new ArrayList<>();
        for (int i = 0; i < input.length(); i += chunkSize) {
            int end = Math.min(input.length(), i + chunkSize);
            String chunk = input.substring(i, end).trim();
            // Add only non-empty, non-zero chunks
            if (!chunk.isEmpty() && !chunk.matches("^0+$")) {
                chunks.add(chunk);
            }
        }
        return chunks;
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}
