//    SBI Core Banking Project, Kondapur, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//                 PROGRAM - PFEnquiryService_Child.Java                *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
//Niharika Tammana : 15/10/2024    : 24090001  :  MICROSERVICES   *
//Naga Sai Ganesh  : 15/10/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*

package com.tcs.bancs.microservices.services;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


import java.util.concurrent.*;


import com.tcs.bancs.microservices.jvm.scpf.JVMPF;
import com.tcs.bancs.microservices.jvm.scpf.LsPfBranchNumber;
import com.tcs.bancs.microservices.jvm.scpf.LsPfTellerNo;
import com.tcs.bancs.microservices.jvm.scpf.LsPfNumber;
import com.tcs.bancs.microservices.jvm.scpf.LsPfCustomerNo;
import com.tcs.bancs.microservices.jvm.scpf.LsPfDataOut;
import com.tcs.bancs.microservices.jvm.scpf.LsPfErrorMsgNo;
import com.tcs.bancs.microservices.jvm.scpf.LsPfRowcount;
import com.tcs.bancs.microservices.java.dbconnection.*;

public class PFEnquiryService_Child {

    Logger logger = LoggerFactory.getLogger(PFEnquiryService_Child.class);
    JVMPF jvmpf = new JVMPF();
    private Connection conn = null;
    
    public List<String> callPFEnquiryChild(String branchno, String tellerno, String pfno, String cifno, int requestedNumberOfRecords, String lastrow) throws InterruptedException, ExecutionException {
    	
    	logger.info("VC------------------------PF Enquiry Child Service Started------------------------VC");
    	
        int Rowcount = lastrow.equals("0") ? 0 : Integer.parseInt(lastrow)+1;

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 60;

        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();
        
        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        int fetchedRecordsCount = 0;

        StringBuilder allRecordsBuilder = new StringBuilder();
        
            while (fetchedRecordsCount < numberOfRecordsToFetch) {
            	
                final int currentRowcount = Rowcount;
                
                CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
            	LsPfBranchNumber	pfinput1	= new LsPfBranchNumber();
            	LsPfTellerNo		pfinput2	= new LsPfTellerNo();
                LsPfNumber 			pfinput3 	= new LsPfNumber();
                LsPfCustomerNo 		pfinput4	= new LsPfCustomerNo();
                LsPfDataOut 		pfoutput1 	= new LsPfDataOut();
                LsPfErrorMsgNo 		pfoutput2 	= new LsPfErrorMsgNo();
                LsPfRowcount 		pfoutput3 	= new LsPfRowcount();
                
                pfinput1.setLsPfBranchNumber(String.format("%016d", Integer.parseInt(branchno)));
                pfinput2.setLsPfTellerNo(String.format("%016d", Integer.parseInt(tellerno)));
                pfinput3.setLsPfNumber(pfno);
                pfoutput3.setLsPfRowcount(currentRowcount);
    
                jvmpf.JVMPF(pfinput1, pfinput2, pfinput3, pfinput4, pfoutput1, pfoutput2, pfoutput3);
                ResponseData responseData = new ResponseData();
                responseData.outResponse  = pfoutput1.getLsPfDataOut();
                responseData.errno        = pfoutput2.getLsPfErrorMsgNo();
                responseData.rowcount     = pfoutput3.getLsPfRowcount()+1;
                return responseData;
            }, customThreadPool);

            futures.add(future);
            
            ResponseData lastResult = futures.get(futures.size() - 1).get();

            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
                logger.error("No outResponse from JVMSCPF. Terminating process.");
              
                break; 
            }
            Rowcount = lastResult.rowcount;
            String outResponse = lastResult.outResponse;
            int startIndex = 0;
            int endIndex = 0;


            while (startIndex + 139 <= outResponse.length() && fetchedRecordsCount < numberOfRecordsToFetch) {
                endIndex = startIndex + 139;
                allRecordsBuilder.append(outResponse.substring(startIndex, endIndex)); 
                startIndex = endIndex;
                fetchedRecordsCount++; 
            }
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        
       
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(futures.get(futures.size() - 1).get().errno);
        logger.info("VC------------------------PF Enquiry Child Service Ended------------------------VC");
        customThreadPool.shutdown();
        return res;

    }
    
    private class ResponseData {
		int  rowcount;
		String outResponse;
        String errno;
    }


}

--------------------------------





if (connection != null && !connection.isClosed()) {
    System.out.println("Connection is valid and open.");
} else {
    System.out.println("Connection is null or closed.");
}


================

//    SBI Core Banking Project, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//  	           PROGRAM - DBConnection.java                    *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
// Niharika Tammana: 02/09/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*
package com.tcs.bancs.microservices.java.dbconnection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import com.tcs.bancs.microservices.config.CBSDayDbConfig;
import com.tcs.bancs.microservices.config.CBSNightDbConfig;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

@Service
public class DBConnection {

    @Autowired
    @Qualifier("dayDataSource")
    private DataSource dayDataSource;

    @Autowired
    @Qualifier("nightDataSource")
    private DataSource nightDataSource;
    
	@Value("${UTENVCALS-DEF-RMODE}")
	private String dbmode;
	
    DBConnection_Child	dbobj	=	new DBConnection_Child();
    
    Logger logger = LoggerFactory.getLogger(DBConnection.class);
    Connection conn = null;
    
  
    
    public String getCBSDBConnection(String dbcallCode,String inpcallCode, String inpoptcode, String inpcommonarea) throws InvalidDataSourceFormatException, SQLException{
    	
		String cbsDBAllowFlag = "N";
		String dbtype       = new String();
		String denyFlag = new String();
		
        try {
        	dbtype = getDbType(dbmode);
        	
        } catch(InvalidDataSourceFormatException e) {
        	logger.error("dbconnection : Error in the fetched datasource type");
        	return cbsDBAllowFlag;
        }
        
        if (conn != null && !conn.isClosed()) {
            System.out.println("Connection is valid and open.");
        } else {
            System.out.println("Connection is null or closed.");
        }
		
if(dbcallCode.equals("01")) {
		conn = performDatabaseOperation(dbtype);
		if(conn != null) {
			
			denyFlag = dbobj.callJVM(dbcallCode, conn);
		}


	        if(denyFlag.equals("N")) {
	        	cbsDBAllowFlag = "Y";
	        }	  
}

//if(dbcallCode.equals("04")) {
//	if(conn != null) {
//		dbobj.callJVM(dbcallCode, conn);
//	}
//	else {
//		logger.info("null string in unbind java");
//	}
//}

		return cbsDBAllowFlag;
	  }
    
    
    
    
    public Connection performDatabaseOperation(String dbType) {
        DataSource dataSource = getDataSource(dbType);
        Connection connection = null;
        try{
        	connection = dataSource.getConnection();
        	logger.info("connection" + connection.toString());
            // Perform operations with the connection
        	logger.info("Connected to " + dbType + " database.");
            return connection;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return connection;
    }

    private DataSource getDataSource(String dbType) {
        switch (dbType) {
            case "day":
                return dayDataSource;
            case "night":
                return nightDataSource;
            default:
                throw new IllegalArgumentException("Unsupported database type: " + dbType);
        }
    }
    
	  private String getDbType(String flag) {
	  
	  if(flag.equalsIgnoreCase("D") || flag.equalsIgnoreCase("T")) {
		  return "day";			  
	  }
	  else if(flag.equalsIgnoreCase("N")) {
		  return "night";
	  }
	  else {
    	logger.error("dbconnection : Unsupported datasource type");
      throw new InvalidDataSourceFormatException("Unsupported datasource type");
	  }
}
}





package com.tcs.bancs.microservices.java.dbconnection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import com.tcs.bancs.microservices.config.CBSDayDbConfig;
import com.tcs.bancs.microservices.config.CBSNightDbConfig;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Service
public class DBConnection {

    @Autowired
    @Qualifier("dayDataSource")
    private DataSource dayDataSource;

    @Autowired
    @Qualifier("nightDataSource")
    private DataSource nightDataSource;

    @Value("${UTENVCALS-DEF-RMODE}")
    private String dbmode;

    private DBConnection_Child dbobj = new DBConnection_Child();
    private Logger logger = LoggerFactory.getLogger(DBConnection.class);

    private Connection conn = null;

    public String getCBSDBConnection(String dbcallCode, String inpcallCode, String inpoptcode, String inpcommonarea) 
            throws InvalidDataSourceFormatException, SQLException {

        String cbsDBAllowFlag = "N";
        String dbtype;
        String denyFlag = "N";

        logger.info("Starting getCBSDBConnection for dbcallCode: {}", dbcallCode);

        try {
            dbtype = getDbType(dbmode);
            logger.info("Database type determined from dbmode ({}): {}", dbmode, dbtype);
        } catch (InvalidDataSourceFormatException e) {
            logger.error("Error determining datasource type with dbmode: {}", dbmode, e);
            return cbsDBAllowFlag;
        }

        if (conn != null && !conn.isClosed()) {
            logger.info("Connection is already open.");
        } else {
            logger.warn("Connection is either null or closed, establishing a new connection.");
            conn = performDatabaseOperation(dbtype);
        }

        if ("01".equals(dbcallCode)) {
            if (conn != null) {
                logger.info("Calling JVM with dbcallCode: {}", dbcallCode);
                denyFlag = dbobj.callJVM(dbcallCode, conn);
            } else {
                logger.warn("Connection is null; JVM call skipped.");
            }

            if ("N".equals(denyFlag)) {
                cbsDBAllowFlag = "Y";
                logger.info("DB access allowed. CBSDBAllowFlag set to: {}", cbsDBAllowFlag);
            } else {
                logger.info("DB access denied by JVM call. CBSDBAllowFlag remains: {}", cbsDBAllowFlag);
            }
        }

        logger.info("getCBSDBConnection completed with CBSDBAllowFlag: {}", cbsDBAllowFlag);
        return cbsDBAllowFlag;
    }

    public Connection performDatabaseOperation(String dbType) {
        DataSource dataSource = getDataSource(dbType);
        Connection connection = null;

        try {
            connection = dataSource.getConnection();
            logger.info("Successfully connected to {} database. Connection: {}", dbType, connection);
        } catch (SQLException e) {
            logger.error("Failed to establish connection to {} database.", dbType, e);
        }

        return connection;
    }

    private DataSource getDataSource(String dbType) {
        switch (dbType) {
            case "day":
                return dayDataSource;
            case "night":
                return nightDataSource;
            default:
                String errorMsg = "Unsupported database type: " + dbType;
                logger.error(errorMsg);
                throw new IllegalArgumentException(errorMsg);
        }
    }

    private String getDbType(String flag) {
        switch (flag.toUpperCase()) {
            case "D":
            case "T":
                return "day";
            case "N":
                return "night";
            default:
                logger.error("Unsupported datasource type in getDbType with flag: {}", flag);
                throw new InvalidDataSourceFormatException("Unsupported datasource type");
        }
    }
}


+++++++++

//    SBI Core Banking Project, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//                     PROGRAM - DBConnection.java                    *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
// Niharika Tammana: 02/09/2024    : 24090001  :  MICROSERVICES   *
//----------------------------------------------------------------*
package com.tcs.bancs.microservices.java.dbconnection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import com.tcs.bancs.microservices.config.CBSDayDbConfig;
import com.tcs.bancs.microservices.config.CBSNightDbConfig;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

@Service
public class DBConnection {

    @Autowired
    @Qualifier("dayDataSource")
    private DataSource dayDataSource;

    @Autowired
    @Qualifier("nightDataSource")
    private DataSource nightDataSource;

    @Value("${UTENVCALS-DEF-RMODE}")
    private String dbmode;

    DBConnection_Child dbobj = new DBConnection_Child();
    Logger logger = LoggerFactory.getLogger(DBConnection.class);

    private Connection conn = null;

    public String getCBSDBConnection(String dbcallCode, String inpcallCode, String inpoptcode, String inpcommonarea) 
            throws InvalidDataSourceFormatException, SQLException {

        String cbsDBAllowFlag = "N";
        String dbtype;
        String denyFlag = "N";

        try {
            dbtype = getDbType(dbmode);
        } catch (InvalidDataSourceFormatException e) {
            logger.error("DBConnection: Error in the fetched datasource type");
            return cbsDBAllowFlag;
        }

        // Close and reinitialize connection if necessary
        if (conn == null || conn.isClosed()) {
            conn = performDatabaseOperation(dbtype);
        } else {
            logger.info("Reusing an existing open connection.");
        }

        if ("01".equals(dbcallCode)) {
            denyFlag = dbobj.callJVM(dbcallCode, conn);
            if ("N".equals(denyFlag)) {
                cbsDBAllowFlag = "Y";
            }
        }

        // Close the connection after use to ensure each call is fresh
        closeConnection();

        return cbsDBAllowFlag;
    }

    public Connection performDatabaseOperation(String dbType) {
        DataSource dataSource = getDataSource(dbType);
        Connection connection = null;
        try {
            connection = dataSource.getConnection();
            logger.info("Connected to " + dbType + " database: " + connection.toString());
            return connection;
        } catch (SQLException e) {
            logger.error("Error establishing database connection", e);
        }
        return connection;
    }

    private DataSource getDataSource(String dbType) {
        switch (dbType) {
            case "day":
                return dayDataSource;
            case "night":
                return nightDataSource;
            default:
                throw new IllegalArgumentException("Unsupported database type: " + dbType);
        }
    }

    private String getDbType(String flag) throws InvalidDataSourceFormatException {
        if ("D".equalsIgnoreCase(flag) || "T".equalsIgnoreCase(flag)) {
            return "day";
        } else if ("N".equalsIgnoreCase(flag)) {
            return "night";
        } else {
            logger.error("DBConnection: Unsupported datasource type");
            throw new InvalidDataSourceFormatException("Unsupported datasource type");
        }
    }

    // Method to close the database connection
    private void closeConnection() {
        if (conn != null) {
            try {
                conn.close();
                logger.info("Connection closed successfully.");
            } catch (SQLException e) {
                logger.error("Error closing connection", e);
            }
        }
    }
}

.
.+++++++++++++11111






package com.tcs.bancs.microservices.java.dbconnection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import com.tcs.bancs.microservices.config.CBSDayDbConfig;
import com.tcs.bancs.microservices.config.CBSNightDbConfig;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

@Service
public class DBConnection {

    @Autowired
    @Qualifier("dayDataSource")
    private DataSource dayDataSource;

    @Autowired
    @Qualifier("nightDataSource")
    private DataSource nightDataSource;

    @Value("${UTENVCALS-DEF-RMODE}")
    private String dbmode;

    DBConnection_Child dbobj = new DBConnection_Child();
    Logger logger = LoggerFactory.getLogger(DBConnection.class);

    private Connection conn = null;

    public String getCBSDBConnection(String dbcallCode, String inpcallCode, String inpoptcode, String inpcommonarea) 
            throws InvalidDataSourceFormatException, SQLException {

        String cbsDBAllowFlag = "N";
        String dbtype;
        String denyFlag = "N";

        try {
            dbtype = getDbType(dbmode);
        } catch (InvalidDataSourceFormatException e) {
            logger.error("DBConnection: Error in the fetched datasource type");
            return cbsDBAllowFlag;
        }

        // Initialize or reuse connection if it's open and valid
        if (conn == null || conn.isClosed()) {
            conn = performDatabaseOperation(dbtype);
        } else {
            logger.info("Reusing an existing open connection.");
        }

        if ("01".equals(dbcallCode)) {
            denyFlag = dbobj.callJVM(dbcallCode, conn);
            if ("N".equals(denyFlag)) {
                cbsDBAllowFlag = "Y";
            }
        }

        // Don't close connection here; it should remain open for other methods until explicitly ended

        return cbsDBAllowFlag;
    }

    public Connection performDatabaseOperation(String dbType) {
        DataSource dataSource = getDataSource(dbType);
        Connection connection = null;
        try {
            connection = dataSource.getConnection();
            logger.info("Connected to " + dbType + " database: " + connection.toString());
            return connection;
        } catch (SQLException e) {
            logger.error("Error establishing database connection", e);
        }
        return connection;
    }

    private DataSource getDataSource(String dbType) {
        switch (dbType) {
            case "day":
                return dayDataSource;
            case "night":
                return nightDataSource;
            default:
                throw new IllegalArgumentException("Unsupported database type: " + dbType);
        }
    }

    private String getDbType(String flag) throws InvalidDataSourceFormatException {
        if ("D".equalsIgnoreCase(flag) || "T".equalsIgnoreCase(flag)) {
            return "day";
        } else if ("N".equalsIgnoreCase(flag)) {
            return "night";
        } else {
            logger.error("DBConnection: Unsupported datasource type");
            throw new InvalidDataSourceFormatException("Unsupported datasource type");
        }
    }

    // Explicitly close the connection after the entire transaction is complete
    public void endTransaction() {
        if (conn != null) {
            try {
                conn.close();
                logger.info("Connection closed successfully after transaction completion.");
            } catch (SQLException e) {
                logger.error("Error closing connection", e);
            }
        }
    }
}
