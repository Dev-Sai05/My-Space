package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMCUCC;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;
import com.tcs.bancs.microservices.jvm.balenq.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsInputCustNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsOutputAccountNumbers;
import com.tcs.bancs.microservices.services.BalanceEnqService_Child.ResponseData;

public class AccountEnqService_Child {
    private static final Logger logger = LoggerFactory.getLogger(AccountEnqService_Child.class);
    private final JVMCUCC jvmcucc = new JVMCUCC();
	              JVMAVBL jvmavbl = new JVMAVBL();

    /**
     * Fetch account numbers based on CIF number, record count, and target account number.
     *
     * @param cifno         CIF number (customer ID).
     * @param recordCount   Number of records to fetch below the target account number.
     * @param accountNumber Target account number to find in the output.
     * @return 
     * @return List of account numbers based on the conditions.
     */
    public List<String> AccountEnqService_Child(String cifno, Integer recordCount, String accountno) throws InterruptedException, ExecutionException {
    	
        logger.info("VC------------------ACCOUNT NUMBERS Child Service Started------------------VC");

        // Default record count to 30 if not provided
        int numberOfRecordsToFetch = (recordCount == null || recordCount <= 0) ? 30 : recordCount;

        // Validate and format CIF number
        String lacctno = (cifno == null || cifno.isEmpty()) ? "00000000000000000" : String.format("%017d", new BigInteger(cifno));

        // Prepare input and output objects
        LsInputCustNumber input = new LsInputCustNumber();
        LsOutputAccountNumbers output = new LsOutputAccountNumbers();
        LsErrorNumber error = new LsErrorNumber();

        input.setLsInputCustNumber(lacctno);

        // Call JVMCUCC
        jvmcucc.JVMCUCC(input, error, output);

        // Extract and validate the output
        String outResponse = output.getLsOutputAccountNumbers();
        String errno = error.getLsErrorNumber();
        
        logger.info("Intial Output response========================" + outResponse);
        if (outResponse == null || outResponse.trim().isEmpty()) {
            logger.info("No valid response from JVMCUCC.");
            return new ArrayList<>();
        }

        // Split the response into 16-character chunks
        List<String> allAccountNumbers = new ArrayList<>();
        outResponse = outResponse.trim();

        for (int i = 0; i + 16 <= outResponse.length(); i += 16) {
            String account = outResponse.substring(i, i + 16).trim();
            if (!account.matches("0+")) { // Exclude records with only zeros
                allAccountNumbers.add(account);
                logger.info("Outputresponse----------------------------------------------------------" + account);
            }
        }
        
        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();

        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        int fetchedRecordsCount = 0;

        StringBuilder allRecordsBuilder = new StringBuilder();

        while (fetchedRecordsCount < numberOfRecordsToFetch) {
            final String currentLacctno = lacctno;

            CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
            

                Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
                Ls400InpEnqType input2 = new Ls400InpEnqType();
                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                Ls400OutputResponse output3 = new Ls400OutputResponse();
                 
                input1.setLs400InputAccountNumber(currentLacctno);
                input2.setLs400InpEnqType("1");
                                
                jvmavbl.JVMAVBL(input1,input2,output1,output2,output3);

                ResponseData responseData = new ResponseData();
                responseData.outResponse = output2.getLs400AccountActiveFlag();
                logger.info("VC------------------------AVAILABLE BALANCE Child Service Ended------------------------VC" + output2.getLs400AccountActiveFlag());
                responseData.outResponse = output3.getLs400OutputResponse();
                responseData.outResponse = responseData.outResponse.trim();
                responseData.errno = output1.getLs400OutputErrorNumber();
                
                return responseData
            }, customThreadPool);

            futures.add(future);
            
            ResponseData lastResult = futures.get(futures.size() - 1).get();
           
            lacctno = lastResult.lacctno;

            String outResponse1 = lastResult.outResponse;
            int startIndex = 0;
            int endIndex = 0;
            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
                logger.error("No outResponse from JVMAVBL. Terminating process.");
                 break;
             }
            
            while (startIndex + 97 <= outResponse1.length()) {
                endIndex = startIndex + 97;
                allRecordsBuilder.append(outResponse1.substring(startIndex, endIndex));
                startIndex = endIndex;
                fetchedRecordsCount++;
            }
        }
        
        // If accountNumber is provided, find it and fetch records below it
        if (accountno != null && !accountno.isEmpty()) {
            int index = allAccountNumbers.indexOf(accountno);
            if (index != -1) {
                int endIndex = Math.min(index + numberOfRecordsToFetch + 1, allAccountNumbers.size());
                logger.info("Target account number found. Fetching records below it.");
                List<String> result = allAccountNumbers.subList(index + 1, endIndex);
                logger.info("Printing all the records when account number given ===================" + result);
        		return result;
            } else {
                logger.warn("Target account number not found in the output.");
                return new ArrayList<>();
            }
        }
        // If no accountNumber is provided, return the requested number of records from the start
        logger.info("No target account number provided. Returning top records.");
        List<String> result = allAccountNumbers.subList(0, Math.min(numberOfRecordsToFetch, allAccountNumbers.size()));
        logger.info("Printing all the records when account number not given ===================" + result);
		return result;
    }
    
    private class ResponseData {
        String outResponse;
        String errno;
        String lacctno;
    }
	}


package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMCUCC;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;
import com.tcs.bancs.microservices.jvm.balenq.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsInputCustNumber;
import com.tcs.bancs.microservices.jvm.balenq.LsOutputAccountNumbers;

public class AccountEnqService_Child {
    private static final Logger logger = LoggerFactory.getLogger(AccountEnqService_Child.class);
    private final JVMCUCC jvmcucc = new JVMCUCC();
    private final JVMAVBL jvmavbl = new JVMAVBL();

    /**
     * Process account numbers and fetch active accounts based on requested record count.
     *
     * @param cifno         Customer CIF number.
     * @param recordCount   Number of active account records to fetch.
     * @return A list of output responses for active accounts.
     */
    public List<String> processAccountNumbers(String cifno, int recordCount) throws InterruptedException, ExecutionException {

        logger.info("VC------------------Account Enquiry Child Service Started------------------VC");

        // Validate and format CIF number
        String formattedCifNo = String.format("%017d", new BigInteger(cifno));

        // Prepare input and output objects for JVMCUCC
        LsInputCustNumber input = new LsInputCustNumber();
        LsOutputAccountNumbers output = new LsOutputAccountNumbers();
        LsErrorNumber error = new LsErrorNumber();

        input.setLsInputCustNumber(formattedCifNo);

        // Call JVMCUCC to fetch account numbers
        jvmcucc.JVMCUCC(input, error, output);

        // Extract and split account numbers into a list
        String accountResponse = output.getLsOutputAccountNumbers();
        if (accountResponse == null || accountResponse.trim().isEmpty()) {
            logger.error("No account numbers found for CIF: " + cifno);
            return new ArrayList<>();
        }

        List<String> accountNumbers = new ArrayList<>();
        for (int i = 0; i + 16 <= accountResponse.length(); i += 16) {
            String account = accountResponse.substring(i, i + 16).trim();
            if (!account.matches("0+")) { // Exclude records with only zeros
                accountNumbers.add(account);
            }
        }

        logger.info("Fetched account numbers: " + accountNumbers);

        // Prepare for processing account numbers through JVMAVBL
        ForkJoinPool customThreadPool = new ForkJoinPool(25);
        List<CompletableFuture<String>> futures = new ArrayList<>();
        List<String> activeAccountsData = new ArrayList<>();

        for (String accountNumber : accountNumbers) {
            if (activeAccountsData.size() >= recordCount) {
                break; // Stop if requested record count is reached
            }

            CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {
                Ls400InputAccountNumber inputAccount = new Ls400InputAccountNumber();
                Ls400InpEnqType inputType = new Ls400InpEnqType();
                Ls400OutputErrorNumber outputError = new Ls400OutputErrorNumber();
                Ls400OutputResponse outputResponse = new Ls400OutputResponse();
                Ls400AccountActiveFlag outputActiveFlag = new Ls400AccountActiveFlag();

                inputAccount.setLs400InputAccountNumber(accountNumber);
                inputType.setLs400InpEnqType("1");

                jvmavbl.JVMAVBL(inputAccount, inputType, outputError, outputActiveFlag, outputResponse);

                // Check if the account is active
                if ("A".equalsIgnoreCase(outputActiveFlag.getLs400AccountActiveFlag())) {
                    logger.info("Account is active: " + accountNumber);
                    return outputResponse.getLs400OutputResponse();
                }
                return null; // Skip inactive accounts
            }, customThreadPool);

            futures.add(future);
        }

        // Collect active account data
        for (CompletableFuture<String> future : futures) {
            String response = future.get();
            if (response != null) {
                activeAccountsData.add(response.trim());
                if (activeAccountsData.size() >= recordCount) {
                    break; // Stop if requested record count is reached
                }
            }
        }

        customThreadPool.shutdown();

        logger.info("VC------------------Account Enquiry Child Service Ended------------------VC");
        return activeAccountsData;
    }
}