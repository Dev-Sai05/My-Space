public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords, String lacctno1) {
    String errno = "0000";
    StringBuilder allRecordsBuilder = new StringBuilder();

    logger.info("Starting Balance Enquiry Child Service...");
    lacctno1 = lacctno1.substring(0, lacctno1.length() - 1);
    String lacctno = lacctno1.equals("0000000000000000") ? "0000000000000000"
            : String.format("%016d", new BigInteger(lacctno1));

    // Split the input account number into chunks of 16 digits
    List<String> accountNumbers = splitIntoChunks(accno, 16);

    // If a target account number is provided, adjust the list
    if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
        int index = accountNumbers.indexOf(lacctno);
        if (index != -1) {
            accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
            logger.info("Target account number found. Processing records below it.");
        } else {
            logger.info("Target account number not found in the list.");
            List<String> errorRes = new ArrayList<>();
            errorRes.add("");
            errorRes.add("0");
            errorRes.add("108"); // Error code for not found account number
            return errorRes;
        }
    }

    // ExecutorService for multithreading
    ExecutorService executorService = Executors.newFixedThreadPool(10);
    List<Future<ResponseData>> futures = new ArrayList<>();
    AtomicInteger fetchedRecordsCount = new AtomicInteger(0); // Use AtomicInteger for thread safety

    // Submit tasks only until the required number of records is reached
    for (String accountNumber : accountNumbers) {
        if (fetchedRecordsCount.get() >= requestedNumberOfRecords) {
            break; // Stop submitting tasks once the desired count is reached
        }

        Callable<ResponseData> task = () -> {
            ResponseData response = processAccount(accountNumber);

            // Increment the count only if the response is valid
            if ("0000".equals(response.errno)) {
                synchronized (fetchedRecordsCount) {
                    if (fetchedRecordsCount.get() < requestedNumberOfRecords) {
                        allRecordsBuilder.append(response.outResponse.trim());
                        fetchedRecordsCount.incrementAndGet();
                    }
                }
            }
            return response;
        };

        futures.add(executorService.submit(task));
    }

    // Process the results (if needed to handle errors or logs)
    try {
        for (Future<ResponseData> future : futures) {
            ResponseData responseData = future.get();
            if ("7998".equals(responseData.errno)) {
                logger.info("Skipping account with error number: " + responseData.errno);
            } else if ("0155".equals(responseData.errno)) {
                errno = "0155";
                break;
            }
        }
    } catch (Exception e) {
        logger.error("Error while processing accounts in parallel", e);
        errno = "188";
    } finally {
        executorService.shutdown();
    }

    // Prepare the response
    if (fetchedRecordsCount.get() == 0) {
        errno = "188";
    }
    List<String> res = new ArrayList<>();
    res.add(allRecordsBuilder.toString());
    res.add(String.valueOf(fetchedRecordsCount.get()));
    res.add(errno);

    logger.info("Balance Enquiry Child Service completed.");
    return res;
}