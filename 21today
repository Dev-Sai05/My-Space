package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.*;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);    

    private static RunUnit sharedRunUnit1;
    private static JVME1MR sharedJvmmre1;

    private static RunUnit sharedRunUnit2;
    private static JVME1MR sharedJvmmre1_2;

    // Initialize both RunUnits
    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvmmre1 = new JVME1MR();
            sharedRunUnit1.Add(sharedJvmmre1);
            System.out.println("Shared RunUnit1 initialized.");

            sharedRunUnit2 = new RunUnit();
            sharedJvmmre1_2 = new JVME1MR();
            sharedRunUnit2.Add(sharedJvmmre1_2);
            System.out.println("Shared RunUnit2 initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, String connection, String driverclass) 
                                      throws InterruptedException, ExecutionException {

        logger.info("VC------------------------MRE1 Child Service Started------------------------VC");

        // Determine which RunUnit to use based on reference number (even -> sharedRunUnit1, odd -> sharedRunUnit2)
        boolean isEvenTransaction = (Integer.parseInt(referencenum) % 2 == 0);
        RunUnit selectedRunUnit = isEvenTransaction ? sharedRunUnit1 : sharedRunUnit2;
        String runUnitName = isEvenTransaction ? "RunUnit1" : "RunUnit2";

        synchronized (selectedRunUnit) {  // Ensure thread safety for the chosen RunUnit
            String errno = "";
            String outResponse = "";

            LsTransactionType input2  = new LsTransactionType();
            LsProductCode     input3  = new LsProductCode();
            LsBranchNumber    input4  = new LsBranchNumber();         
            LsReferenceNumber input5  = new LsReferenceNumber();
            LsAccountNumber   input6  = new LsAccountNumber();
            LsVcmiscDriverClass input7 = new LsVcmiscDriverClass();
            LsVcmiscConnectionUrl input8 = new LsVcmiscConnectionUrl();
            LsOutputResponse  output1 = new LsOutputResponse();
            LsErrorNumber     output2 = new LsErrorNumber();
            LsRecordArea      recarea = new LsRecordArea();

            input2.setLsTransactionType(transactiontype);
            input3.setLsProductCode(productcode);
            input4.setLsBranchNumber(branchno);
            input5.setLsReferenceNumber(referencenum);
            input6.setLsAccountNumber(accountno);
            input7.setLsVcmiscDriverClass(driverclass);
            input8.setLsVcmiscConnectionUrl(connection);
            recarea.setLsRecordArea(commonArea);

            logger.info("Using " + runUnitName + " for reference number: " + referencenum);

            selectedRunUnit.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(), 
                                 input5.get_Reference(), input6.get_Reference(), output1.get_Reference(), 
                                 output2.get_Reference(), recarea.get_Reference(), input8.get_Reference(), input7.get_Reference());

            outResponse = output1.getLsOutputResponse();
            errno = String.valueOf(output2.getLsErrorNumber());

            logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");

            List<String> res = new ArrayList<>();
            res.add(outResponse);
            res.add(errno);
            return res;
        }
    }
}