      $set ilusing(java.math) ilusing(java.io) 
       class-id com.mfcobolbook.database.DatabaseInitializerWrapper public.
       copy "DataMigrationEntryPoints.cpy". 

       method-id New.
           call "DatabaseInitializer"
       end method. 
           
       method-id dropAndCreateTables. 
           call CREATE-TABLES 
       end method. 
                 
       method-id. loadCustomerData(csvPath as type InputStream).
       copy "CUSTOMER-RECORD.cpy" replacing ==(PREFIX)== by ==WS==.
       01 success          pic 9. 
       try 
           call OPEN-DATABASE using by reference success 
           if success <> 0 
               raise new Exception ("Could not open database")
           end-if
           declare reader = new CsvReader(csvPath)
           perform varying fields as string occurs any through reader::getRows()
               set WS-CUSTOMER-ID to type Integer::parseInt(fields(1))
               set WS-FIRST-NAME to fields(2)
               set WS-LAST-NAME to fields(3)
               call WRITE-CUSTOMER-ROW using WS-CUSTOMER-RECORD success
               if (success <> 0)
                   raise new Exception( "Could not write row" )
               end-if
           end-perform
       finally 
           call CLOSE-DATABASE using by reference success     
       end-try
       end method. 

       method-id. loadAccountData(csvPath as type InputStream).
       copy "ACCOUNT-RECORD.cpy" replacing ==(PREFIX)== by ==WS==.
       01 success          pic 9. 
       try 
           call OPEN-DATABASE using by reference success 
           if success <> 0 
               raise new Exception ("Could not open database")
           end-if
           declare reader = new CsvReader(csvPath)
           perform varying fields as string occurs any through reader::getRows()
               set WS-ACCOUNT-ID to type Integer::parseInt(fields(1))
               set WS-CUSTOMER-ID to type Integer::parseInt(fields(2))
               set WS-BALANCE to new BigDecimal(fields(3)) 
               set WS-TYPE to fields(4)
               set WS-CREDIT-LIMIT to type Integer::parseInt(fields(5)) 
               call WRITE-ACCOUNT-ROW using by reference WS-ACCOUNT success
               if (success <> 0)
                   raise new Exception( "Could not write row" )
               end-if
           end-perform
       finally 
           call CLOSE-DATABASE using by reference success     
       end-try
       end method. 

       method-id. loadTransactionData(csvPath as type InputStream).
       copy "TRANSACTION-RECORD.cpy" replacing ==(PREFIX)== by ==WS==.
       01 success          pic 9. 
       try 
           declare counter = 0 
           declare shouldOpen = true 
           declare reader = new CsvReader(csvPath)
           perform varying fields as string occurs any through reader::getRows()
               add 1 to counter 
               if shouldOpen
                   call OPEN-DATABASE using by reference success
                   if success <> 0 
                       raise new Exception ("Could not open database")
                   end-if
               end-if
               set WS-TRANSACTION-ID to type Integer::parseInt(fields(1))
               set WS-ACCOUNT-ID to type Integer::parseInt(fields(2))
               set WS-TRANS-DATE to fields(3)
               set WS-AMOUNT to new BigDecimal(fields(4)) 
               set WS-DESCRIPTION to fields(5)
               call WRITE-TRANSACTION-ROW using WS-TRANSACTION-RECORD success
               if (success <> 0)
                   raise new Exception( "Could not write row" )
               end-if
               if counter b-and h"0ff" = 0 then *> Every 4000 records 
                   set shouldOpen to true
                   call CLOSE-DATABASE using by reference success
                   if success <> 0 
                       raise new Exception ("Could not open database")
                   end-if
               else 
                   set shouldOpen to false
               end-if

           end-perform
       finally 
           call CLOSE-DATABASE using by reference success     
       end-try
       end method. 
       end class.


----------------------------------------------------------------------------


      ******************************************************************
      *                                                                *
      * Copyright 2020-2024 Rocket Software, Inc. or its affiliates.   *
      * All Rights Reserved.                                           *
      *                                                                *
      ******************************************************************

      
      $set sql(dbman=jdbc) 
       
       program-id. DatabaseInitializer.

       data division.
       working-storage section.
       COPY "DataMigrationEntryPoints.cpy". 
       78 DB-CONNECTION-STRING             value "DB_CONNECTION_STRING".
       01 WS-FUNCTION-CODE                 pic x. 
           

       EXEC SQL INCLUDE SQLCA END-EXEC. 
           
       EXEC SQL BEGIN DECLARE SECTION END-EXEC. 
       01 connection-string                pic x(300) value spaces.
       01 WS-TEMP-ID                       pic x(4) comp-x.     
       01 WS-TEMP-ID-2                     pic x(4) comp-x.
       01 WS-TOTAL-TRANSACTIONS            pic x(4) comp-x. 
       01 WS-NUMBER-TRANSACTIONS           pic x(4) comp-x.
       01 csvPath                          string.
       01 tableName                        string. 
       01 sqlCommand                       pic x(1000). 
       EXEC SQL END DECLARE SECTION END-EXEC.
       01 date-characters                  pic x(8). 
       01 condition-class                  pic xx. 
       01 connection-opened                pic 99 comp-5 value 0.       
       01 success-flag                     pic 9. 
       
       linkage section. 
       copy "ACCOUNT-RECORD.cpy" replacing ==(PREFIX)== by ==LNK==.
       copy "CUSTOMER-RECORD.cpy" replacing ==(PREFIX)== by ==LNK==.
       copy "TRANSACTION-RECORD.cpy" replacing ==(PREFIX)== by ==LNK==. 
       01 lnkSuccess                       pic 9. 
           
       procedure division. 
           goback. 
       
      *> Postgres SQL
       entry CREATE-TABLES.
           perform open-database-connection
           exec sql 
                  DROP TABLE if exists public.customer CASCADE;
                  DROP SEQUENCE if exists customer_id_seq;
                  CREATE SEQUENCE customer_id_seq;
                  CREATE TABLE public.customer
               (
                   id integer not null DEFAULT nextval('customer_id_seq'),
                   firstname character varying(60) COLLATE pg_catalog."default",
                   lastname character varying(60) COLLATE pg_catalog."default",
                   CONSTRAINT customer_pkey PRIMARY KEY (id)
               )
               
               TABLESPACE pg_default;
               
               ALTER TABLE public.customer
                   OWNER to postgres;
           end-exec
           perform convert-sqlcode
           perform close-database-connection
           perform open-database-connection 
           
           exec sql
                  DROP TABLE if exists public.account CASCADE;
                  DROP SEQUENCE if exists account_id_seq;
                  CREATE SEQUENCE account_id_seq;
               CREATE TABLE public.account
               (
                   id integer NOT NULL DEFAULT nextval('account_id_seq'),
                   customerid integer,
                   balance character(20) COLLATE pg_catalog."default",
                   type character(1) COLLATE pg_catalog."default",
                   creditlimit character(20) COLLATE pg_catalog."default",
                   CONSTRAINT account_pkey PRIMARY KEY (id),
                   CONSTRAINT account_customerid_fkey FOREIGN KEY (customerid)
                       REFERENCES public.customer (id) MATCH SIMPLE
                       ON UPDATE NO ACTION
                       ON DELETE NO ACTION
               )
               TABLESPACE pg_default;
                ALTER TABLE public.account
                   OWNER to postgres;
               commit;
           end-exec
           perform convert-sqlcode
           perform close-database-connection
           perform open-database-connection 
           
           exec sql
               DROP TABLE if exists public.transaction CASCADE ;
               DROP SEQUENCE if exists transaction_id_seq;
               CREATE SEQUENCE transaction_id_seq;
               CREATE TABLE public.transaction
               (
                   id integer NOT NULL DEFAULT nextval('transaction_id_seq'),
                   accountid integer,
                   transdate character(8) COLLATE pg_catalog."default",
                   amount character(20) COLLATE pg_catalog."default",
                   description character varying(255) COLLATE pg_catalog."default",
                   CONSTRAINT transaction_pkey PRIMARY KEY (id),
                   CONSTRAINT transaction_accountid_fkey FOREIGN KEY (accountid)
                       REFERENCES public.account (id) MATCH SIMPLE
                       ON UPDATE NO ACTION
                       ON DELETE NO ACTION
               )
               
               TABLESPACE pg_default;
               
               ALTER TABLE public.transaction
                   OWNER to postgres;
           end-exec
           perform convert-sqlcode
           
           perform close-database-connection
           goback.

       
       entry WRITE-CUSTOMER-ROW using by reference LNK-CUSTOMER-RECORD
                                                   lnkSuccess.
           move LNK-CUSTOMER-ID of LNK-CUSTOMER-RECORD to WS-TEMP-ID 
           exec sql
               insert into customer 
                   (id, firstName, lastName)
                   values
                   (:WS-TEMP-ID,
                    :LNK-FIRST-NAME,
                    :LNK-LAST-NAME);
           end-exec
           perform convert-sqlcode
           move success-flag to lnkSuccess 
           goback. 
      
       entry WRITE-ACCOUNT-ROW using by reference LNK-ACCOUNT
                                                  lnkSuccess.
           move LNK-ACCOUNT-ID of LNK-ACCOUNT to WS-TEMP-ID-2 
           move LNK-CUSTOMER-ID of LNK-ACCOUNT to WS-TEMP-ID 
           exec sql
               insert into account 
                   (id, customerid, balance, type, creditlimit)
                   values
                   (:WS-TEMP-ID-2,
                    :WS-TEMP-ID,
                    :LNK-BALANCE,
                    :LNK-TYPE, 
                    :LNK-CREDIT-LIMIT)
           end-exec
           perform convert-sqlcode
           move success-flag to lnkSuccess 
           goback. 
       
       entry WRITE-TRANSACTION-ROW using by reference LNK-TRANSACTION-RECORD  
                                                  lnkSuccess.
           move LNK-ACCOUNT-ID of LNK-TRANSACTION-RECORD to WS-TEMP-ID 
           move LNK-TRANS-DATE to date-characters
           exec sql
               insert into transaction
                   (id, accountid, transdate, amount, description)
                   values
                   (:LNK-TRANSACTION-ID,
                    :WS-TEMP-ID,
                    :date-characters,
                    :LNK-AMOUNT, 
                    :LNK-DESCRIPTION);
           end-exec
           perform convert-sqlcode
           move success-flag to lnkSuccess 
           goback. 
       
       entry OPEN-DATABASE using by reference lnkSuccess.
           perform open-database-connection 
           perform convert-sqlcode 
           move success-flag to lnkSuccess
           goback. 

       entry CLOSE-DATABASE using by reference lnkSuccess.
           perform close-database-connection 
           perform convert-sqlcode 
           move success-flag to lnkSuccess
           goback. 

       convert-sqlcode section.
           move sqlstate(1:2) to condition-class
           
           evaluate condition-class
               when "00"
                   move 0 to success-flag 
               when "02" 
                   move 1 to success-flag
               when other
                   display "SQL state " sqlstate
                   display "sql msg " SQLERRM
                   move 9 to success-flag 
           end-evaluate
           .
           
       open-database-connection section.
           if not connection-opened = 1 then 
               perform set-connection-string
               exec sql
                    connect using :connection-string
               end-exec
               move 1 to connection-opened
           else 
               move "00000" to sqlstate
           end-if
           perform convert-sqlcode
           .
           
       close-database-connection section. 
           if connection-opened = 1 
               exec sql 
                   commit work release
               end-exec
               move 0 to connection-opened
           else 
               move "00000" to sqlstate
           end-if
           perform convert-sqlcode
           .
           
       set-connection-string section.
           display DB-CONNECTION-STRING upon environment-name 
           accept connection-string from environment-value
           .   
           
       ---------------------------------========================================================================================


package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.sql.DataSource;
import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.JvmArrayOutputOut;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.JvmIn60457CifNo;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.JvmIn60457OptnFlag;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.JvmInBranchNo;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.JvmInTellerNo;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.JvmOutCifDetails;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.JvmOutErrorNo;
import com.tcs.bancs.microservices.jvm.jvmYONO.JVM60457.LsRecordArea;


public class YONO_Child {
	
	Logger logger = LoggerFactory.getLogger(YONO_Child.class);

	private static final AtomicInteger counter = new AtomicInteger(0);
    private final Lock lock1 = new ReentrantLock();
    private final Lock lock2 = new ReentrantLock();
    private final Lock lock3 = new ReentrantLock();
    private final Lock lock4 = new ReentrantLock();
    private final Lock lock5 = new ReentrantLock();
    
    private static RunUnit sharedRunUnit1;
    private static JVM60457 sharedjvm1;

    private static RunUnit sharedRunUnit2;
    private static JVM60457 sharedjvm2;

    private static RunUnit sharedRunUnit3;
    private static JVM60457 sharedjvm3;
    
    private static RunUnit sharedRunUnit4;
    private static JVM60457 sharedjvm4;
    
    private static RunUnit sharedRunUnit5;
    private static JVM60457 sharedjvm5;
    

    static {
        try {
     	    sharedRunUnit1 = new RunUnit();
            sharedjvm1 = new JVM60457();
            sharedRunUnit1.Add(sharedjvm1);
            
            sharedRunUnit2 = new RunUnit();
            sharedjvm2 = new JVM60457();
            sharedRunUnit2.Add(sharedjvm2);
            
            sharedRunUnit3 = new RunUnit();
            sharedjvm3 = new JVM60457();
            sharedRunUnit3.Add(sharedjvm3);
            
            sharedRunUnit4 = new RunUnit();
            sharedjvm4 = new JVM60457();
            sharedRunUnit4.Add(sharedjvm4);
            
            sharedRunUnit5 = new RunUnit();
            sharedjvm5 = new JVM60457();
            sharedRunUnit5.Add(sharedjvm5);
            System.out.println("Shared RunUnit1,2,3,4,5 initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
	public List<String> callYONOEnquiryChild(String branch_number,  String tellerno, String cifno, String option_flag, DataSource datasource, String commonArea) throws InterruptedException, ExecutionException {
		
		 int startIndex = counter.getAndIncrement() % 5; 
	     RunUnit selectedRunUnit = null;
	     Lock selectedLock = null;
	     
		int index = 0;
		String Output_Acc = "";
		String cif_details = "";
		String errno = "";

		 if (startIndex == 0) {
         	logger.info("after selecting the rununit 1");
             selectedRunUnit = sharedRunUnit1;
             selectedLock = lock1;
         } else if (startIndex == 1) {
         	logger.info("after selecting the rununit 2");
             selectedRunUnit = sharedRunUnit2;
             selectedLock = lock2;
         } else if (startIndex == 2) {
         	logger.info("after selecting the rununit 3");
             selectedRunUnit = sharedRunUnit3;
             selectedLock = lock3;
         } else if (startIndex == 3) {
          	logger.info("after selecting the rununit 4");
            selectedRunUnit = sharedRunUnit4;
            selectedLock = lock4;
        } else if (startIndex == 4) {
         	logger.info("after selecting the rununit 5");
            selectedRunUnit = sharedRunUnit5;
            selectedLock = lock5;
        }
		
		logger.info("VC------------------------YONO Enquiry Child Service Started------------------------VC");
		
		JvmIn60457CifNo     cif_number        = new JvmIn60457CifNo();
		JvmIn60457OptnFlag  opt_flag          = new JvmIn60457OptnFlag();
		JvmInBranchNo       branch_num        = new JvmInBranchNo();
		JvmInTellerNo       teller_num        = new JvmInTellerNo();
		LsRecordArea 		Rec_Area          = new LsRecordArea();
		JvmOutCifDetails    out_cif_details   = new JvmOutCifDetails();
		JvmArrayOutputOut   out_account_array = new JvmArrayOutputOut();
		JvmOutErrorNo       out_error_num     = new JvmOutErrorNo();
 		
		teller_num.setJvmInTellerNo(String.format("%016d", new BigInteger(tellerno)));
		cif_number.setJvmIn60457CifNo(String.format("%017d", new BigInteger(cifno)));
		opt_flag.setJvmIn60457OptnFlag(option_flag);
		branch_num.setJvmInBranchNo(branch_number);
		Rec_Area.setLsRecordArea(commonArea);
//		 RunUnit run1 = new RunUnit();
//		 try (Connection connection = datasource.getConnection()){
		if (selectedLock.tryLock(2, TimeUnit.SECONDS)) {
			try {
//			 selectedRunUnit.Add(jvm60457);
			 selectedRunUnit.Call("JVM60457", cif_number.get_Reference(), opt_flag.get_Reference(), branch_num.get_Reference(), teller_num.get_Reference(), out_cif_details.get_Reference(), out_account_array.get_Reference(),  out_error_num.get_Reference(), Rec_Area.get_Reference());
 	         errno = out_error_num.getJvmOutErrorNo();
//		 } catch (SQLException e) {
////START OF CR 25010156
////		     errno = "VC010";
//			 errno = "3293";
////END OF CR 25010156
//		}
		 
			 cif_details = out_cif_details.getJvmOutCifDetails();
			index = 0;
			while (index <= 9999) {
				String account_details = out_account_array.getJvmOutput60457Output(index);
				if (!account_details.trim().isEmpty()) {
					Output_Acc = Output_Acc + account_details;
					index+=1;
				}
				else {
					break;
				}
			}
			} finally { 
				selectedLock.unlock();
				logger.info("selectedLock is unlocked" +selectedLock);
				}
		}
		else {
			logger.info("++++++++++++++++++++TIMEOUT++++++++++++++++++++");
			errno = "0155";
		}
//			  run1.close();
			List<String> res = new ArrayList<>();
			res.add(cif_details);
			if (!Output_Acc.isEmpty()) {
				res.add(Output_Acc.substring(0, Output_Acc.length() - 317));
			}
			else {
				res.add(Output_Acc);
			}
			
			res.add(String.valueOf(index-1));
			res.add(errno);
			
			return res;
	}
	}
       
       

