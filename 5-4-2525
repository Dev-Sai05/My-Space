//           SBI Core Banking Project, Hyderabad, India.          *
//*****************************************************************
//                                                                *
//  	           PROGRAM - BalanceEnqService_Child.Java                 
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
//Naga Sai Ganesh  : 27/11/2024    : 24090013  :  MICROSERVICES   *
//Niharika Tammana : 27/11/2024    : 24090013  :  MICROSERVICES   *
//----------------------------------------------------------------*
//Naga Sai Ganesh : 11/12/2024    :  24120051  :   MICROSERVICES  *
//Niharika Tammana : 11/12/2024    : 24120051  :  MICROSERVICES   *
//----------------------------------------------------------------*
package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.LsRecordArea;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL.Ls400OutputResponse;

public class BalanceEnqService_Child {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
   Connection connection;

    public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords, String lacctno1, DataSource datasource, String inpcommonarea, String refno) {
    	
    	String errno = new String();
    	String outResponse = new String();
    	
    	logger.info("VC------------------------Balance_Enquiry_Child started------------------------VC" + refno);
        lacctno1 = lacctno1.substring(0, lacctno1.length()-1);
        String lacctno =  lacctno1.equals("0000000000000000") ? "0000000000000000" : String.format("%016d", new BigInteger(lacctno1));
        
        // Split the input account number into chunks of 16 digits
        List<String> accountNumbers = splitIntoChunks(accno, 16);

        //Limit to the first Three two one Records

//        if (accountNumbers.size()>321) {
//              
//              accountNumbers = accountNumbers.subList(0, 321);
//
//        }

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;
        StringBuilder allRecordsBuilder = new StringBuilder();
        int fetchedRecordsCount = 0;

        // If a target account number is provided, find it
        if (lacctno != null && !lacctno.isEmpty() && !lacctno.equals("0000000000000000")) {
            int index = accountNumbers.indexOf(lacctno);
            if (index != -1) {
                accountNumbers = accountNumbers.subList(index + 1, accountNumbers.size());
                logger.info("Target account number found. Processing records below it" );
            } else {
                logger.info("Target account number not found in the list.");
                // Return error code if account number is not found
                List<String> errorRes = new ArrayList<>();
                errorRes.add("");
                errorRes.add("0");
                errorRes.add("0108");  // Error code for not found account number
                return errorRes;
            }
        }

        // Process accounts sequentially
        for (String accountNumber : accountNumbers) {
            if (fetchedRecordsCount >= numberOfRecordsToFetch) {
                break; // Stop processing if required number of records is fetched
            }
            JVMAVBL jvmavbl = new JVMAVBL();
            // Create input and output objects for each account number
            Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
            Ls400InpEnqType input2 = new Ls400InpEnqType();
            Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
            Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
            Ls400OutputResponse output3 = new Ls400OutputResponse();
            LsRecordArea   inputrec = new LsRecordArea();
            // Set input parameters
            input1.setLs400InputAccountNumber(accountNumber);
            input2.setLs400InpEnqType("1");
            inputrec.setLsRecordArea(inpcommonarea);
            try (Connection connection = datasource.getConnection()){
				//connection = datasource.getConnection();
            RunUnit run1 = new RunUnit();
            run1.Add(jvmavbl);
            
            run1.Call("JVMAVBL", input1.get_Reference(), input2.get_Reference(), output1.get_Reference(), output2.get_Reference(), output3.get_Reference(), inputrec.get_Reference(), connection);
            // Call the JVMAVBL service
            //jvmavbl.JVMAVBL(input1, input2, output1, output2, output3, connection, );

            errno = output1.getLs400OutputErrorNumber();
            outResponse = output3.getLs400OutputResponse();
           
            if (errno.equals("0000")) {
            	errno = "0000";
                if (outResponse != null && !outResponse.trim().isEmpty()) {
                    allRecordsBuilder.append(outResponse.trim());
                    logger.info(fetchedRecordsCount + "Record fetched successfully for account" + refno);
                    fetchedRecordsCount++;                   
                }
            } 
            else if(errno.equals("155") || errno.equals("0155")){
            	errno = "0155";
                break;
            }
            else {
            	errno = "0000";
            }
            run1.close();
            } catch (SQLException e) {
            	//START OF IR 25010209
//            		errno = "VC010";
            		errno = "3293";
            	//END OF IR 25010209
			}
        }

        // Prepare response
        if(fetchedRecordsCount == 0) {
        	errno = "0188";
        }
        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(errno); // Return success only if records are fetched

        logger.info("VC------------------------Balance_Enquiry_Child ended------------------------VC" + refno);
        
        return res;
    }
    
    private List<String> splitIntoChunks(String input, int chunkSize) {
        List<String> chunks = new ArrayList<>();
        for (int i = 0; i < input.length(); i += chunkSize) {
            int end = Math.min(input.length(), i + chunkSize);
            String chunk = input.substring(i, end).trim();
            // Add only non-empty, non-zero chunks
            if (!chunk.isEmpty() && !chunk.matches("^0+$")) {
                chunks.add(chunk);
            }
        }
        return chunks;
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}



--------------------------------------------------------------------------------------------------------------------


package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.*;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);    

    private static RunUnit sharedRunUnit1;
    private static JVME1MR sharedJvmmre1;

    private static RunUnit sharedRunUnit2;
    private static JVME1MR sharedJvmmre1_2;

    // Initialize both RunUnits
    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvmmre1 = new JVME1MR();
            sharedRunUnit1.Add(sharedJvmmre1);
            System.out.println("Shared RunUnit1 initialized.");

            sharedRunUnit2 = new RunUnit();
            sharedJvmmre1_2 = new JVME1MR();
            sharedRunUnit2.Add(sharedJvmmre1_2);
            System.out.println("Shared RunUnit2 initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, String connection, String driverclass) 
                                      throws InterruptedException, ExecutionException {

        logger.info("VC------------------------MRE1 Child Service Started------------------------VC");

        // Determine which RunUnit to use based on reference number (even -> sharedRunUnit1, odd -> sharedRunUnit2)
        boolean isEvenTransaction = (Integer.parseInt(referencenum) % 2 == 0);
        RunUnit selectedRunUnit = isEvenTransaction ? sharedRunUnit1 : sharedRunUnit2;
        String runUnitName = isEvenTransaction ? "RunUnit1" : "RunUnit2";

        synchronized (selectedRunUnit) {  // Ensure thread safety for the chosen RunUnit
            String errno = "";
            String outResponse = "";

            LsTransactionType input2  = new LsTransactionType();
            LsProductCode     input3  = new LsProductCode();
            LsBranchNumber    input4  = new LsBranchNumber();         
            LsReferenceNumber input5  = new LsReferenceNumber();
            LsAccountNumber   input6  = new LsAccountNumber();
            LsVcmiscDriverClass input7 = new LsVcmiscDriverClass();
            LsVcmiscConnectionUrl input8 = new LsVcmiscConnectionUrl();
            LsOutputResponse  output1 = new LsOutputResponse();
            LsErrorNumber     output2 = new LsErrorNumber();
            LsRecordArea      recarea = new LsRecordArea();

            input2.setLsTransactionType(transactiontype);
            input3.setLsProductCode(productcode);
            input4.setLsBranchNumber(branchno);
            input5.setLsReferenceNumber(referencenum);
            input6.setLsAccountNumber(accountno);
            input7.setLsVcmiscDriverClass(driverclass);
            input8.setLsVcmiscConnectionUrl(connection);
            recarea.setLsRecordArea(commonArea);

            logger.info("Using " + runUnitName + " for reference number: " + referencenum);

            selectedRunUnit.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(), 
                                 input5.get_Reference(), input6.get_Reference(), output1.get_Reference(), 
                                 output2.get_Reference(), recarea.get_Reference(), input8.get_Reference(), input7.get_Reference());

            outResponse = output1.getLsOutputResponse();
            errno = String.valueOf(output2.getLsErrorNumber());

            logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");

            List<String> res = new ArrayList<>();
            res.add(outResponse);
            res.add(errno);
            return res;
        }
    }
}

-----------------------------------------------------------------------------


package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.*;
import com.tcs.bancs.microservices.jvm.e1mr2.JVME1MR2;
import com.tcs.bancs.microservices.jvm.e1mr2.JVME1MR2.*;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);    


    private static RunUnit sharedRunUnit1;
    private static JVME1MR sharedJvmmre1;

    private static RunUnit sharedRunUnit2;
    private static JVME1MR2 sharedJvmmre1_2;

    // Initialize both RunUnits
    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvmmre1 = new JVME1MR();
            sharedRunUnit1.Add(sharedJvmmre1);
            System.out.println("Shared RunUnit1 initialized.");

            sharedRunUnit2 = new RunUnit();
            sharedJvmmre1_2 = new JVME1MR2();
            sharedRunUnit2.Add(sharedJvmmre1_2);
            System.out.println("Shared RunUnit2 initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, String connection, String driverclass) 
                                      throws InterruptedException, ExecutionException {
        MRE1Service_Child obj = new MRE1Service_Child();
        logger.info("VC------------------------MRE1 Child Service Started------------------------VC");

        // Determine which RunUnit to use based on reference number (even -> sharedRunUnit1, odd -> sharedRunUnit2)
        boolean isEvenTransaction = (Integer.parseInt(referencenum) % 2 == 0);
        RunUnit selectedRunUnit = isEvenTransaction ? sharedRunUnit1 : sharedRunUnit2;
        String runUnitName = isEvenTransaction ? "RunUnit1" : "RunUnit2";
        List<String> res = new ArrayList<>();
        synchronized (selectedRunUnit) {  // Ensure thread safety for the chosen RunUnit
        	
        	if(runUnitName.equals("RunUnit1")) {
        		res = obj.callProject1(transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection, driverclass);
        	}
        	else if(runUnitName.equals("RunUnit2")) {
        		res = obj.callProject2(transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection, driverclass);
        	}
            return res;
        }
    }
    
    public List<String> callProject1(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, String connection, String driverclass) {
    	 logger.info("VC------------------------project 1 called------------------------VC" + referencenum);
    	String errno = "";
        String outResponse = "";

        LsTransactionType input2  = new LsTransactionType();
        LsProductCode     input3  = new LsProductCode();
        LsBranchNumber    input4  = new LsBranchNumber();         
        LsReferenceNumber input5  = new LsReferenceNumber();
        LsAccountNumber   input6  = new LsAccountNumber();
        LsVcmiscDriverClass input7 = new LsVcmiscDriverClass();
        LsVcmiscConnectionUrl input8 = new LsVcmiscConnectionUrl();
        LsOutputResponse  output1 = new LsOutputResponse();
        LsErrorNumber     output2 = new LsErrorNumber();
        LsRecordArea      recarea = new LsRecordArea();

        input2.setLsTransactionType(transactiontype);
        input3.setLsProductCode(productcode);
        input4.setLsBranchNumber(branchno);
        input5.setLsReferenceNumber(referencenum);
        input6.setLsAccountNumber(accountno);
        input7.setLsVcmiscDriverClass(driverclass);
        input8.setLsVcmiscConnectionUrl(connection);
        recarea.setLsRecordArea(commonArea);

        sharedRunUnit1.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(), 
                             input5.get_Reference(), input6.get_Reference(), output1.get_Reference(), 
                             output2.get_Reference(), recarea.get_Reference(), input8.get_Reference(), input7.get_Reference());

        outResponse = output1.getLsOutputResponse();
        errno = String.valueOf(output2.getLsErrorNumber());

        logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");

        List<String> res = new ArrayList<>();
        res.add(outResponse);
        res.add(errno);
        return res;
    }
    
    public List<String> callProject2(String transactiontype, String productcode, String branchno, 
            String referencenum, String accountno, String commonArea, String connection, String driverclass) {
    	 logger.info("VC------------------------project 2 called------------------------VC" + referencenum);
			String errno = "";
			String outResponse = "";
			
			LsTransactionType2 input2  = new LsTransactionType2();
			LsProductCode2     input3  = new LsProductCode2();
			LsBranchNumber2    input4  = new LsBranchNumber2();         
			LsReferenceNumber2 input5  = new LsReferenceNumber2();
			LsAccountNumber2  input6  = new LsAccountNumber2();
			LsVcmiscDriverClass2 input7 = new LsVcmiscDriverClass2();
			LsVcmiscConnectionUrl2 input8 = new LsVcmiscConnectionUrl2();
			LsOutputResponse2  output1 = new LsOutputResponse2();
			LsErrorNumber2     output2 = new LsErrorNumber2();
			LsRecordArea2      recarea = new LsRecordArea2();
			
			input2.setLsTransactionType2(transactiontype);
			input3.setLsProductCode2(productcode);
			input4.setLsBranchNumber2(branchno);
			input5.setLsReferenceNumber2(referencenum);
			input6.setLsAccountNumber2(accountno);
			input7.setLsVcmiscDriverClass2(driverclass);
			input8.setLsVcmiscConnectionUrl2(connection);
			recarea.setLsRecordArea2(commonArea);
			
			sharedRunUnit2.Call("JVME1MR2", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(), 
			   input5.get_Reference(), input6.get_Reference(), output1.get_Reference(), 
			   output2.get_Reference(), recarea.get_Reference(), input8.get_Reference(), input7.get_Reference());
			
			outResponse = output1.getLsOutputResponse2();
			errno = String.valueOf(output2.getLsErrorNumber2());
			
			logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");
			
			List<String> res = new ArrayList<>();
			res.add(outResponse);
			res.add(errno);
			return res;
    }
}


-----------------++-------------

package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.*;
import com.tcs.bancs.microservices.jvm.e1mr2.JVME1MR2;
import com.tcs.bancs.microservices.jvm.e1mr2.JVME1MR2.*;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);    

    private static RunUnit sharedRunUnit1;
    private static JVME1MR sharedJvmmre1;

    private static RunUnit sharedRunUnit2;
    private static JVME1MR2 sharedJvmmre1_2;

    static {
        try {
            sharedRunUnit1 = new RunUnit();
            sharedJvmmre1 = new JVME1MR();
            sharedRunUnit1.Add(sharedJvmmre1);
            System.out.println("Shared RunUnit1 (JVME1MR) initialized.");

            sharedRunUnit2 = new RunUnit();
            sharedJvmmre1_2 = new JVME1MR2();
            sharedRunUnit2.Add(sharedJvmmre1_2);
            System.out.println("Shared RunUnit2 (JVME1MR2) initialized.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, 
                                      String connection, String driverclass) 
                                      throws InterruptedException, ExecutionException {

        logger.info("VC--- MRE1 Dispatcher Service Started | Ref: {} ---VC", referencenum);

        boolean isEvenTransaction = (Integer.parseInt(referencenum) % 2 == 0);
        RunUnit selectedRunUnit = isEvenTransaction ? sharedRunUnit1 : sharedRunUnit2;
        List<String> res;

        synchronized (selectedRunUnit) {
            if (isEvenTransaction) {
                logger.info("VC--- Routing to Project 1 (JVME1MR) ---VC");
                res = callProject1(transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection, driverclass);
            } else {
                logger.info("VC--- Routing to Project 2 (JVME1MR2) ---VC");
                res = callProject2(transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection, driverclass);
            }
        }

        logger.info("VC--- MRE1 Dispatcher Service Ended | Ref: {} ---VC", referencenum);
        return res;
    }

    public List<String> callProject1(String transactiontype, String productcode, String branchno, 
                                     String referencenum, String accountno, String commonArea, 
                                     String connection, String driverclass) {

        logger.info("VC--- Project 1 Called | Ref: {} ---VC", referencenum);

        LsTransactionType input2 = new LsTransactionType();
        LsProductCode input3 = new LsProductCode();
        LsBranchNumber input4 = new LsBranchNumber();         
        LsReferenceNumber input5 = new LsReferenceNumber();
        LsAccountNumber input6 = new LsAccountNumber();
        LsVcmiscDriverClass input7 = new LsVcmiscDriverClass();
        LsVcmiscConnectionUrl input8 = new LsVcmiscConnectionUrl();
        LsOutputResponse output1 = new LsOutputResponse();
        LsErrorNumber output2 = new LsErrorNumber();
        LsRecordArea recarea = new LsRecordArea();

        input2.setLsTransactionType(transactiontype);
        input3.setLsProductCode(productcode);
        input4.setLsBranchNumber(branchno);
        input5.setLsReferenceNumber(referencenum);
        input6.setLsAccountNumber(accountno);
        input7.setLsVcmiscDriverClass(driverclass);
        input8.setLsVcmiscConnectionUrl(connection);
        recarea.setLsRecordArea(commonArea);

        sharedRunUnit1.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(), 
                            input5.get_Reference(), input6.get_Reference(), output1.get_Reference(), 
                            output2.get_Reference(), recarea.get_Reference(), input8.get_Reference(), 
                            input7.get_Reference());

        List<String> res = new ArrayList<>();
        res.add(output1.getLsOutputResponse());
        res.add(String.valueOf(output2.getLsErrorNumber()));

        logger.info("VC--- Project 1 Execution Finished | Ref: {} ---VC", referencenum);
        return res;
    }

    public List<String> callProject2(String transactiontype, String productcode, String branchno, 
                                     String referencenum, String accountno, String commonArea, 
                                     String connection, String driverclass) {

        logger.info("VC--- Project 2 Called | Ref: {} ---VC", referencenum);

        LsTransactionType2 input2 = new LsTransactionType2();
        LsProductCode2 input3 = new LsProductCode2();
        LsBranchNumber2 input4 = new LsBranchNumber2();         
        LsReferenceNumber2 input5 = new LsReferenceNumber2();
        LsAccountNumber2 input6 = new LsAccountNumber2();
        LsVcmiscDriverClass2 input7 = new LsVcmiscDriverClass2();
        LsVcmiscConnectionUrl2 input8 = new LsVcmiscConnectionUrl2();
        LsOutputResponse2 output1 = new LsOutputResponse2();
        LsErrorNumber2 output2 = new LsErrorNumber2();
        LsRecordArea2 recarea = new LsRecordArea2();

        input2.setLsTransactionType2(transactiontype);
        input3.setLsProductCode2(productcode);
        input4.setLsBranchNumber2(branchno);
        input5.setLsReferenceNumber2(referencenum);
        input6.setLsAccountNumber2(accountno);
        input7.setLsVcmiscDriverClass2(driverclass);
        input8.setLsVcmiscConnectionUrl2(connection);
        recarea.setLsRecordArea2(commonArea);

        sharedRunUnit2.Call("JVME1MR2", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(), 
                            input5.get_Reference(), input6.get_Reference(), output1.get_Reference(), 
                            output2.get_Reference(), recarea.get_Reference(), input8.get_Reference(), 
                            input7.get_Reference());

        List<String> res = new ArrayList<>();
        res.add(output1.getLsOutputResponse2());
        res.add(String.valueOf(output2.getLsErrorNumber2()));

        logger.info("VC--- Project 2 Execution Finished | Ref: {} ---VC", referencenum);
        return res;
    }
}

