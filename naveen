@PostMapping("/Balance_Enq")
public ResponseEntity<ResponseBean> balanceEnquiry(@RequestBody RequestBean reqBean) {
    ResponseBean errorResponse = new ResponseBean();
    ExecutorService executor = Executors.newFixedThreadPool(2);

    try {
        // Part A: Validations (Java-side)
        CompletableFuture<Void> validationFuture = CompletableFuture.supplyAsync(() -> {
            try {
                validateAccountNum(reqBean.getAccNo());
                validateBranchNum(reqBean.getBranchNo());
                validateTeller(reqBean.getTellerId());
                return null; // Success
            } catch (Exception e) {
                throw new CompletionException(e); // propagate error
            }
        }, executor);

        // Part B: Sysc validation + COBOL call (starts in parallel)
        CompletableFuture<ResponseBean> cobolFuture = CompletableFuture.supplyAsync(() -> {
            try {
                validateSyscMode(reqBean);
                return callCobolAndFetchData(reqBean);
            } catch (Exception e) {
                throw new CompletionException(e);
            }
        }, executor);

        // When validation passes, wait for COBOL response
        return validationFuture.thenCompose(v -> cobolFuture)
                .thenApply(ResponseEntity::ok)
                .exceptionally(ex -> {
                    Throwable cause = ex.getCause() != null ? ex.getCause() : ex;
                    errorResponse.setResponseCode("999");
                    errorResponse.setResponseMessage("Error: " + cause.getMessage());
                    return ResponseEntity.badRequest().body(errorResponse);
                })
                .get(); // Block until complete

    } catch (Exception e) {
        errorResponse.setResponseCode("999");
        errorResponse.setResponseMessage("Internal server error: " + e.getMessage());
        return ResponseEntity.internalServerError().body(errorResponse);
    } finally {
        executor.shutdown(); // optional for shared pool
    }
}