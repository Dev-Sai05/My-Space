//    SBI Core Banking Project, Kondapur, Hyderabad, India.       *
//*****************************************************************
//                                                                *
//                 PROGRAM - MRE1_Child.Java                      *
//                                                                *
//*****************************************************************
//                 P R O G R A M    H I S T O R Y                 *
//                                                                *
//   PROGRAMMER    :    DATE       :  SPR NO   :   COMMENTS       *
//----------------------------------------------------------------*
// MALAPATI ROHITH : 27/11/2024    : 24110151  :  MICROSERVICES   *
//----------------------------------------------------------------*

package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsAccountNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsBranchNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsProductCode;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsReferenceNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsTransactionType;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsOutputResponse;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsRecordArea;;



public class MRE1Service_Child {
	
    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);    
    
    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, String referencenum, String accountno, String commonArea, Connection connection) throws InterruptedException, ExecutionException {
    	
    	logger.info("VC------------------------MRE1 Child Service Started------------------------VC");
    	String     errno         =     new String();
    	String     outResponse   =     new String();
    	JVME1MR    jvmmre1       =     new JVME1MR();
    	
    	
    	LsTransactionType input2  =   new LsTransactionType();
    	LsProductCode     input3  =   new LsProductCode();
    	LsBranchNumber    input4  =   new LsBranchNumber(); 	
    	LsReferenceNumber input5  =   new LsReferenceNumber();
    	LsAccountNumber   input6  =   new LsAccountNumber();
    	LsOutputResponse  output1 =   new LsOutputResponse();
    	LsErrorNumber     output2 =   new LsErrorNumber();
    	LsRecordArea      recarea =   new LsRecordArea();
    	
    	
    	input2.setLsTransactionType(transactiontype);
    	input3.setLsProductCode(productcode);
    	input4.setLsBranchNumber(branchno);
    	input5.setLsReferenceNumber(referencenum);
    	input6.setLsAccountNumber(accountno);
    	recarea.setLsRecordArea(commonArea);
         
		
        RunUnit run1 = new RunUnit();
        run1.Add(jvmmre1);
        run1.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(),input4.get_Reference(),input5.get_Reference(),input6.get_Reference(), output1.get_Reference(),output2.get_Reference(), recarea.get_Reference(),connection);
    	outResponse = output1.getLsOutputResponse();
    	errno=String.valueOf(output2.getLsErrorNumber());
    	run1.close();

    	logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");
    	
    	List<String> res = new ArrayList<>();
    	res.add(outResponse);
    	res.add(errno);
    	return res;
	
    }

}


----

package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsAccountNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsBranchNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsProductCode;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsReferenceNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsTransactionType;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsOutputResponse;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsRecordArea;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);

    private static final int NUM_RUN_UNITS = 5;
    private final ExecutorService executor = Executors.newFixedThreadPool(NUM_RUN_UNITS);
    private final List<RunUnit> runUnits = new ArrayList<>();

    public MRE1Service_Child() {
        // Initialize 5 RunUnit instances
        for (int i = 0; i < NUM_RUN_UNITS; i++) {
            runUnits.add(new RunUnit());
        }
    }

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, 
                                      Connection connection) throws InterruptedException, ExecutionException {

        logger.info("VC------------------------MRE1 Child Service Started------------------------VC");

        // Submit task to the executor
        Future<List<String>> future = executor.submit(() -> executeTransaction(transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection));

        List<String> result = future.get(); // Wait for task to complete

        logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");
        return result;
    }

    private List<String> executeTransaction(String transactiontype, String productcode, String branchno, 
                                            String referencenum, String accountno, String commonArea, 
                                            Connection connection) {

        int runUnitIndex = (int) (Thread.currentThread().getId() % NUM_RUN_UNITS);
        RunUnit runUnit = runUnits.get(runUnitIndex);

        JVME1MR jvmmre1 = new JVME1MR();

        LsTransactionType input2 = new LsTransactionType();
        LsProductCode input3 = new LsProductCode();
        LsBranchNumber input4 = new LsBranchNumber();
        LsReferenceNumber input5 = new LsReferenceNumber();
        LsAccountNumber input6 = new LsAccountNumber();
        LsOutputResponse output1 = new LsOutputResponse();
        LsErrorNumber output2 = new LsErrorNumber();
        LsRecordArea recarea = new LsRecordArea();

        input2.setLsTransactionType(transactiontype);
        input3.setLsProductCode(productcode);
        input4.setLsBranchNumber(branchno);
        input5.setLsReferenceNumber(referencenum);
        input6.setLsAccountNumber(accountno);
        recarea.setLsRecordArea(commonArea);

        runUnit.Add(jvmmre1);
        runUnit.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
                     input5.get_Reference(), input6.get_Reference(), output1.get_Reference(),
                     output2.get_Reference(), recarea.get_Reference(), connection);

        String outResponse = output1.getLsOutputResponse();
        String errno = String.valueOf(output2.getLsErrorNumber());

        List<String> res = new ArrayList<>();
        res.add(outResponse);
        res.add(errno);

        return res;
    }

    public void shutdown() {
        executor.shutdown();
        for (RunUnit runUnit : runUnits) {
            runUnit.close();
        }
    }
}


------

package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsAccountNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsBranchNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsProductCode;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsReferenceNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsTransactionType;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsOutputResponse;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsRecordArea;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);

    private static final int NUM_THREADS = 5;
    private final ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, 
                                      Connection connection) throws InterruptedException, ExecutionException {

        logger.info("VC------------------------MRE1 Child Service Started------------------------VC");

        // Submit transaction execution as a separate task
        Future<List<String>> future = executor.submit(() -> executeTransaction(transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection));

        List<String> result = future.get(); // Wait for execution to complete

        logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");
        return result;
    }

    private List<String> executeTransaction(String transactiontype, String productcode, String branchno, 
                                            String referencenum, String accountno, String commonArea, 
                                            Connection connection) {

        RunUnit runUnit = new RunUnit();  // Create a new RunUnit for each transaction
        JVME1MR jvmmre1 = new JVME1MR();

        LsTransactionType input2 = new LsTransactionType();
        LsProductCode input3 = new LsProductCode();
        LsBranchNumber input4 = new LsBranchNumber();
        LsReferenceNumber input5 = new LsReferenceNumber();
        LsAccountNumber input6 = new LsAccountNumber();
        LsOutputResponse output1 = new LsOutputResponse();
        LsErrorNumber output2 = new LsErrorNumber();
        LsRecordArea recarea = new LsRecordArea();

        input2.setLsTransactionType(transactiontype);
        input3.setLsProductCode(productcode);
        input4.setLsBranchNumber(branchno);
        input5.setLsReferenceNumber(referencenum);
        input6.setLsAccountNumber(accountno);
        recarea.setLsRecordArea(commonArea);

        runUnit.Add(jvmmre1);
        runUnit.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
                     input5.get_Reference(), input6.get_Reference(), output1.get_Reference(),
                     output2.get_Reference(), recarea.get_Reference(), connection);

        String outResponse = output1.getLsOutputResponse();
        String errno = String.valueOf(output2.getLsErrorNumber());

        runUnit.close(); // Ensure RunUnit is closed after execution (this releases the DB connection)

        List<String> res = new ArrayList<>();
        res.add(outResponse);
        res.add(errno);

        return res;
    }

    public void shutdown() {
        executor.shutdown();
    }
}


++++++

package com.tcs.bancs.microservices.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import com.microfocus.cobol.runtimeservices.RunUnit;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsAccountNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsBranchNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsProductCode;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsReferenceNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsTransactionType;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsErrorNumber;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsOutputResponse;
import com.tcs.bancs.microservices.jvm.e1mr.JVME1MR.LsRecordArea;

public class MRE1Service_Child {

    Logger logger = LoggerFactory.getLogger(MRE1Service_Child.class);

    private static final int NUM_THREADS = 5;
    private final ExecutorService executor = Executors.newFixedThreadPool(NUM_THREADS);

    public List<String> callMre1Child(String transactiontype, String productcode, String branchno, 
                                      String referencenum, String accountno, String commonArea, 
                                      Connection connection) throws InterruptedException, ExecutionException {

        logger.info("VC------------------------MRE1 Child Service Started------------------------VC");

        // Submit transaction execution as a separate task
        Future<List<String>> future = executor.submit(() -> executeTransaction(transactiontype, productcode, branchno, referencenum, accountno, commonArea, connection));

        List<String> result = future.get(); // Wait for execution to complete

        logger.info("VC------------------------MRE1 Child Service Ended------------------------VC");
        return result;
    }

    private List<String> executeTransaction(String transactiontype, String productcode, String branchno, 
                                            String referencenum, String accountno, String commonArea, 
                                            Connection connection) {

        RunUnit runUnit = new RunUnit();  // Create a new RunUnit for each transaction
        JVME1MR jvmmre1 = new JVME1MR();

        LsTransactionType input2 = new LsTransactionType();
        LsProductCode input3 = new LsProductCode();
        LsBranchNumber input4 = new LsBranchNumber();
        LsReferenceNumber input5 = new LsReferenceNumber();
        LsAccountNumber input6 = new LsAccountNumber();
        LsOutputResponse output1 = new LsOutputResponse();
        LsErrorNumber output2 = new LsErrorNumber();
        LsRecordArea recarea = new LsRecordArea();

        input2.setLsTransactionType(transactiontype);
        input3.setLsProductCode(productcode);
        input4.setLsBranchNumber(branchno);
        input5.setLsReferenceNumber(referencenum);
        input6.setLsAccountNumber(accountno);
        recarea.setLsRecordArea(commonArea);

        runUnit.Add(jvmmre1);
        runUnit.Call("JVME1MR", input2.get_Reference(), input3.get_Reference(), input4.get_Reference(),
                     input5.get_Reference(), input6.get_Reference(), output1.get_Reference(),
                     output2.get_Reference(), recarea.get_Reference(), connection);

        String outResponse = output1.getLsOutputResponse();
        String errno = String.valueOf(output2.getLsErrorNumber());

        runUnit.close(); // Close the RunUnit after transaction completion to release DB connection

        List<String> res = new ArrayList<>();
        res.add(outResponse);
        res.add(errno);

        return res;
    }

    public void shutdown() {
        executor.shutdown(); // Gracefully shut down the executor service
    }
}