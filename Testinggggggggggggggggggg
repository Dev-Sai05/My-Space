package com.tcs.bancs.microservices.services;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;

public class BalanceEnqService_Child {

    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);
    JVMAVBL jvmavbl = new JVMAVBL();

    public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords) throws InterruptedException, ExecutionException {
        logger.info("Starting Balance Enquiry Child Service...");

        // Split the input account number into chunks of 16 digits
        List<String> accountNumbers = splitIntoChunks(accno, 16);
        if (accountNumbers.isEmpty()) {
            logger.error("Invalid account number input.");
            return List.of("No valid account numbers", "0", "ERROR");
        }

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;
        ForkJoinPool customThreadPool = new ForkJoinPool(25);
        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();
        StringBuilder allRecordsBuilder = new StringBuilder();

        int fetchedRecordsCount = 0;

        for (String accountNumber : accountNumbers) {
            final String currentAccountNumber = accountNumber;

            CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
                Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
                Ls400InpEnqType input2 = new Ls400InpEnqType();
                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                Ls400OutputResponse output3 = new Ls400OutputResponse();

                input1.setLs400InputAccountNumber(currentAccountNumber);
                input2.setLs400InpEnqType("1");

                jvmavbl.JVMAVBL(input1, input2, output1, output2, output3);

                ResponseData responseData = new ResponseData();
                responseData.errno = output1.getLs400OutputErrorNumber();
                responseData.outResponse = output3.getLs400OutputResponse();

                return responseData;
            }, customThreadPool);

            futures.add(future);
        }

        for (CompletableFuture<ResponseData> future : futures) {
            ResponseData result = future.get();

            if ("0000".equals(result.errno) && result.outResponse != null && !result.outResponse.trim().isEmpty()) {
                allRecordsBuilder.append(result.outResponse.trim());
                fetchedRecordsCount++;
            } else if ("7998".equals(result.errno)) {
                logger.warn("Error 7998 encountered for account. Skipping further processing.");
                break;
            } else {
                logger.warn("Invalid response or error encountered. Error No: " + result.errno);
            }

            if (fetchedRecordsCount >= numberOfRecordsToFetch) {
                break;
            }
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add("0000"); // Assuming overall process success if records were fetched.

        logger.info("Balance Enquiry Child Service completed.");
        customThreadPool.shutdown();
        return res;
    }

    private List<String> splitIntoChunks(String input, int chunkSize) {
        List<String> chunks = new ArrayList<>();
        for (int i = 0; i < input.length(); i += chunkSize) {
            int end = Math.min(input.length(), i + chunkSize);
            chunks.add(input.substring(i, end));
        }
        return chunks;
    }

    public class ResponseData {
        String outResponse;
        String errno;
    }
}









package com.tcs.bancs.microservices.services;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tcs.bancs.microservices.jvm.balenq.JVMAVBL;
import com.tcs.bancs.microservices.jvm.balenq.Ls400AccountActiveFlag;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InputAccountNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400InpEnqType;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputErrorNumber;
import com.tcs.bancs.microservices.jvm.balenq.Ls400OutputResponse;

public class BalanceEnqService_Child {
	Logger logger = LoggerFactory.getLogger(AccountEnqService_Child.class);

	JVMAVBL jvmavbl = new JVMAVBL();
    String accno

	public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords) throws InterruptedException, ExecutionException {

		logger.info("VC------------------------AVALABLE BALANCE Child Service Started------------------------VC" + accno);

        String lacctno = accno == null ? "0000000000000000" : String.format("%016d", new BigInteger(accno));

        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;

        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();

        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        int fetchedRecordsCount = 0;

        StringBuilder allRecordsBuilder = new StringBuilder();

        while (fetchedRecordsCount < numberOfRecordsToFetch) {
            final String currentLacctno = lacctno;

            CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
            

            	Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
            	Ls400InpEnqType input2 = new Ls400InpEnqType();
            	Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
            	Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
            	Ls400OutputResponse output3 = new Ls400OutputResponse();
                 
                input1.setLs400InputAccountNumber(currentLacctno);
                input2.setLs400InpEnqType("1");
                                
                jvmavbl.JVMAVBL(input1,input2,output1,output2,output3);

                ResponseData responseData = new ResponseData();
                responseData.outResponse = output2.getLs400AccountActiveFlag();
                logger.info("VC------------------------AVAILABLE BALANCE Child Service Ended------------------------VC" + output2.getLs400AccountActiveFlag());
                responseData.outResponse = output3.getLs400OutputResponse();
                responseData.outResponse = responseData.outResponse.trim();
                responseData.errno = output1.getLs400OutputErrorNumber();
                
                return responseData;
            }, customThreadPool);

            futures.add(future);
            
            ResponseData lastResult = futures.get(futures.size() - 1).get();
           
            lacctno = lastResult.lacctno;

            String outResponse = lastResult.outResponse;
            int startIndex = 0;
            int endIndex = 0;
            if (lastResult.outResponse == null || lastResult.outResponse.trim().isEmpty()) {
                logger.error("No outResponse from JVMAVBL. Terminating process.");
                 break;
             }
            
            while (startIndex + 97 <= outResponse.length()) {
                endIndex = startIndex + 97;
                allRecordsBuilder.append(outResponse.substring(startIndex, endIndex));
                startIndex = endIndex;
                fetchedRecordsCount++;
            }
        }

        List<String> res = new ArrayList<>();
        
        res.add(allRecordsBuilder.toString());
        res.add(String.valueOf(fetchedRecordsCount));
        res.add(futures.get(futures.size() - 1).get().errno); 

        logger.info("VC------------------------AVAILABLE BALANCE Child Service Ended------------------------VC");

        customThreadPool.shutdown();         
        return res;
        
    }

    public class ResponseData {
        String outResponse;
        String errno;
        String lacctno;
    }
}


))))))))))))))

package com.tcs.bancs.microservices.services;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.tcs.bancs.microservices.jvm.balenq.*;

public class BalanceEnqService_Child {
    Logger logger = LoggerFactory.getLogger(BalanceEnqService_Child.class);

    JVMAVBL jvmavbl = new JVMAVBL();

    public List<String> Balance_Enquiry_Child(String accno, int requestedNumberOfRecords) throws InterruptedException, ExecutionException {

        logger.info("VC------------------------AVAILABLE BALANCE Child Service Started------------------------VC");

        // Split the input account number into 16-digit chunks
        List<String> accountNumbers = new ArrayList<>();
        for (int i = 0; i < accno.length(); i += 16) {
            accountNumbers.add(accno.substring(i, Math.min(i + 16, accno.length())));
        }

        // Number of records to fetch
        int numberOfRecordsToFetch = requestedNumberOfRecords > 0 ? requestedNumberOfRecords : 30;

        List<CompletableFuture<ResponseData>> futures = new ArrayList<>();
        ForkJoinPool customThreadPool = new ForkJoinPool(25);

        int fetchedRecordsCount = 0;
        StringBuilder allRecordsBuilder = new StringBuilder();

        for (String accountNumber : accountNumbers) {
            if (fetchedRecordsCount >= numberOfRecordsToFetch) {
                break; // Stop if requested number of records are fetched
            }

            final String currentLacctno = String.format("%016d", new BigInteger(accountNumber));

            CompletableFuture<ResponseData> future = CompletableFuture.supplyAsync(() -> {
                // Inputs
                Ls400InputAccountNumber input1 = new Ls400InputAccountNumber();
                Ls400InpEnqType input2 = new Ls400InpEnqType();
                // Outputs
                Ls400OutputErrorNumber output1 = new Ls400OutputErrorNumber();
                Ls400AccountActiveFlag output2 = new Ls400AccountActiveFlag();
                Ls400OutputResponse output3 = new Ls400OutputResponse();

                input1.setLs400InputAccountNumber(currentLacctno);
                input2.setLs400InpEnqType("1");

                // Call JVMAVBL
                jvmavbl.JVMAVBL(input1, input2, output1, output2, output3);

                ResponseData responseData = new ResponseData();
                responseData.lacctno = currentLacctno;
                responseData.errno = output1.getLs400OutputErrorNumber();
                responseData.activeFlag = output2.getLs400AccountActiveFlag();
                responseData.outResponse = output3.getLs400OutputResponse();

                return responseData;
            }, customThreadPool);

            futures.add(future);

            // Get the response data
            ResponseData lastResult = futures.get(futures.size() - 1).get();

            // Process only if the account is active (active flag = "A")
            if ("A".equals(lastResult.activeFlag)) {
                String outResponse = lastResult.outResponse;
                if (outResponse == null || outResponse.trim().isEmpty()) {
                    logger.error("No outResponse from JVMAVBL. Terminating process.");
                    break;
                }

                // Append output responses in 97-character chunks
                int startIndex = 0;
                while (startIndex + 97 <= outResponse.length()) {
                    allRecordsBuilder.append(outResponse.substring(startIndex, startIndex + 97));
                    startIndex += 97;
                    fetchedRecordsCount++;

                    if (fetchedRecordsCount >= numberOfRecordsToFetch) {
                        break;
                    }
                }
            }
        }

        List<String> res = new ArrayList<>();
        res.add(allRecordsBuilder.toString()); // Full response
        res.add(String.valueOf(fetchedRecordsCount)); // Count of records fetched
        res.add(futures.get(futures.size() - 1).get().errno); // Last error number

        logger.info("VC------------------------AVAILABLE BALANCE Child Service Ended------------------------VC");

        customThreadPool.shutdown();
        return res;
    }

    public class ResponseData {
        String outResponse;
        String errno;
        String lacctno;
        String activeFlag;
    }
}